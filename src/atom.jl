# ======================== Element(name, symbol, weight) =======================

"""
    Element(name, symbol, weight)

Type with fields:
* `  .name`:  name of element (`::String`)
* `.symbol`:  symbol of element  (`::String`)
* `.weight`:  relative atomic mass - atomic weight (`::Float64`)

The type `Element` is best created with the function [`castElement`](@ref)).
"""
struct Element           # elemental properties
    name::String         # ionic charge (a.u.)
    symbol::String       # nuclear mass (amu)
    weight::Float64      # relative atomic mass (atomic weight)
end

# ======== Isotope(Z, A, radius, mass, I, π, lifetime, mdm, eqm, ra) ===========

"""
    Isotope(Z, A, radius, mass, I, π, lifetime, mdm, eqm, ra)

Type with fields:
* `     .Z`:  atomic number (`::Int`)
* `     .N`:  neutron number (`::Int`)
* `     .A`:  atomic mass number in amu (`::Int`)
* `     .R`:  rms charge radius in Fermi (`::Float64`)
* `     .M`:  *atomic* mass in amu (`::Float64`)
* `     .I`:  nuclear spin in units of ħ  (`::Rational{Int}`)
* `     .π`:  parity of nuclear state (`::Int`)
* `     .lt`:  lifetime inyears (`::Float64`)
* `     .mdm`: nuclear magnetic dipole moment (`::Float64`)
* `     .eqm`: nuclear electric quadrupole moment (`::Float64`)
* `     .ra`:  relative abundance in % (`::Float64`)

The type `Isotope` is best created with the function [`castIsotope`](@ref)).
"""
struct Isotope              # Isotopic properties
     Z::Int            # atomic number
     N::Int            # neutron number
     A::Int            # atomic mass number (amu)
     R::Float64        # rms charge radius (Fermi)
     M::Float64        # nuclear mass (amu)
     I::Rational{Int}  # nuclear spin in units of ħ
     π::Int            # parity of nuclear state
     lt::Float64       # lifetime (years)
     mdm::Float64      # nuclear magnetic dipole moment
     eqm::Float64      # nuclear electric quadrupole moment
     ra::Float64       # relative abundance (%)
end

# ======================== Atom(name, symbol, Z, I, Q, M, I, gI) ===============

"""
    Atom(Z, A, Q, Zc, element, isotope)

Type with fields:
* `     .Z`:  atomic number (`::Int`)
* `     .A`:  atomic mass number in amu (`::Int`)
* `     .Q`:  ionic charge in a.u. (`::Int`)
* `    .Zc`:  Rydberg charge in a.u. (`::Int`)
* `.element`:  (`::Element`)
* `.isotope`:  (`::Isotope`)

The type `Atom` is best created with the function [`castAtom`](@ref)).
"""
struct Atom                           # Isotopic properties
    Z::Int             # atomic number
    A::Int             # atomic mass number in amu
    Q::Int             # ionic charge in a.u.
    Zc::Int            # Rydberg charge in a.u.
    element::Element
    isotope::Isotope
end

# ================================ mendeleev(Z) ================================

@doc raw"""
    mendeleev(Z::Int)

The properties `Name`, `Symbol` and the `Abridged standard atomic weight` of
the *atomic element* `Z`.

Source:  Standard atomic weights of the elements 2021 (IUPAC Technical Report)
#### Example:
```
mendeleev(11)
 ("Sodium", "Na", 22.99)
```
"""
function mendeleev(Z::Int)

    element =
    Dict(
         1 => ("hydrogen", "H", 1.008),
         2 => ("helium", "He", 4.0026),
         3 => ("lithium", "Li", 6.94),
         4 => ("beryllium", "Be", 9.0122),
         5 => ("boron", "B", 10.81),
         6 => ("carbon", "C", 12.011),
         7 => ("nitrogen", "N", 14.007),
         8 => ("oxygen", "O", 15.999),
         9 => ("fluorine", "F", 18.998),
        10 => ("neon", "Ne", 20.18),
        11 => ("sodium", "Na", 22.99),
        12 => ("magnesium", "Mg", 24.305),
        13 => ("aluminium", "Al", 26.982),
        14 => ("silicon", "Si", 28.085),
        15 => ("phosphorus", "P", 30.974),
        16 => ("sulfur", "S", 32.06),
        17 => ("chlorine", "Cl", 35.45),
        18 => ("argon", "Ar", 39.95),
        19 => ("potassium", "K", 39.098),
        20 => ("calcium", "Ca", 40.078),
        21 => ("scandium", "Sc", 44.956),
        22 => ("titanium", "Ti", 47.867),
        23 => ("vanadium", "V", 50.942),
        24 => ("chromium", "Cr", 51.996),
        25 => ("manganese", "Mn", 54.938),
        26 => ("iron", "Fe", 55.845),
        27 => ("cobalt", "Co", 58.933),
        28 => ("nickel", "Ni", 58.693),
        29 => ("copper", "Cu", 63.546),
        30 => ("zinc", "Zn", 65.38),
        31 => ("gallium", "Ga", 69.723),
        32 => ("germanium", "Ge", 72.63),
        33 => ("arsenic", "As", 74.922),
        34 => ("selenium", "Se", 78.971),
        35 => ("bromine", "Br", 79.904),
        36 => ("krypton", "Kr", 83.798),
        37 => ("rubidium", "Rb", 85.468),
        38 => ("strontium", "Sr", 87.62),
        39 => ("yttrium", "Y", 88.906),
        40 => ("zirconium", "Zr", 91.224),
        41 => ("niobium", "Nb", 92.906),
        42 => ("molybdenum", "Mo", 95.95),
        43 => ("technetium*", "Tc", nothing),
        44 => ("ruthenium", "Ru", 101.07),
        45 => ("rhodium", "Rh", 102.91),
        46 => ("palladium", "Pd", 106.42),
        47 => ("silver", "Ag", 107.87),
        48 => ("cadmium", "Cd", 112.41),
        49 => ("indium", "In", 114.82),
        50 => ("tin", "Sn", 118.71),
        51 => ("antimony", "Sb", 121.76),
        52 => ("tellurium", "Te", 127.6),
        53 => ("iodine", "I", 126.9),
        54 => ("xenon", "Xe", 131.29),
        55 => ("caesium", "Cs", 132.91),
        56 => ("barium", "Ba", 137.33),
        57 => ("lanthanum", "La", 138.91),
        58 => ("cerium", "Ce", 140.12),
        59 => ("praseodymium", "Pr", 140.91),
        60 => ("neodymium", "Nd", 144.24),
        61 => ("promethium*", "Pm", nothing),
        62 => ("samarium", "Sm", 150.36),
        63 => ("europium", "Eu", 151.96),
        64 => ("gadolinium", "Gd", 157.25),
        65 => ("terbium", "Tb", 158.93),
        66 => ("dysprosium", "Dy", 162.5),
        67 => ("holmium", "Ho", 164.93),
        68 => ("erbium", "Er", 167.26),
        69 => ("thulium", "Tm", 168.93),
        70 => ("ytterbium", "Yb", 173.05),
        71 => ("lutetium", "Lu", 174.97),
        72 => ("hafnium", "Hf", 178.49),
        73 => ("tantalum", "Ta", 180.95),
        74 => ("tungsten", "W", 183.84),
        75 => ("rhenium", "Re", 186.21),
        76 => ("osmium", "Os", 190.23),
        77 => ("iridium", "Ir", 192.22),
        78 => ("platinum", "Pt", 195.08),
        79 => ("gold", "Au", 196.97),
        80 => ("mercury", "Hg", 200.59),
        81 => ("thallium", "Tl", 204.38),
        82 => ("lead", "Pb", 207.2),
        83 => ("bismuth*", "Bi", 208.98),
        84 => ("polonium*", "Po", nothing),
        85 => ("astatine*", "At", nothing),
        86 => ("radon*", "Rn", nothing),
        87 => ("francium*", "Fr", nothing),
        88 => ("radium*", "Ra", nothing),
        89 => ("actinium*", "Ac", nothing),
        90 => ("thorium*", "Th", 232.04),
        91 => ("protactinium*", "Pa", 231.04),
        92 => ("uranium*", "U", 238.03),
        93 => ("neptunium*", "Np", nothing),
        94 => ("plutonium*", "Pu", nothing),
        95 => ("americium*", "Am", nothing),
        96 => ("curium*", "Cm", nothing),
        97 => ("berkelium*", "Bk", nothing),
        98 => ("californium*", "Cf", nothing),
        99 => ("einsteinium*", "Es", nothing),
       100 => ("fermium*", "Fm", nothing),
       101 => ("mendelevium*", "Md", nothing),
       102 => ("nobelium*", "No", nothing)
       )

       elt = (name,symbol,weight) = get(element,Z,nothing)

    return  isnothing(elt) ? error("Error: element Z = $Z not included") : elt

end

# ============================ _elementspecs(Z) ================================

function _elementspecs(Z::Int)

    (name, symbol, weight) = mendeleev(Z)

    str = "Element created: $(name)
    symbol: $(symbol)
    atomic number (Z): $Z
    atomic weight (relative atomic mass): $(weight) amu"

    return str

end

# =========== castElement(name, symbol, weight) ================================

"""
    castElement(;Z=1, msg=true)

Create Atom with fields
* `  .name`:  name of element
* `.symbol`:  symbol of element
* `.weight`:  relative atomic mass (atomic weight)
#### Example:
```
castElement(;Z=1, msg=true)
  Element created: hydrogen
    symbol: H
    atomic number (Z): 1
    atomic weight (relative atomic mass): 1.008 amu

  Element("hydrogen", "H", 1.008)
```
"""
function castElement(;Z=1, msg=true)

    (name, symbol, weight) = mendeleev(Z)

    msg && println(_elementspecs(Z) )

    return Element(name, symbol, weight)

end

# ======================== nucleardata(Z, A) =======================================

@doc raw"""
    nucleardata(Z::Int)

The properties `name` and `symbol` of the *atomic element* `Z`.

Sources: AME2020, LINDC(NDS)-0794 and INDC(NDS)-0794
#### Example:
```
nucleardata(11,23)
  (Na, 2.9936, 22989769.28, 1.5, 1, 1e100, 2.21750, 0.104, 100.00),
```
"""
function nucleardata(Z::Int, A::Int)

    isotope =
    Dict(
        (1, 1) => ("H", 0.8783, 1007825.032,      1/2, +1,      1e100, +2.792847351,  0,          99.9855),
        (1, 2) => ("H", 2.1421, 2014101.778,      1,   +1,      1e100, +0.857438231, +0.0028578,   0.0145),
        (1, 3) => ("H", 1.7591, 3016049.281,      1/2, +1,      12.33, +2.978962460,  0,          nothing),
        (2, 3) => ("He", 1.9661, 3016029.322,     1/2, +1,      1e100, -2.12762531,   0,           0.0002),
        (2, 4) => ("He", 1.6755, 4002603.254,     0,   +1,      1e100, 0,             0,          99.9998),
        (3, 6) => ("Li", 2.589, 6015122.887,      1,   +1,      1e100, +0.822043,    -0.000806,    4.85),
        (3, 7) => ("Li", 2.444, 7016003.434,      3/2, -1,      1e100, +3.256407,    -0.0400,     95.15),
        (4, 9) => ("Be", 2.519, 9012183.062,      3/2, -1,      1e100, -1.177430,    +0.0529,    100.0),
        (4, 10) => ("Be", 2.355, 10013534.69,     0,   +1,    1.51e06, 0,             0,        nothing),
        (5, 10) => ("B", 2.4277, 10012936.86,     3,   +1,      1e100, 1.8004636,    +0.0846,    19.65),
        (5, 11) => ("B", 2.406, 11009305.17,      3/2, -1,      1e100, 2.688378,     +0.04059,   80.35),
        (6, 12) => ("C", 2.4702, 12000000,        0,   +1,      1e100, 0,             0,          98.94),
        (6, 13) => ("C", 2.4614, 13003354.84,     1/2, -1,      1e100, +0.702369,     0,           1.06),
        (6, 14) => ("C", 2.5025, 14003241.99,     0,   +1,       5700, 0,             0,        nothing),
        (7, 14) => ("N", 2.5582, 14003074,        1,   +1,      1e100, +0.403573,    +0.02044,  99.6205),
        (7, 15) => ("N", 2.6058, 15000108.9,      1/2, -1,      1e100, -0.2830569,    0,          0.3795),
        (8, 16) => ("O", 2.6991, 15994914.62,     0,   +1,      1e100, 0,             0,          99.757),
        (8, 17) => ("O", 2.6932, 16999131.76,     5/2, +1,      1e100, -1.893543,    -0.0256,    0.03835),
        (8, 18) => ("O", 2.7726, 17999159.61,     0,   +1,      1e100, 0,             0,          0.2045),
        (9, 19) => ("F", 2.8976, 18998403.16,     1/2, +1,      1e100, +2.628321,     0,          100.00),
        (10, 20) => ("Ne", 3.0055, 19992440.18,   0,   +1,      1e100, 0,             0,          90.48),
        (10, 21) => ("Ne", 2.9695, 20993846.69,   3/2, +1,      1e100, -0.66170,     +0.1016,    0.27),
        (10, 22) => ("Ne", 2.9525, 21991385.11,   0,   +1,      1e100, 0,             0,          9.25),
        (11, 22) => ("Na", 2.9852, 21994437.55,   3,   +1,       2.60, +1.746,       +0.180,    nothing),
        (11, 23) => ("Na", 2.9936, 22989769.28,   3/2, +1,      1e100, +2.21750,     +0.104,     100.00),
        (12, 24) => ("Mg", 3.057, 23985041.69,    0,   +1,      1e100, 0,             0,          78.965),
        (12, 25) => ("Mg", 3.0284, 24985836.97,   5/2, +1,      1e100, -0.85533,     +0.199,     10.011),
        (12, 26) => ("Mg", 3.0337, 25982592.97,   0,   +1,      1e100, 0,             0,          11.025),
        (13, 26) => ("Al", 3.05, 25986891.88,     5,   +1,    7.17e5, +2.803,        +0.26,     nothing),
        (13, 27) => ("Al", 3.061, 26981538.41,    5/2, +1,      1e100, +3.64070,      +0.1466,    100.00),
        (14, 28) => ("Si", 3.1224, 27976926.53,   0,   +1,      1e100, 0,             0,          92.2545),
        (14, 29) => ("Si", 3.1176, 28976494.66,   1/2, +1,      1e100, -0.555052,     0,          4.672),
        (14, 30) => ("Si", 3.1336, 29973770.14,   0,   +1,      1e100, 0,             0,          3.0735),
        (15, 31) => ("P", 3.1889, 30973762,       1/2, +1,      1e100, +1.130925,     0,          100.00),
        (16, 32) => ("S", 3.2611, 31972071.17,    0,   +1,      1e100, 0,             0,          94.85),
        (16, 33) => ("S", 3.3, 32971458.91,       3/2, +1,      1e100, +0.64325,     -0.0678,    0.763),
        (16, 34) => ("S", 3.2847, 33967867.01,    0,   +1,      1e100, 0,             0,          4.365),
        (16, 36) => ("S", 3.2985, 35967080.69,    0,   +1,      1e100, 0,             0,          0.0158),
        (17, 35) => ("Cl", 3.3654, 34968852.69,   3/2, +1,      1e100, +0.82170,      -0.817,     75.8),
        (17, 36) => ("Cl", 3.37, 35968306.82,     2,   +1,    3.01e5, 1.2849,        -0.178,     nothing),
        (17, 37) => ("Cl", 3.384, 36965902.57,    3/2, +1,      1e100, +0.6840,      -0.0644,    24.2),
        (18, 36) => ("Ar", 3.3905, 35967545.11,   0,   +1,      1e100, 0,             0,          0.3336),
        (18, 38) => ("Ar", 3.4028, 37962732.1,    0,   +1,      1e100, 0,             0,          0.0629),
        (18, 39) => ("Ar", 3.4093, 38964313.04,   7/2, -1,       269, -1.590,         -0.116,    nothing),
        (18, 40) => ("Ar", 3.4274, 39962383.12,   0,   +1,      1e100, 0,             0,          99.6035),
        (19, 39) => ("K", 3.4349, 38963706.48,    3/2, +1,      1e100, +0.391470,     +0.0603,    93.2581),
        (19, 40) => ("K", 3.4381, 39963998.17,    4,   -1,    1.25e9, -1.29797,      -0.0750,    0.0117),
        (19, 41) => ("K", 3.4518, 40961825.26,    3/2, +1,      1e100, +0.21482,     -0.0734,    6.7302),
        (20, 40) => ("Ca", 3.4776, 39962590.85,   0,   +1,      1e100, 0,             0,          96.941),
        (20, 41) => ("Ca", 3.478, 40962277.91,    7/2, -1,    1.00e5, -1.5942,        -0.665,    nothing),
        (20, 42) => ("Ca", 3.5081, 41958617.78,   0,   +1,      1e100, 0,             0,          0.647),
        (20, 43) => ("Ca", 3.4954, 42958766.38,   7/2, -1,      1e100, -1.31733,      -0.0408,    0.135),
        (20, 44) => ("Ca", 3.5179, 43955481.49,   0,   +1,      1e100, 0,             0,          2.086),
        (20, 46) => ("Ca", 3.4953, 45953687.73,   0,   +1,      1e100, 0,             0,          0.004),
        (20, 48) => ("Ca", 3.4771, 47952522.65,   0,   +1,    2.90e19, 0,             0,          0.187),
        (21, 45) => ("Sc", 3.5459, 44955907.05,   7/2, -1,    4.00e19, +4.75400,     -0.220,    100.00),
        (22, 46) => ("Ti", 3.607, 45952626.36,    0,   +1,      1e100, 0,             0,          8.25),
        (22, 47) => ("Ti", 3.5962, 46951757.49,   5/2, -1,      1e100, -0.78848,     +0.302,    7.44),
        (22, 48) => ("Ti", 3.5921, 47947940.68,   0,   +1,      1e100, 0,             0,          73.72),
        (22, 49) => ("Ti", 3.5733, 48947864.39,   7/2, -1,      1e100, -1.10417,      0.247,      5.41),
        (22, 50) => ("Ti", 3.5704, 49944785.62,   0,   +1,      1e100, 0,             0,          5.18),
        (23, 50) => ("V",  3.58, 49947156.68,     6,   +1,    2.65e17, +3.3456889,    +0.21,      0.25),
        (23, 51) => ("V", 3.6002, 50943957.66,    7/2, -1,      1e100, +5.1464,      -0.52,      99.75),
        (24, 50) => ("Cr", 3.6588, 49946042.21,   0,   +1,    1.30e18, 0,             0,          4.345),
        (24, 52) => ("Cr", 3.6452, 51940504.71,   0,   +1,      1e100, 0,             0,          83.789),
        (24, 53) => ("Cr", 3.6511, 52940646.3,    3/2, -1,      1e100, -0.47431,      -0.15,      9.501),
        (24, 54) => ("Cr", 3.6885, 53938877.36,   0,   +1,      1e100, 0,              0,         2.365),
        (25, 53) => ("Mn", 3.6662, 52941287.5,    7/2, -1,    3.70e06, +5.033,       +0.17,      nothing),
        (25, 55) => ("Mn", 3.7057, 54938043.04,   5/2, -1,      1e100, 3.4669,        +0.330,    100.00),
        (26, 54) => ("Fe", 3.6933, 53939608.19,   0,   +1,      1e100, 0,             0,          5.845),
        (26, 56) => ("Fe", 3.7377, 55934935.54,   0,   +1,      1e100, 0,             0,          91.754),
        (26, 57) => ("Fe", 3.7532, 56935391.95,   1/2, -1,      1e100, 0.09064,       0,          2.119),
        (26, 58) => ("Fe", 3.7745, 57933273.58,   0,   +1,      1e100, 0,             0,          0.282),
        (26, 60) => ("Fe", 3,78, 59934070.25,     0,   +1,    2.62e06, 0,             0,          nothing),
        (27, 59) => ("Co", 3.7875, 58933193.52,   7/2, -1,      1e100, +4.615,       +0.42,     100.00),
        (27, 60) => ("Co", 3,79, 59933815.54,     5,   +1,    1925.28, +3.799,       +0.46,      nothing),
        (28, 58) => ("Ni", 3.7757, 57935341.65,   0,   +1,      1e100, 0,             0,          68.0769),
        (28, 60) => ("Ni", 3.8118, 59930785.13,   0,   +1,      1e100, 0,             0,          26.2231),
        (28, 61) => ("Ni", 3.8225, 60931054.82,   3/2, -1,      1e100, -0.74965,      +0.162,     1.1399),
        (28, 62) => ("Ni", 3.8399, 61928344.75,   0,   +1,      1e100, 0,             0,          3.6345),
        (28, 64) => ("Ni", 3.8572, 63927966.23,   0,   +1,      1e100, 0,             0,          0.9256),
        (29, 63) => ("Cu", 3.8823, 62929597.12,   3/2, -1,      1e100, +2.2259,       -0.220,     69.15),
        (29, 65) => ("Cu", 3.9022, 64927789.48,   3/2, -1,      1e100, 2.3844,        -0.204,     30.85),
        (30, 64) => ("Zn", 3.9283, 63929141.78,   0,   +1,      1e100, 0,             0,         49.17),
        (30, 66) => ("Zn", 3.9491, 65926033.64,   0,   +1,      1e100, 0,             0,         27.73),
        (30, 67) => ("Zn", 3.953, 66927127.42,    5/2, -1,      1e100, +0.87485,     +0.122,      4.04),
        (30, 68) => ("Zn", 3.9658, 67924844.23,   0,   +1,      1e100, 0,             0,         18.45),
        (30, 70) => ("Zn", 3.9845, 69925319.18,   0,   +1,    3.80e18, 0,             0,         0.61),
        (31, 69) => ("Ga", 3.9973, 68925573.53,   3/2, -1,      1e100, +2.01502,     +0.171,     60.108),
        (31, 71) => ("Ga", 4.0118, 70924702.55,   3/2, -1,      1e100, +2.56033,     +0.107,     39.892),
        (32, 70) => ("Ge", 4.0414, 69924248.54,   0,   +1,      1e100, 0,             0,         20.52),
        (32, 72) => ("Ge", 4.0576, 71922075.82,   0,   +1,      1e100, 0,             0,         27.45),
        (32, 73) => ("Ge", 4.0632, 72923458.95,   9/2, +1,      1e100, -0.87824,     -0.196,    7.76),
        (32, 74) => ("Ge", 4.0742, 73921177.76,   0,   +1,      1e100, 0,             0,         36.52),
        (32, 76) => ("Ge", 4.0811, 75921402.73,   0,   +1,      1e100, 0,             0,         7.75),
        (33, 75) => ("As", 4.0968, 74921594.56,   3/2, -1,      1e100, +1.4383,      +0.311,     100.00),
        (34, 74) => ("Se", 4.07, 73922475.93,     0,   +1,      1e100, 0,             0,         0.86),
        (34, 76) => ("Se", 4.1395, 75919213.7,    0,   +1,      1e100, 0,             0,         9.23),
        (34, 77) => ("Se", 4.1395, 76919914.15,   1/2, -1,      1e100, +0.53356,      0,         7.6),
        (34, 78) => ("Se", 4.1406, 77917309.24,   0,   +1,      1e100, 0,             0,         23.69),
        (34, 79) => ("Se", 4.14, 78918499.25,     7/2, +1,    3.27e05, -1.018,        nothing,   nothing),
        (34, 80) => ("Se", 4.14, 79916521.76,     0,   +1,      1e100, 0,             0,         49.8),
        (35, 79) => ("Br", 4.1629, 78918337.57,   3/2, -1,      1e100, +2.1046,      +0.3087,    50.65),
        (35, 81) => ("Br", 4.1599, 80916288.2,    3/2, -1,      1e100, +2.2686,      +0.2579,    49.35),
        (36, 78) => ("Kr", 4.2038, 77920366.34,   0,   +1,      1e100, 0,             0,         0.355),
        (36, 80) => ("Kr", 4.197, 79916377.94,    0,   +1,      1e100, 0,             0,         2.286),
        (36, 81) => ("Kr", 4.1952, 80916589.7,    7/2, +1,    2.29e05, -0.907,       +0.644,     nothing),
        (36, 82) => ("Kr", 4.1919, 81913481.15,   0,   +1,      1e100, 0,             0,         11.593),
        (36, 83) => ("Kr", 4.1871, 82914126.52,   9/2, +1,      1e100, -0.970730,    +0.259,     11.5),
        (36, 84) => ("Kr", 4.1884, 83911497.73,   0,   +1,      1e100, 0,             0,         56.987),
        (36, 85) => ("Kr", 4.1846, 84912527.26,   9/2, +1,      10.74, -1.0055,      +0.433,     nothing),
        (36, 86) => ("Kr", 4.1835, 85910610.62,   0,   +1,      1e100, 0,             0,         17.279),
        (37, 85) => ("Rb", 4.2036, 84911789.74,   5/2, -1,      1e100, +1.35306,     +0.276,     72.17),
        (37, 87) => ("Rb", 4.1989, 86909180.53,   3/2, -1,    4.97e10, +2.75129,     +0.1335,    27.83),
        (38, 84) => ("Sr", 4.2394, 83913419.12,   0,   +1,      1e100, 0,             0,         0.56),
        (38, 86) => ("Sr", 4.2307, 85909260.72,   0,   +1,      1e100, 0,             0,         9.86),
        (38, 87) => ("Sr", 4.2249, 86908877.49,   9/2, +1,      1e100, -1.09316,     +0.305,     7),
        (38, 88) => ("Sr", 4.224, 87905612.25,    0,   +1,      1e100, 0,             0,         82.58),
        (39, 89) => ("Y",  4.243, 88905838.16,    1/2, -1,      1e100, -0.137298,     0,         100.00),
        (40, 90) => ("Zr", 4.2694, 89904698.76,   0,   +1,      1e100, 0,             0,         51.45),
        (40, 91) => ("Zr", 4.2845, 90905640.21,   5/2, +1,      1e100, -1.3022,      -0.176,     11.22),
        (40, 92) => ("Zr", 4.3057, 91905035.34,   0,   +1,      1e100, 0,             0,         17.15),
        (40, 94) => ("Zr", 4.332, 93906312.52,    0,   +1,      1e100, 0,             0,         17.38),
        (40, 96) => ("Zr", 4.3512, 95908277.62,   0,   +1,    2.00e19, 0,             0,         2.8),
        (41, 91) => ("Nb", 4.28, 90906990.26,     9/2, +1,        680, +6.513,       -0.25,      nothing),
        (41, 92) => ("Nb", 4.3026, 91907188.58,   7,   +1,    3.47e07, +5.130,       -0.35,      nothing),
        (41, 93) => ("Nb", 4.324, 92906373.17,    9/2, +1,      1e100, +6.163,       -0.32,      100.00),
        (42, 92) => ("Mo", 4.3151, 91906807.15,   0,   +1,      1e100, 0,             0,         14.649),
        (42, 94) => ("Mo", 4.3529, 93905083.59,   0,   +1,      1e100, 0,             0,         9.187),
        (42, 95) => ("Mo", 4.3628, 94905837.44,   5/2, +1,      1e100, -0.9132,      -0.022,    15.873),
        (42, 96) => ("Mo", 4.3847, 95904674.77,   0,   +1,      1e100, 0,             0,         16.673),
        (42, 97) => ("Mo", 4.388, 96906016.9,     5/2, +1,      1e100, -0.9324,      +0.255,     9.582),
        (42, 98) => ("Mo", 4.4091, 97905403.61,   0,   +1,      1e100, 0,             0,         24.292),
        (42, 100) => ("Mo", 4.4468, 99907467.98,  0,   +1,    7.01e18, 0,             0,         9.744),
        (43, 99) => ("Tc", 4.4, 98906249.68,      9/2, +1,    2.11e5, +5.678,        -0.129,     nothing),
        (44, 96) => ("Ru", 4.3908, 95907588.91,   0,   +1,      1e100, 0,             0,         5.54),
        (44, 98) => ("Ru", 4.4229, 97905286.71,   0,   +1,      1e100, 0,             0,         1.87),
        (44, 99) => ("Ru", 4.4338, 98905930.28,   5/2, +1,      1e100, -0.641,       +0.079,     12.76),
        (44, 100) => ("Ru", 4.4531, 99904210.46,  0,   +1,      1e100, 0,             0,         12.6),
        (44, 101) => ("Ru", 4.4606, 100905573.1,  5/2, +1,      1e100, -0.718,       +0.46,      17.06),
        (44, 102) => ("Ru", 4.4809, 101904340.3,  0,   +1,      1e100, 0,             0,         31.55),
        (44, 104) => ("Ru", 4.5098, 103905425.3,  0,   +1,      1e100, 0,             0,         18.62),
        (45, 103) => ("Rh", 4.4945, 102905494.1,  1/2, -1,      1e100, -0.08829,      0,         100.00),
        (46, 102) => ("Pd", 4.4827, 101905632.3,  0,   +1,      1e100, 0,             0,         1.02),
        (46, 104) => ("Pd", 4.5078, 103904030.4,  0,   +1,      1e100, 0,             0,         11.14),
        (46, 105) => ("Pd", 4.515, 104905079.5,   5/2, +1,      1e100, -0.642,        0.660,     22.33),
        (46, 106) => ("Pd", 4.5318, 105903480.3,  0,   +1,      1e100, 0,             0,         27.33),
        (46, 108) => ("Pd", 4.5563, 107903891.8,  0,   +1,      1e100, 0,             0,         26.46),
        (46, 110) => ("Pd", 4.5782, 109905172.9,  0,   +1,      1e100, 0,             0,         11.72),
        (47, 107) => ("Ag", 4.5454, 106905091.5,  1/2, -1,      1e100, -0.11352,      0,         51.839),
        (47, 109) => ("Ag", 4.5638, 108904755.8,  1/2, -1,      1e100, 0.13051,       0,         48.161),
        (48, 106) => ("Cd", 4.5383, 105906459.8,  0,   +1,      1e100, 0,             0,         1.245),
        (48, 108) => ("Cd", 4.5577, 107904183.6,  0,   +1,      1e100, 0,             0,         0.888),
        (48, 110) => ("Cd", 4.5765, 109903007.5,  0,   +1,      1e100, 0,             0,         12.47),
        (48, 111) => ("Cd", 4.5845, 110904183.8,  1/2, +1,      1e100, -0.5940,       0,         12.795),
        (48, 112) => ("Cd", 4.5944, 111902763.9,  0,   +1,      1e100, 0,             0,         24.109),
        (48, 113) => ("Cd", 4.6012, 112904408.1,  1/2, +1,    8.04e15, -0.6213,       0,         12.227),
        (48, 114) => ("Cd", 4.6087, 113903365,    0,   +1,      1e100, 0,             0,         28.754),
        (48, 116) => ("Cd", 4.6203, 115904763.2,  0,   +1,    3.30e19, 0,             0,         7.512),
        (49, 113) => ("In", 4.601, 112904060.5,   9/2, +1,      1e100, +5.5208,       0.761,     4.281),
        (49, 115) => ("In", 4.6156, 114903878.8,  9/2, +1,    4.41e14, +5.5326,       0.772,     95.719),
        (50, 112) => ("Sn", 4.5948, 111904824.9,  0,   +1,      1e100, 0,             0,         0.97),
        (50, 114) => ("Sn", 4.6099, 113902780.1,  0,   +1,      1e100, 0,             0,         0.66),
        (50, 115) => ("Sn", 4.6148, 114903344.7,  1/2, +1,      1e100, -0.9174,       0,         0.340),
        (50, 116) => ("Sn", 4.625, 115901742.8,   0,   +1,      1e100, 0,             0,         14.54),
        (50, 117) => ("Sn", 4.6302, 116902954,    1/2, +1,      1e100, -0.9995,       0,         7.680),
        (50, 118) => ("Sn", 4.6393, 117901606.6,  0,   +1,      1e100, 0,             0,         24.22),
        (50, 119) => ("Sn", 4.6438, 118903311.3,  1/2, +1,      1e100, -1.0459,       0,         8.59),
        (50, 120) => ("Sn", 4.6519, 119902202.6,  0,   +1,      1e100, 0,             0,         32.58),
        (50, 122) => ("Sn", 4.6634, 121903445.5,  0,   +1,      1e100, 0,             0,         4.63),
        (50, 124) => ("Sn", 4.6735, 123905279.6,  0,   +1,      1e100, 0,             0,         5.79),
        (51, 121) => ("Sb", 4.6802, 120903811.4,  5/2, +1,      1e100, +3.3580,      -0.543,     57.21),
        (51, 123) => ("Sb", 4.6879, 122904215.3,  7/2, +1,      1e100, +2.5457,      -0.692,     42.79),
        (52, 120) => ("Te", 4.7038, 119904065.8,  0,   +1,      1e100, 0,             0,         0.09),
        (52, 122) => ("Te", 4.7095, 121903044.7,  0,   +1,      1e100, 0,             0,         2.55),
        (52, 123) => ("Te", 4.7117, 122904271,    1/2, +1,    9.20e16, -0.7358,       0,         0.89),
        (52, 124) => ("Te", 4.7183, 123902818.3,  0,   +1,      1e100, 0,             0,         4.74),
        (52, 125) => ("Te", 4.7204, 124904431.2,  1/2, +1,      1e100, -0.8870,       0,         7.07),
        (52, 126) => ("Te", 4.7266, 125903312.1,  0,   +1,      1e100, 0,             0,         8.84),
        (52, 128) => ("Te", 4.7346, 127904461.2,  0,   +1,    7.70e24, 0,             0,         31.74),
        (52, 130) => ("Te", 4.7423, 129906222.7,  0,   +1,    7.90e20, 0,             0,         34.08),
        (53, 127) => ("I", 4.75, 126904472.6,     5/2, +1,      1e100, +2.8087,      -0.688,     100.00),
        (53, 129) => ("I", 4.8, 128904983.6,      7/2, +1,     1.57e7, +2.6165,      -0.483,     nothing),
        (54, 124) => ("Xe", 4.7661, 123905885.2,  0,   +1,    1.60e14, 0,             0,         0.095),
        (54, 126) => ("Xe", 4.7722, 125904297.4,  0,   +1,      1e100, 0,             0,         0.089),
        (54, 128) => ("Xe", 4.7774, 127903530.8,  0,   +1,      1e100, 0,             0,         1.91),
        (54, 129) => ("Xe", 4.7775, 128904780.9,  1/2, +1,      1e100, -0.777961,     0,         26.401),
        (54, 130) => ("Xe", 4.7818, 129903509.3,  0,   +1,      1e100, 0,             0,         4.071),
        (54, 131) => ("Xe", 4.7808, 130905084.1,  3/2, +1,      1e100, +0.691845,    -0.114,     21.232),
        (54, 132) => ("Xe", 4.7859, 131904155.1,  0,   +1,      1e100, 0,             0,         26.909),
        (54, 134) => ("Xe", 4.7899, 133905393,    0,   +1,    5.80e22, 0,             0,         10.436),
        (54, 136) => ("Xe", 4.7964, 135907214.5,  0,   +1,    2.17e21, 0,             0,         8.857),
        (55, 133) => ("Cs", 4.8041, 132905452,    7/2, +1,      1e100, +2.5778,      -0.00343,   100.00),
        (55, 134) => ("Cs", 4.805, 133928680.4,   4,   +1,       2.06, +2.9893,      +0.37,      nothing),
        (55, 135) => ("Cs", 4.8067, 134905976.9,  7/2, +1,     2.30e6, +2.7283,      +0.048,     nothing),
        (55, 137) => ("Cs", 4.807, 136946162,     7/2, +1,       30.1, +2.8374,      +0.048,     nothing),
        (56, 130) => ("Ba", 4.8283, 129906326,    0,   +1,      1e100, 0,             0,         0.11),
        (56, 132) => ("Ba", 4.8303, 131905061.2,  0,   +1,    3.00e21, 0,             0,         0.1),
        (56, 134) => ("Ba", 4.8322, 133904508.2,  0,   +1,      1e100, 0,             0,         2.42),
        (56, 135) => ("Ba", 4.8294, 134905688.4,  3/2, +1,      1e100, +0.8381,      +0.153,     6.59),
        (56, 136) => ("Ba", 4.8334, 135904575.8,  0,   +1,      1e100, 0,             0,         7.85),
        (56, 137) => ("Ba", 4.8314, 136905827.2,  3/2, +1,      1e100, +0.9375,      +0.236,     11.23),
        (56, 138) => ("Ba", 4.8378, 137905247.1,  0,   +1,      1e100, 0,             0,         71.7),
        (57, 137) => ("La", 4.8496, 136906450.4,  7/2, +1,     6.00e4, +2.696,       +0.21,      nothing),
        (57, 138) => ("La", 4.8473, 137907124,    5, +1,      1.03e11, +3.7084,      +0.39,      0.08881),
        (57, 139) => ("La", 4.855, 138906362.9,   7/2, +1,      1e100, +2.7791,       0.206,     99.91119),
        (58, 136) => ("Ce", 4.8739, 135907129.3,  0,   +1,      1e100, 0,             0,         0.186),
        (58, 138) => ("Ce", 4.8737, 137905994.2,  0,   +1,    4.40e16, 0,             0,         0.251),
        (58, 140) => ("Ce", 4.8771, 139905448.4,  0,   +1,      1e100, 0,             0,         88.449),
        (58, 142) => ("Ce", 4.9063, 141909250.2,  0,   +1,    5.00e16, 0,             0,         11.114),
        (59, 141) => ("Pr", 4.8919, 140907659.6,  5/2, +1,      1e100, +4.266,       -0.077,     100.00),
        (60, 142) => ("Nd", 4.9123, 141907728.8,  0,   +1,      1e100, 0,             0,         27.153),
        (60, 143) => ("Nd", 4.9254, 142909819.8,  7/2, -1,      1e100, -1.065,       -0.61,      12.173),
        (60, 144) => ("Nd", 4.9421, 143910092.8,  0,   +1,    2.29e15, 0,             0,         23.798),
        (60, 145) => ("Nd", 4.9535, 144912579.2,  7/2, -1,      1e100, -0.656,       -0.314,     8.293),
        (60, 146) => ("Nd", 4.9696, 145913122.5,  0,   +1,      1e100, 0,             0,         17.189),
        (60, 148) => ("Nd", 4.9999, 147916899,    0,   +1,      1e100, 0,             0,         5.756),
        (60, 150) => ("Nd", 5.04,   149920901.3,  0,   +1,    9.10e18, 0,             0,         5.638),
        (61, 147) => ("Pm", 5.0,    146915144.9,  7/2, +1,      2.623, +2.58,        +0.74,      nothing),
        (62, 144) => ("Sm", 4.9524, 143912006.3,  0,   +1,      1e100, 0,             0,         3.08),
        (62, 146) => ("Sm", 4.9808, 145913046.8,  0,   +1,    6.80e07, 0,             0,         nothing),
        (62, 147) => ("Sm", 4.9892, 146914904.4,  7/2, -1,    1.07e11, -0.8090,      -0.26,      15),
        (62, 148) => ("Sm", 5.0042, 147914829.2,  0,   +1,    7.00e15, 0,             0,         11.25),
        (62, 149) => ("Sm", 5.0134, 148917191.2,  7/2, -1,      1e100, -0.6677,      +0.078,     13.82),
        (62, 150) => ("Sm", 5.0387, 149917282,    0,   +1,      1e100, 0,             0,         7.37),
        (62, 151) => ("Sm", 5.055, 150919938.9,   5/2, -1,         90, -0.3605,      +0.71,      0.0057),
        (62, 152) => ("Sm", 5.0819, 151919738.6,  0,   +1,      1e100, 0,             0,         26.74),
        (62, 154) => ("Sm", 5.1053, 153922215.8,  0,   +1,      1e100, 0,             0,         22.74),
        (63, 150) => ("Eu", 5.0296, 149919707.1,  5,   -1,       36.9, +2.702,       +1.13,      0.0108),
        (63, 151) => ("Eu", 5.0522, 150919856.6,  5/2, +1,     1.70e18, +3.4635,     +0.903,     47.81),
        (63, 153) => ("Eu", 5.1115, 152921236.8,  5/2, +1,       1e100, +1.5294,     +2.41,      52.19),
        (63, 153) => ("Eu", 5.1115, 152921236.8,  5/2, +1,       1e100, +1.5294,     +2.41,      0.0062),
        (63, 154) => ("Eu", 5.1239, 153922985.7,  3,   -1,       8.601, -2.000,      +2.85,      0.0079),
        (63, 155) => ("Eu", 5.1221, 154922899.8,  5/2, +1,       4.753, +1.516,      +2.5,       0.0069),
        (64, 152) => ("Gd", 5.0774, 151919798.4,  0,   +1,     1.08e14, 0,            0,          0.2),
        (64, 154) => ("Gd", 5.1223, 153920873,    0,   +1,       1e100, 0,            0,          2.18),
        (64, 155) => ("Gd", 5.1319, 154922629.4,  3/2, -1,       1e100, -0.2591,      1.27,       14.8),
        (64, 156) => ("Gd", 5.142, 155922130.1,   0,   +1,       1e100, 0,            0,          20.47),
        (64, 157) => ("Gd", 5.1449, 156923967.4,  3/2, -1,       1e100, -0.3398,     +1.36,       15.65),
        (64, 158) => ("Gd", 5.1569, 157924111.2,  0,   +1,       1e100, 0,            0,          24.84),
        (64, 160) => ("Gd", 5.1734, 159927061.2,  0,   +1,       1e100, 0,            0,          21.86),
        (65, 157) => ("Tb", 5.0489, 156924031.9,  3/2, +1,          71, +2.03,       +1.40,       0.15),
        (65, 159) => ("Tb", 5.06, 158925353.7,    3/2, +1,       1e100, +2.009,      +1.432,      100.00),
        (66, 156) => ("Dy", 5.1622, 155924283.6,  0,   +1,       1e100, 0,            0,          0.056),
        (66, 158) => ("Dy", 5.1815, 157924414.8,  0,   +1,       1e100, 0,            0,          0.095),
        (66, 160) => ("Dy", 5.1951, 159925203.6,  0,   +1,       1e100, 0,            0,          2.329),
        (66, 161) => ("Dy", 5.1962, 160926939.4,  5/2, +1,       1e100, -0.479,      +2.51,       18.889),
        (66, 162) => ("Dy", 5.2074, 161926804.5,  0,   +1,       1e100, 0,            0,          25.475),
        (66, 163) => ("Dy", 5.2099, 162928737.2,  5/2, -1,       1e100, +0.671,      +2.65,       24.896),
        (66, 164) => ("Dy", 5.2218, 163929180.8,  0,   +1,       1e100, 0,            0,          28.26),
        (67, 163) => ("Ho", 5.1907, 162928740.3,  7/2, -1,        4570, +4.22,       +3.7,        nothing),
        (67, 165) => ("Ho", 5.2022, 164930329.1,  7/2, -1,       1e100, +4.16,       +3.58,       100.00),
        (68, 162) => ("Er", 5.2246, 161928787.3,  0,   +1,       1e100, 0,            0,          0.139),
        (68, 164) => ("Er", 5.2389, 163929207.7,  0,   +1,       1e100, 0,            0,          1.601),
        (68, 166) => ("Er", 5.2516, 165930301.1,  0,   +1,       1e100, 0,            0,          33.503),
        (68, 167) => ("Er", 5.256, 166932056.2,   7/2, +1,       1e100, -0.5623,     +3.57,       22.869),
        (68, 168) => ("Er", 5.2644, 167932378.3,  0,   +1,       1e100, 0,            0,          26.978),
        (68, 170) => ("Er", 5.2789, 169935471.9,  0,   +1,       1e100, 0,            0,          14.91),
        (69, 169) => ("Tm", 5.2256, 168934219,    1/2, +1,       1e100, -0.2310,      0,          100.00),
        (69, 171) => ("Tm", 5.2388, 170936435.2,  1/2, +1,        1.92, -0.230,       0,          nothing),
        (70, 168) => ("Yb", 5.2702, 167933891.3,  0,   +1,       1e100, 0,            0,          0.123),
        (70, 170) => ("Yb", 5.2853, 169934767.2,  0,   +1,       1e100, 0,            0,          2.982),
        (70, 171) => ("Yb", 5.2906, 170936331.5,  1/2, -1,       1e100, +0.4923,      0,          14.086),
        (70, 172) => ("Yb", 5.2995, 171936386.7,  0,   +1,       1e100, 0,            0,          21.686),
        (70, 173) => ("Yb", 5.3046, 172938216.2,  5/2, -1,       1e100, -0.6780,     +2.80,       16.103),
        (70, 174) => ("Yb", 5.3108, 173938867.5,  0,   +1,       1e100, 0,            0,          32.025),
        (70, 176) => ("Yb", 5.3215, 175942574.7,  0,   +1,       1e100, 0,            0,          12.995),
        (71, 173) => ("Lu", 5.3577, 172938935.7,  7/2, +1,        1.37, +2.273,      +3.53,       nothing),
        (71, 174) => ("Lu", 5.3634, 173940342.8,  1,   -1,        3.31, +1.982,      +0.773,      nothing),
        (71, 175) => ("Lu", 5.37, 174940777.2,    7/2, +1,       1e100, +2.2257,     +3.49,       97.401),
        (71, 176) => ("Lu", 5.3739, 175942691.7,  7,   -1,     3.76e10, +3.160,      +4.92,       2.599),
        (72, 174) => ("Hf", 5.3201, 173940048.4,  0,   +1,     2.00e15, 0,            0,          0.16),
        (72, 176) => ("Hf", 5.3286, 175941409.8,  0,   +1,       1e100, 0,            0,          5.26),
        (72, 177) => ("Hf", 5.3309, 176943230.2,  7/2, -1,       1e100, +0.7910,     +3.37,       18.6),
        (72, 178) => ("Hf", 5.3371, 177943708.3,  0,   +1,       1e100, 0,            0,          27.28),
        (72, 179) => ("Hf", 5.3408, 178945825.7,  9/2, +1,       1e100, -0.6389,     +3.79,       13.62),
        (72, 180) => ("Hf", 5.347, 179946559.5,   0,   +1,       1e100, 0,            0,          35.08),
        (72, 182) => ("Hf", 5.3516, 181950563.7,  0,   +1,     8.90e06, 0,            0,          nothing),
        (73, 179) => ("Ta", 5.3,    178945939.1,  7/2, +1,        1.82, +2.286,      +3.27,       nothing),
        (73, 181) => ("Ta", 5.3507, 180947998.5,  7/2, +1,       1e100, +2.365,      +3.17,       99.98799),
        (74, 180) => ("W", 5.3491, 179946713.3,   0,   +1,     1.80e18, 0,            0,          0.12),
        (74, 182) => ("W", 5.3559, 181948205.6,   0,   +1,       1e100, 0,            0,          26.5),
        (74, 183) => ("W", 5.3611, 182950224.4,   1/2, -1,     6.70e20, +0.11739,     0,          14.31),
        (74, 184) => ("W", 5.3658, 183950933.2,   0,   +1,       1e100, 0,            0,          30.64),
        (74, 186) => ("W", 5.3743, 185954365.1,   0,   +1,       1e100, 0,            0,          28.43),
        (75, 185) => ("Re", 5.3596, 184952958.3,  5/2, +1,       1e100, +3.176,      +2.07,       37.4),
        (75, 187) => ("Re", 5.3698, 186955752.2,  5/2, +1,     4.33e10, +3.209,      +1.94,       62.6),
        (76, 184) => ("Os", 5.3823, 183952492.9,  0,   +1,     5.60e13, 0,            0,          0.02),
        (76, 186) => ("Os", 5.3909, 185953837.6,  0,   +1,     2.00e15, 0,            0,          1.59),
        (76, 187) => ("Os", 5.3933, 186955749.6,  1/2, -1,       1e100, +0.06442,     0,          1.96),
        (76, 188) => ("Os", 5.3993, 187955837.3,  0,   +1,       1e100, 0,            0,          13.24),
        (76, 189) => ("Os", 5.4016, 188958145.9,  3/2, -1,       1e100, +0.6576,     +0.86,       16.15),
        (76, 190) => ("Os", 5.4062, 189958445.4,  0,   +1,       1e100, 0,            0,          26.26),
        (76, 192) => ("Os", 5.4126, 191961478.8,  0,   +1,       1e100, 0,            0,          40.78),
        (77, 191) => ("Ir", 5.3968, 190960591.5,  3/2, +1,       1e100, +0.1502,     +0.8,        37.3),
        (77, 193) => ("Ir", 5.4032, 192962923.8,  3/2, +1,       1e100, +0.1630,     +0.7,        62.7),
        (78, 190) => ("Pt", 5.4108, 189959949.8,  0,   +1,     4.97e11, 0,            0,          0.012),
        (78, 192) => ("Pt", 5.4169, 191961042.7,  0,   +1,       1e100, 0,            0,          0.782),
        (78, 193) => ("Pt", 5.4191, 192962984.5,  1/2, -1,          50, +0.601,       0,          nothing),
        (78, 194) => ("Pt", 5.4236, 193962683.5,  0,   +1,       1e100, 0,            0,          32.864),
        (78, 195) => ("Pt", 5.427, 194964794.3,   1/2, -1,       1e100, +0.6073,      0,          33.775),
        (78, 196) => ("Pt", 5.4307, 195964954.6,  0,   +1,       1e100, 0,            0,          25.211),
        (78, 198) => ("Pt", 5.4383, 197967896.7,  0,   +1,       1e100, 0,            0,          7.356),
        (79, 197) => ("Au", 5.4371, 196966570.1,  3/2, +1,       1e100, +0.1452,     +0.547,      100.00),
        (80, 196) => ("Hg", 5.4385, 195965833.4,  0,   +1,       1e100, 0,            0,          0.15),
        (80, 198) => ("Hg", 5.4463, 197966769.2,  0,   +1,       1e100, 0,            0,          10.04),
        (80, 199) => ("Hg", 5.4474, 198968281,    1/2, -1,       1e100, +0.5039,      0,          16.94),
        (80, 200) => ("Hg", 5.4551, 199968326.9,  0,   +1,       1e100, 0,            0,          23.14),
        (80, 201) => ("Hg", 5.4581, 200970303.1,  3/2, -1,       1e100, -0.5580,     +0.387,      13.17),
        (80, 202) => ("Hg", 5.4648, 201970643.6,  0,   +1,       1e100, 0,            0,          9.74),
        (80, 204) => ("Hg", 5.4744, 203973494,    0,   +1,       1e100, 0,            0,          6.82),
        (81, 203) => ("Tl", 5.4666, 202972344.1,  1/2, +1,       1e100, +1.616,       0,          29.515),
        (81, 205) => ("Tl", 5.4759, 204974427.3,  1/2, +1,       1e100, +1.632,       0,          70.485),
        (82, 202) => ("Pb", 5.4705, 201972151.6,  0,   +1,     5.25e04, 0,            0,          nothing),
        (82, 204) => ("Pb", 5.4803, 203973043.5,  0,   +1,     1.40e17, 0,            0,          1.4),
        (82, 205) => ("Pb", 5.4828, 204974481.7,  5/2, -1,     1.70e07, +0.7094,     +0.23,       nothing),
        (82, 206) => ("Pb", 5.4902, 205974465.2,  0,   +1,       1e100, 0,            0,          24.1),
        (82, 207) => ("Pb", 5.4943, 206975896.8,  1/2, -1,       1e100, +0.5906,      0,          22.1),
        (82, 208) => ("Pb", 5.5012, 207976652,    0,   +1,       1e100, 0,            0,          52.4),
        (83, 207) => ("Bi", 5.5103, 206978470.6,  9/2, -1,       31.55, 4.0729,      -0.76,       nothing),
        (83, 208) => ("Bi", 5.5147, 207979742.1,  5,   +1,     3.68e05, +4.572,      -0.70,       nothing),
        (83, 209) => ("Bi", 5.5211, 208980398.6,  9/2, -1,     2.01e19, +4.092,      -0.516,      100.00),
        (84, 209) => ("Po", 5.5628, 208982430.4,  1/2, -1,         124, 0.68,         0,          nothing),
        (89, 227) => ("Ac", 5.6,    227027750.6,  3/2, -1,      21.772, +1.1,        +1.74,       nothing),
        (90, 229) => ("Th", 5.7557, 229031761.4,  5/2, +1,        7880, +0.46,       +3.11,       nothing),
        (90, 230) => ("Th", 5.767, 230033132.3,   0,   +1,     7.54e04, 0,            0,          0.02),
        (90, 232) => ("Th", 5.7848, 232038053.6,  0,   +1,     1.40e10, 0,            0,          99.98),
        (91, 231) => ("Pa", 5.8,    231035882.5,  3/2, -1,     3.28e04, 1.99,        -1.72,       100.00),
        (92, 233) => ("U", 5.8203, 233039634.3,   5/2, +1,     1.59e05, -0.59,        3.663,      nothing),
        (92, 234) => ("U", 5.8291, 234040950.3,   0,   +1,     2.46e05, 0,            0,          0.0054),
        (92, 235) => ("U", 5.8337, 235043928.1,   7/2, -1,     7.04e08, -0.38,        4.936,      0.7204),
        (92, 236) => ("U", 5.8431, 236045566.1,   0,   +1,     2.34e07, 0,            0,          nothing),
        (92, 238) => ("U", 5.8571, 238050786.9,   0,   +1,     4.47e09, 0,            0,          99.2742),
        (93, 237) => ("Np", 5.85,  237048171.6,   5/2, +1,     2.14e06, +3.16,       +3.886,      nothing),
        (94, 239) => ("Pu", 5.8601, 239052161.6,  1/2, +1,       24110, +0.202,       0,          nothing),
        (94, 240) => ("Pu", 5.8701, 240053811.7,  0,   +1,        6561, 0,            0,          nothing),
        (94, 241) => ("Pu", 5.8748, 241056849.7,  5/2, +1,      14.329, -0.678,      +6,          nothing),
        (94, 242) => ("Pu", 5.8823, 242058741,    0,   +1,     3.75e05, 0,            0,          nothing),
        (94, 244) => ("Pu", 5.8948, 244064204.4,  0,   +1,     8.13e07, 0,            0,          nothing),
        (95, 241) => ("Am", 5.8928, 241056827.3,  5/2, -1,       432.6, 1.60,        +4.34,       nothing),
        (95, 243) => ("Am", 5.9048, 243061379.9,  5/2, -1,        7364, +1.52,       +4.32,       nothing)

        )

        iso = (symbol, radius, mass, I, π, lifetime, mdm, eqm, ra) = get(isotope, (Z, A), nothing)

    return  isnothing(iso) ? error("Error: isotope Z = $Z, A = $A not included") : iso

end

# ====================== _isotopespecs(Z, A) ===================================

function _isotopespecs(Z::Int, A::Int)              # Isotope properties

    (symbol, radius, mass, I, π, lifetime, mdm, eqm, ra) = nucleardata(Z, A)
    (name, symbol, weight) = mendeleev(Z)

    I = typeof(I) ∈ [Float16, Float32, Float64] ? rationalize(I) : I
    lt = lifetime == 1e100 ? "stable" : "$(lifetime) years"

    strIsotope = sup(A) * symbol

    str = "Isotope created: " * strIsotope * "
    element: $(name)
    atomic number: Z = $Z
    neutron number: n = $(A-Z)
    atomic mass number: A =  $A amu
    rms charge radius: R = $(radius) Fermi
    atomic mass: mass = $(mass/1000000) amu
    nuclear spin: I = $(I) ħ
    parity of nuclear state: π = $π
    lifetime: $(lt)
    nuclear magnetic dipole moment: mdm = $(mdm)
    nuclear electric quadrupole moment: eqm = $(eqm)
    relative abundance: ra = $(ra) % "

    return str

end

# ================= castIsotope(;Z=1, A=1, msg=true) ===========================

"""
    castIsotope(;Z=1, A=1, msg=true)

Create Isotope with fields
* `     .Z`:  atomic number (`::Int`)
* `     .N`:  neutron number (`::Int`)
* `     .A`:  atomic mass number in amu (`::Int`)
* `     .R`:  rms charge radius in Fermi (`::Float64`)
* `     .M`:  atomic mass in amu (`::Float64`)
* `     .I`:  nuclear spin in units of ħ (`::Rational{Int}`)
* `     .π`:  parity of nuclear state (`::Int`)
* `     .ra`:  relative abundance in % (`::Float64`)
* `     .mdm`: nuclear magnetic dipole moment (`::Float64`)
* `     .eqm`: nuclear electric quadrupole moment (`::Float64`)
* `     .lt`:  lifetime in years (`::Float64`)
#### Examples:
```
isotope = castIsotope(Z=1, A=1)
  Isotope created: ¹H
    element: hydrogen
    atomic number: Z = 1
    neutron number: n = 0
    atomic mass number: A =  1 amu
    rms charge radius: R = 0.8783 Fermi
    atomic mass: mass = 1.007825032 amu
    nuclear spin: I = 1//2 ħ
    parity of nuclear state: π = 1
    lifetime: stable
    nuclear magnetic dipole moment: mdm = 2.792847351
    nuclear electric quadrupole moment: eqm = 0
    relative abundance: ra = 99.9855 %

  Isotope(1, 0, 1, 0.8783, 1.007825032, 1//2, 1, 1.0e100, 2.792847351, 0.0, 99.9855)

isotope.ra
 99.9855
```
"""
function castIsotope(;Z=1, A=1, msg=true)

    (symbol, radius, mass, I, π, lifetime, mdm, eqm, ra) = nucleardata(Z, A)

    msg && println(_isotopespecs(Z::Int, A::Int));

    return Isotope(Z, Z-A, A, radius, mass/1000000, I, π, lifetime, mdm, eqm, ra)

end

# ======================= castAtom(;Z=1, A=1, Q=0, msg=true) ===================

"""
    castAtom(;Z=1, A=1, Q=0, msg=true)

Create Atom with fields:
* `     .Z`:  # atomic number (`::Int`)
* `     .A`:  # atomic mass number in amu (`::Int`)
* `     .Q`:  # ionic charge in a.u. (`::Int`)
* `    .Zc`:  # Rydberg charge in a.u. (`::Int`)
*`.element`:  #(`::Element`)
*`.isotope`:  #(`::Isotope`)
#### Examples:
```
castAtom(Z=1, A=1, Q=0);
  Element created: hydrogen
    symbol: H
    atomic number (Z): 1
    atomic weight (relative atomic mass): 1.008 amu
  Isotope created: ¹H
    element: hydrogen
    atomic number: Z = 1
    neutron number: n = 0
    atomic mass number: A =  1 amu
    rms charge radius: R = 0.8783 Fermi
    atomic mass: mass = 1.007825032 amu
    nuclear spin: I = 1//2 ħ
    parity of nuclear state: π = 1
    lifetime: stable
    nuclear magnetic dipole moment: mdm = 2.792847351
    nuclear electric quadrupole moment: eqm = 0
    relative abundance: ra = 99.9855 %
  Atom created: hydrogen - ¹H (Z = 1, Zc = 1, Q = 0)

atom = castAtom(Z=1, A=1, Q=0, msg=false)
  Atom(1, 1, 0, 1, Element("hydrogen", "H", 1.008), Isotope(1, 0, 1, 0.8783,
                      1.007825032, 1//2, 1, 1.0e100, 2.792847351, 0.0, 99.9855)) 

atom.isotope.ra
  99.9855
```
"""
function castAtom(;Z=1, A=1, Q=0, msg=true)

    strQ = abs(Q) > 1 ? sup(abs(Q)) : ""
    strQ = Q > 0 ? (strQ * 'ᐩ') : Q < 0 ? (strQ * 'ᐨ') : ""
    strT = Q ≠ 0 ? " ion" : " atom"

    element = castElement(;Z, msg)
    isotope = castIsotope(;Z, A, msg)

    name = Q ≠ 0 ? (element.name * " ion") : element.name
    symbol = sup(A) * element.symbol * strQ

    Zc = 1 + Q

    msg && println("Atom created: $(name) - $(symbol) (Z = $Z, Zc = $(Zc), Q = $Q)")

    return Atom(Z, A, Q, Zc, element, isotope)

end

# ======================== Orbit(name, n, n′, ℓ, up) ===========

"""
    Orbit(name, n, n′, ℓ)

Type for specification of *atomic orbitals* with fields:
* `.name`: name
* ` .n`:  principal quantum number
* `.n′`:  radial quantum number (number of nodes in radial wavefunction)
* ` .ℓ`:  orbital angular momentum valence electron

The type `Orbit` is best created with the function `castOrbit`.
"""
struct Orbit
    name::String         # LS term notation
    n::Int               # principal quantum number
    n′::Int              # radial quantum number (number of nodes)
    ℓ::Int               # orbital angular momentum valence electron
end


# ======================== castOrbital(n::Int, ℓ::Int) ===========

"""
    castOrbit(;n=1, ℓ=0, msg=true)

Specify `Orbit` with fields:
* `.name`: name
* ` .n`:  principal quantum number
* `.n′`:  radial quantum number (number of nodes in radial wavefunction)
* ` .ℓ`:  orbital angular momentum valence electron
* `.ms`:  spin magnetic quantum number
#### Examples:
```
castOrbit(n=1, ℓ=0)
 Orbit created: 1s (n = 1, n′ = 0, ℓ = 0)
 Orbit("1s", 1, 0, 0)
```
"""
function castOrbit(;n=1, ℓ=0, msg=true)

    strL = ['s','p','d','f','g','h','i','k','l','m','n','o','q','r','t','u']

    name = ℓ > 15 ? "[n=$(n), ℓ=$(ℓ)]" : string(n) * strL[ℓ + 1]

    ℓ < n || return error("Error: ℓ < n rule not satisfied")

    n′ = n - ℓ - 1

    msg && println("Orbit created: $(name) - (n = $n, n′ = $(n′), ℓ = $ℓ)")

    return Orbit(name, n, n′, ℓ)

end

# ======================== SpinOrbit(name, n, n′, ℓ, ms) ===========

"""
    SpinOrbit

Type for specification of *atomic spinorbitals* with fields:
* `.name`: name
* ` .n`:  principal quantum number
* `.n′`:  radial quantum number (number of nodes in radial wavefunction)
* ` .ℓ`:  orbital angular momentum valence electron
* `.ms`:  spin magnetic quantum number

The type `SpinOrbit` is best created with the function `createSpinOrbit`.
"""
struct SpinOrbit
    name::String         # LS term notation
    n::Int               # principal quantum number
    n′::Int              # radial quantum number (number of nodes)
    ℓ::Int               # orbital angular momentum valence electron
    ms::Rational{Int}    # spin magnetic quantum number
end


# ======================== createSpinOrbit(o::Orbital; up=true) ===========

"""
    createSpinOrbital(o::Orbit; up=true, msg=true)

Specify `SpinOrbit` with fields:
* `.name`: name
* `   .n`: principal quantum number
* `  .n′`: radial quantum number (number of nodes in radial wavefunction)
* `   .ℓ`: orbital angular momentum valence electron
* `  .ms`: spin magnetic quantum number
#### Examples:
```
s1s = castOrbit(1,0)
createSpinOrbit(s1s; up=true)
  SpinOrbit created: 1s↑ (n = 1, n′ = 0, ℓ = 0, ms = 1//2)
  SpinOrbit("1s↑", 1, 0, 0, 1//2)
```
"""
function createSpinOrbit(o::Orbit; up=true, msg=true)

    name = o.name * string(up ? :↑ : :↓)

    msg && println("SpinOrbit created: $(name) (n = $(o.n), n′ = $(o.n′), ℓ = $(o.ℓ), ms = $(up ? 1//2 : -1//2))")

    return SpinOrbit(name, o.n, o.n′, o.ℓ, (up ? 1//2 : -1//2))

end


# ======================== Term(name, n, ℓ, S, L, J) ===========

"""
    Term(name::String, n::Int, ℓ::Int, S::Real, L::Int, J::Real)

Type for specification of atomic *fine-structure Terms* with fields:
* `name`: name
* ` .n`:  principal quantum number
* `.n′`:  radial quantum number (number of nodes in wavefunction)
* ` .ℓ`:  orbital angular momentum valence electron
* ` .S`:  total electron spin in units of ħ
* ` .L`:  total orbital angular momentum in units of ħ
* ` .J`:  total electronic angular momentum in units of ħ

The type `Term` is best created with the function `createTerm`.
"""
struct Term
    name::String         # LS term notation
    n::Int               # principal quantum number
    n′::Int              # radial quantum number (number of nodes)
    ℓ::Int               # orbital angular momentum valence electron
    S::Real              # total electron spin as integer or rational number
    L::Int               # total orbital angular momentum
    J::Real              # total electronic angular momentum as integer or rational number
end

# ======================== createTerm(n::Int; ℓ=0, S=1//2, L=0, J=1//2) ===========

"""
    createTerm(n::Int; ℓ=0, S=1//2, L=0, J=1//2, msg=true)

Specify Term in the *Term notatation* with fields:
* `.n`: principal quantum number
* `.n′`: radial quantum number (number of nodes - autogenerated)
* `.ℓ`: orbital angular momentum valence electron
* `.S`: total electron spin
* `.L`: total orbital angular momentum
* `.J`: total electronic angular momentum
#### Examples:
```
term_H1I = createTerm(1; ℓ=0, S=1//2, L=0, J=1//2)
 Term created: 1s ²S₁⸝₂, n = 1, n′ = 0, ℓ = 0, S = 1//2, L = 0, J = 1//2
 Term("1s ²S₁⸝₂", 1, 0, 0, 1//2, 0, 1//2)
```
"""
function createTerm(n::Int; ℓ=0, S=1//2, L=0, J=1//2, msg=true)

    S = typeof(S) ∈ [Float16,Float32,Float64] ? rationalize(S) : S
    J = typeof(J) ∈ [Float16,Float32,Float64] ? rationalize(J) : J

    strL = ['s','p','d','f','g','h','i','k','l','m','n','o','q','r','t','u']

    name = string(n) * strL[ℓ + 1] * ' ' * sup(Int(2S + 1)) * uppercase(strL[L + 1]) * sub(J)

    ℓ < n || return error("Error: ℓ < n rule not satisfied")
    abs(L-S) ≤ J ≤ (L+S)  || return error("Error: Δ(LSJ) condition not satisfied")

    n′ = n - ℓ - 1

    msg && println("Term created: $(name); n = $n,  n′ = $(n′), ℓ = $ℓ, S = $S, L = $L, J = $J")

    return Term(name, n, n′, ℓ, S, L, J)

end

# ======================== bohrformula(atom, term) =============================

@doc raw"""
    bohrformula(Z::Int, n::Int)

Hydrogenic energy (in Hartree a.u.) for *atom* with *atomic number* `Z` and *principal quantum number* `n`.
```math
    E_n = - \frac{Z^2}{2n^2}
```
#### Example:
```
Z = 2
n = 4
bohrformula(Z,n)
 -0.125
```
"""
bohrformula(Z::Int, n::Int) = -(1//2)*(Z//n)^2
