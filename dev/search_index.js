var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CamiXon","category":"page"},{"location":"#CamiXon.jl","page":"Home","title":"CamiXon.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package for image analysis of backscattered light","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Table-of-contents","page":"Home","title":"Table of contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Finite-difference-methods","page":"Home","title":"Finite-difference methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Consider an analytic function f tabulated in standard ordering of growing index at n positions on a grid. The finite difference of two adjacent values on a uniform grid is given by the relation","category":"page"},{"location":"","page":"Home","title":"Home","text":"nabla fn = fn-fn-1","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is called the backward difference notation. In this notation the  k^th-order finite differences (k+1-point finite differences) are defined given by a weighted sum over the function values fn ldots fn-k,","category":"page"},{"location":"","page":"Home","title":"Home","text":"nabla^k fn = fn + c_1^kfn-1 + cdots + c_k^kfn-k = sum_j=0^k c_j^kfn-j = sum_j=0^k c_k-j^kfn-k+j","category":"page"},{"location":"","page":"Home","title":"Home","text":"The k+1 coefficients c_j^k=(-1)^jbinomkj are weight factors (short: weights) defining the summation. Note that c_0^kequiv1 and c_k^k=(-1)^k.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Turning to the standard ordering of terms the summation becomes","category":"page"},{"location":"","page":"Home","title":"Home","text":"nabla^k fn = sum_j=0^k c_k-j^kfn-k+j\n\nFunctions  \n\nf_diff_weight(ki)  rightarrow c_i^k\n\nf_diff_weights(k)  rightarrow  c_k^k c_1^kldots c_0^k\n\nf_diff_weights_array(kmax)  rightarrow   c_0^0 c_1^1c_0^1 ldots c_k^k c_k-1^kldots c_0^k \n\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs fdiffweight(k::Int, i::Int) fdiffweights(k::Int) fdiffweightsarray(kmax::Int) fdiffexpansionweights(coeffs, ∇) fdiffexpansioncoeffsinterpolation(k::Int, x::T) where T<:Real interpolationoffsetpositions(n::Int, k::Int, i::Int) summation_range(n::Int, j::Int, k::Int, i::Int)","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n## FITS\n\nFITS stands for 'Flexible Image Transport System'. This is an open standard origionally developed for the astronomy community to store telescope images together with tables of spectral information. Over the years it has developed into a scientific standard - http://fits.gsfc.nasa.gov/iaufwg.\n\nWithin CamiXion only the basic FITS functionality is implemented for users not requiring celestal coordinates. The user can create, read and extend .fits files as well as create, edit and delete user-defined metainformation.\n\nA FITS file consists of a sequence of one or more header-data-units (HDUs), each containing a data block preceeded by header records of metainformation.\n\nBy the command `f = fits_read(filnam)` we asign a collection of `FITS_HDU` objects from the file `filnam` to the variable `f`.\n\n### FITS - Types\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs FITSHDU FITSheader FITSdata FITStable FITS_name","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n### FITS - HDU Methods\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs fitsinfo(hdu::FITSHDU) parseFITSTABLE(hdu::FITS_HDU)","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n### FITS - File Methods\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs castFITSname(filename::String) fitscombine(filnamFirst::String, filnamLast::String; protect=true) fitscopy(filenameA::String, filenameB::String=\" \"; protect=true) fitscreate(filename::String, data=[]; protect=true) fitsextend(filename::String, dataextend, hdutype=\"IMAGE\") fitsread(filename::String)","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n### FITS - Key Methods\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs fitsaddkey(filename::String, hduindex::Int, key::String, val::Real, com::String) fitsdeletekey(filename::String, hduindex::Int, key::String) fitseditkey(filename::String, hduindex::Int, key::String, val::Real, com::String) fitsrenamekey(filename::String, hduindex::Int, keyold::String, keynew::String)","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n## FORTRAN\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs FORTRANformat castFORTRANformat(str::String) castFORTRAN_datatype(str::String)","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n## Plotting\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs step125(x::Real) select125(x) steps(x::Vector{T} where T<:Real) stepcenters(x::Vector{T} where T<:Real) stepedges(x::Vector{T} where T<:Real) edges(px, Δx=1.0, x0=0.0)","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n## Search algorithms\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs findall(A::Union{String,AbstractArray{T,1}}, a::T...; count=false)  where T findfirst(A::Union{String,AbstractArray{T,1}}, a::T...; dict=false)  where T find_last(A::Union{String,AbstractArray{T,1}}, a::T...; dict=false)  where T","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n## Math\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs canonicalpartitions(n::Int, m=0; header=true, reverse=true) integerpartitions(n::Int, m=0; transpose=false, count=false) log10characteristicpower(x) log10mantissa(x) polynomderiv_coeffs(c,deriv=0) polynom(c::Vector{T}, x::T) where T<:Real","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n## Index\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@index ```","category":"page"}]
}
