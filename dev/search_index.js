var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CamiXon","category":"page"},{"location":"#CamiXon.jl","page":"Home","title":"CamiXon.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package for image analysis of backscattered light","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Table-of-contents","page":"Home","title":"Table of contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Strings","page":"Home","title":"Strings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"sup(i::T) where T<:Real\nsub(i::T) where T<:Real\nfrac(i::Rational{Int})\nmyconvert(T::Type, val::V) where V <: Number","category":"page"},{"location":"#CamiXon.sup-Tuple{T} where T<:Real","page":"Home","title":"CamiXon.sup","text":"sup(i)\n\nSuperscript notation for integers and rational numbers\n\nExamples:\n\nsup(3) * 'P'\n \"³P\"\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.sub-Tuple{T} where T<:Real","page":"Home","title":"CamiXon.sub","text":"sub(i)\n\nSubscript notation for integers and rational numbers\n\nExamples:\n\n'D' * sub(5//2)\n \"D₅⸝₂\"\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.frac-Tuple{Rational{Int64}}","page":"Home","title":"CamiXon.frac","text":"frac(i)\n\nFraction notation for rational numbers\n\nExamples:\n\nfrac(-5//2)\n \"-⁵/₂\"\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.myconvert-Union{Tuple{V}, Tuple{Type, V}} where V<:Number","page":"Home","title":"CamiXon.myconvert","text":"myconvert(T::Type, val::V) where V <: Number\n\nConversion including BigFloat and BigInt\n\nExamples:\n\nconvert(BigInt,1//3)\n InexactError: BigInt(1//3)\n\nmyconvert(BigInt, 1//3)\n 0.3333333333333333333333333333333333333333333333333333333333333333333333333333348\n\n\n\n\n\n","category":"method"},{"location":"#Atomic-properties","page":"Home","title":"Atomic properties","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Atom\ncreateAtom(Z::Int; Q=0, M=1.0, I=1//2, gI=5.5)\nOrbit\ncreateOrbit(n::Int, ℓ::Int)\nSpinOrbit\ncreateSpinOrbit(o::Orbit; up=true)\nTerm\ncreateTerm(n::Int; ℓ=0, S=1//2, L=0, J=1//2)\nbohrformula(Z::Int, n::Int)\nmendeleev(Z::Int)","category":"page"},{"location":"#CamiXon.Atom","page":"Home","title":"CamiXon.Atom","text":"Atom(name::String, symbol::String, Z::Int,Zc::Int,Q::Int,M::Float64,I::Real,gI::Float64)\n\nType with fields:\n\n.name:  name of element\n.symbol:  symbol of element\n.Z:  atomic number\n.Zc:  Rydberg charge in a.u.\n.Q:  ionic charge in a.u.\n.M:  nuclear mass in amu\n.I:  nuclear spin in units of ħ\n.gI:  nuclear g-factor\n\nThe type Atom is best created by the function createAtom.\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.createAtom-Tuple{Int64}","page":"Home","title":"CamiXon.createAtom","text":"createAtom(Z::Int; Q=0, M=1.0, I=1//2, gI=5.5)\n\nCreate Atom with fields\n\n.name:  name of element\n.symbol:  symbol of element\n.Z:  atomic number\n.Zc:  Rydberg charge in a.u. (autogenerated)\n.Q:  ionic charge in a.u.\n.M:  nuclear mass in amu\n.I:  nuclear spin in units of ħ\n.gI:  nuclear g-factor\n\nExamples:\n\ncreateAtom(1; Q=0, M=1.00782503223, I=1//2, gI=5.585694713)\n Atom created: Hydrogen - ¹H (Z = 1, Zc = 1, Q = 0, M = 1.00782503223, I = 1//2, gI = 5.585694713)\n Atom(\"Hydrogen\", \"¹H\", 1, 1, 0, 1.00782503223, 1//2, 5.585694713)\n\ncreateAtom(2; Q=1, M=4.00260325413, I=1//2, gI=0.0)\n Atom created: Helium ion - ⁴Heᐩ (Z = 2, Zc = 2, Q = 1, M = 4.00260325413, I = 1//2, gI = 0.0)\n Atom(\"Helium ion\", \"⁴Heᐩ\", 2, 2, 1, 4.00260325413, 1//2, 0.0)\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.Orbit","page":"Home","title":"CamiXon.Orbit","text":"Orbit\n\nType for specification of atomic orbitals with fields:\n\n.name: name\n.n:  principal quantum number\n.n′:  radial quantum number (number of nodes in radial wavefunction)\n.ℓ:  orbital angular momentum valence electron\n\nThe type Orbit is best created by the function createOrbit.\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.createOrbit-Tuple{Int64, Int64}","page":"Home","title":"CamiXon.createOrbit","text":"createOrbit(n::Int, ℓ::Int)\n\nSpecify Orbit with fields:\n\n.name: name\n.n:  principal quantum number\n.n′:  radial quantum number (number of nodes in radial wavefunction)\n.ℓ:  orbital angular momentum valence electron\n.ms:  spin magnetic quantum number\n\nExamples:\n\ncreateOrbit(1,0)\n Orbit created: 1s (n = 1, n′ = 0, ℓ = 0)\n Orbit(\"1s\", 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.SpinOrbit","page":"Home","title":"CamiXon.SpinOrbit","text":"SpinOrbit\n\nType for specification of atomic spinorbitals with fields:\n\n.name: name\n.n:  principal quantum number\n.n′:  radial quantum number (number of nodes in radial wavefunction)\n.ℓ:  orbital angular momentum valence electron\n.ms:  spin magnetic quantum number\n\nThe type SpinOrbit is best created by the function createSpinOrbit.\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.createSpinOrbit-Tuple{Orbit}","page":"Home","title":"CamiXon.createSpinOrbit","text":"createSpinOrbital(o::Orbit [; up=true])\n\nSpecify SpinOrbit with fields:\n\n.name: name\n.n: principal quantum number\n.n′: radial quantum number (number of nodes in radial wavefunction)\n.ℓ: orbital angular momentum valence electron\n.ms: spin magnetic quantum number\n\nExamples:\n\ns1s = createOrbit(1,0)\ncreateSpinOrbit(s1s; up=true)\n  SpinOrbit created: 1s↑ (n = 1, n′ = 0, ℓ = 0, ms = 1//2)\n  SpinOrbit(\"1s↑\", 1, 0, 0, 1//2)\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.Term","page":"Home","title":"CamiXon.Term","text":"Term(name::String, n::Int, ℓ::Int, S::Real, L::Int, J::Real)\n\nType for specification of atomic fine-structure Terms with fields:\n\nname: name\n.n:  principal quantum number\n.n′:  radial quantum number (number of nodes in wavefunction)\n.ℓ:  orbital angular momentum valence electron\n.S:  total electron spin in units of ħ\n.L:  total orbital angular momentum in units of ħ\n.J:  total electronic angular momentum in units of ħ\n\nThe type Term is best created by the function createTerm.\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.createTerm-Tuple{Int64}","page":"Home","title":"CamiXon.createTerm","text":"createTerm(n::Int; ℓ=0, S=1//2, L=0, J=1//2)\n\nSpecify Term in the Term notatation with fields:\n\n.n: principal quantum number\n.n′: radial quantum number (number of nodes - autogenerated)\n.ℓ: orbital angular momentum valence electron\n.S: total electron spin\n.L: total orbital angular momentum\n.J: total electronic angular momentum\n\nExamples:\n\nterm_H1I = createTerm(1; ℓ=0, S=1//2, L=0, J=1//2)\n Term created: 1s ²S₁⸝₂, n = 1, n′ = 0, ℓ = 0, S = 1//2, L = 0, J = 1//2\n Term(\"1s ²S₁⸝₂\", 1, 0, 0, 1//2, 0, 1//2)\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.bohrformula-Tuple{Int64, Int64}","page":"Home","title":"CamiXon.bohrformula","text":"bohrformula(Z::Int, n::Int)\n\nHydrogenic energy (in Hartree a.u.) for atom with atomic number Z and principal quantum number n.\n\n    E_n = - fracZ^22n^2\n\nExample:\n\nZ = 2\nn = 4\nbohrformula(Z,n)\n -0.125\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.mendeleev-Tuple{Int64}","page":"Home","title":"CamiXon.mendeleev","text":"mendeleev(Z::Int)\n\nThe properties name and symbol of the element with atomic number Z.\n\nExample:\n\nmendeleev(11)\n (\"Sodium\", \"Na\")\n\n\n\n\n\n","category":"method"},{"location":"#Finite-difference-methods","page":"Home","title":"Finite-difference methods","text":"","category":"section"},{"location":"#Finite-differences","page":"Home","title":"Finite differences","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Consider the analytic function f tabulated in forward order  (growing index) at n positions on a grid. The finite difference of two adjacent values on a uniform grid is defined by the relation","category":"page"},{"location":"","page":"Home","title":"Home","text":"nabla fn = fn-fn-1","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is called the finite difference in backward difference notation. In this notation the  k^th-order backward difference (which involves k+1 points) is defined by a weighted sum over the function values in backward order, fn ldots fn-k,","category":"page"},{"location":"","page":"Home","title":"Home","text":"nabla^k fn = fn + c_1^kfn-1 + cdots + c_k^kfn-k = sum_j=0^k c_j^kfn-j","category":"page"},{"location":"","page":"Home","title":"Home","text":"The k+1 coefficients c_j^k=(-1)^jbinomkj are weight factors (short: weights) defining the summation. Note that c_0^kequiv1 and c_k^k=(-1)^k. As the function f is tabulated in forward order it is good practice to change dummy index to also write the summation in forward order (coefficients in backward order),","category":"page"},{"location":"","page":"Home","title":"Home","text":"nabla^k fn = sum_j=0^k c^kjfn-k+j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where c^kj equiv c_k-j^k.    ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Functions:  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_diff_weight(k,j) rightarrow c_j^k","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_diff_weights(k) rightarrow  c^k  c_k^k c_1^kldots c_0^k","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_diff_weights_array(kmax) rightarrow   c^0 c^1 ldots c^kmax ","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_diff_weight(k::Int, i::Int)\nf_diff_weights(k::Int)\nf_diff_weights_array(kmax::Int)","category":"page"},{"location":"#CamiXon.f_diff_weight-Tuple{Int64, Int64}","page":"Home","title":"CamiXon.f_diff_weight","text":"f_diff_weight(k, j)\n\nWeight coefficient\n\nc_j^k=(-1)^jbinomkj\n\nof the k^th-order finite difference operator nabla^k and corresponding to the function value fn-j.\n\nExample:\n\nk = 5; j = 3\nf_diff_weight(k, j)\n -10\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.f_diff_weights-Tuple{Int64}","page":"Home","title":"CamiXon.f_diff_weights","text":"f_diff_weights(k)\n\nWeight vector c_k^k ldots c_0^k defining the k^th-order finite difference operator,\n\nnabla^kfn\t=c_k^kthinspace c_k-1^kthinspaceldotsc_0^kleftbeginarrayc\nfn-k\nvdots\nfn\nendarrayright=sum_j=0^kc^kjfn-k+j\n\nwhere c^kj  c_k-j^k. This form is designed for use with analytic functions, f, tabulated in forward order, fn-k fn.\n\nExample:\n\nk = 3\nf_diff_weights(k)\n4-element Vector{Int64}:\n  1\n -3\n  3\n -1\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.f_diff_weights_array-Tuple{Int64}","page":"Home","title":"CamiXon.f_diff_weights_array","text":"f_diff_weights_array(kmax)\n\nCollection of weight vectors, c^0 ldots c^k, defining the finite difference operators nabla^0 ldots nabla^k under the convention c^k  c_k^k c_1^kldots c_0^k).\n\nExample:\n\nkmax = 3\n∇ = f_diff_weights_array(kmax)\n4-element Vector{Vector{Int64}}:\n [1]\n [-1, 1]\n [1, -2, 1]\n [-1, 3, -3, 1]\n\n\n\n\n\n","category":"method"},{"location":"#Finite-difference-expansion","page":"Home","title":"Finite difference expansion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Finite-difference calculus builds on the finite-difference expansion, in practice truncated at order k,","category":"page"},{"location":"","page":"Home","title":"Home","text":"sum_p=0^inftya_pnabla^pfn=sum_p=0^ka_pnabla^pfn+cdots","category":"page"},{"location":"","page":"Home","title":"Home","text":"By choosing the order sufficiently high the expansion can be approximated to any desired level of accuracy. A finite-difference expansion of order k is defined by k+1 finite-difference expansion coefficients, above denoted by a_0 ldots a_k. Note that both the coefficients and the operators appear in forward order. It takes some bookkeeping to rewrite the expansion in the form of a weighted sum over the k+1 function values fnldotsfn-k (note the backward order). Substituting the finite-difference expression for nabla^k, we obtain","category":"page"},{"location":"","page":"Home","title":"Home","text":"sum_p=0^ka_pnabla^pfn=sum_p=0^ka_psum_j=0^pc_j^ifn-j=sum_j=0^ksum_p=j^ka_pc_j^pfn-j=sum_j=0^kb_j^kfn-j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the weighted summation is defined by the weights b_j^k=sum_p=j^ka_pc_j^p, with j=0 ldots k. By a change of dummy index we write the summation in forward order","category":"page"},{"location":"","page":"Home","title":"Home","text":"sum_p=0^ka_pnabla^pfn=sum_j=0^kb^kjfn-k+j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where b^kj equiv b_k-j^k.   Note that the weights vector b^k contains the weights in backward order. It is generated by the function f_diff_expansion_weights(coeffs,∇), where ∇ =f_diff_weights_array(kmax).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"coeffs = a_0 ldots a_k","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_diff_expansion_weights(coeffs,∇) rightarrow b^k equiv b_k^k ldots b_0^k","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_diff_expansion_weights(coeffs, ∇)","category":"page"},{"location":"#CamiXon.f_diff_expansion_weights-Tuple{Any, Any}","page":"Home","title":"CamiXon.f_diff_expansion_weights","text":"f_diff_expansion_weights(a, ∇)\n\nWeight vector b^k  b_k^k ldots b_0^k corresponding to the expansion coefficients a_0^k ldots a_k^k of the k^th-order finite-difference expansion,\n\nsum_p=0^ka_pnabla^pfn=sum_j=0^kb^kjfn-k+j\n\nwhere b^kj equiv b_k-j^k and fn-k fn are elements of the analytic function f tabulated in forward order. Note the difference in ordering between the finite-difference expansion coefficients, a_0 ldots a_k, and the finite-difference expansion weights, b_k^k ldots b_0^k. Note further the difference in k dependence: the weights, b_j^k, are k-dependent, whereas the coefficients, a_j, are not.\n\nExample:\n\nk=5\n∇ = f_diff_weights_array(k)\na = UnitRange(0,k)\nb = f_diff_expansion_weights(a, ∇)\n6-element Vector{Int64}:\n  -5\n  29\n -69\n  85\n -55\n  15\n\n\n\n\n\n","category":"method"},{"location":"#Lagrangian-interpolation","page":"Home","title":"Lagrangian interpolation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Using the definition of the finite difference we can express the relation between fn and fn+1 in operator form,","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn=(1-nabla)fn+1","category":"page"},{"location":"","page":"Home","title":"Home","text":"By formal inversion of the operator we have","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+1 = (1 - nabla)^-1 fn equiv sum_p=0^infty^p fn","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+2 = (1 - nabla)^-2 fn equiv sum_p=0^inftyp^p fn","category":"page"},{"location":"","page":"Home","title":"Home","text":"vdots","category":"page"},{"location":"","page":"Home","title":"Home","text":"which can be generalized to the form of lagrangian interpolation,","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+x = (1 - nabla)^-x fn equiv sum_p=0^inftyl_p(x)^p fn","category":"page"},{"location":"","page":"Home","title":"Home","text":"where l_0equiv 1 and l_p(x) = x(x+1)(x+2)cdots(x+p-1)p for p0 are the finite-difference expansion coefficients for lagrangian interpolation. These are generated by the function f_diff_expansion_coeffs_lagrange(k,x). Evaluating the finite-difference expansion up to order k we obtain","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+x =sum_p=0^kl_p(x)nabla^pfn= sum_j=0^kr_j^k(x)fn-j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the k+1 weights r_j^k(x)= sum_p=j^k l_p(x) c_j^p are the  lagrangian interpolation weights.  After changing dummy index to bring the summation in forward order the expansion becomes","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+x =sum_p=0^kl_p(x)nabla^pfn= sum_j=0^kr_x^kjfn-k+j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where r^k_xj  r_k-j^k(x). The weights vector r^k_x is generated by the function f_diff_expansion_weights(coeffs,∇), with ∇ = f_diff_weights_array(k).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"coeffs = f_diff_expansion_coeffs_lagrange(k,x) rightarrow l_0(x) ldots l_k(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"lagrangian interpolation weights = f_diff_expansion_weights(coeffs,∇) rightarrow r^k_x  r_k^k(x) ldots r_0^k(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"\nf_diff_expansion_coeffs_lagrange(k::Int, x::T) where T<:Real\nsummation_range(n::Int, i::Int, k::Int, μ::Int)\nf_diff_function_sequences(f, k::Int, μ=0)\nlagrange_interpolation(f::Vector{Float64}, domain::ClosedInterval{Float64}; k=1, i=0)\nlagrange_extrapolation(f::Vector{Float64}, domain::ClosedInterval{Float64}; k=1, e=2, μ=0)\n","category":"page"},{"location":"#CamiXon.f_diff_expansion_coeffs_lagrange-Union{Tuple{T}, Tuple{Int64, T}} where T<:Real","page":"Home","title":"CamiXon.f_diff_expansion_coeffs_lagrange","text":"f_diff_expansion_coeffs_lagrange(k::Int, x::T) where T<:Real\n\nFinite-difference expansion coefficient vector l_0(x) ldots l_p(x) defining k^th-order lagrangian interpolation of the tabulated analytic function f(n+x) at offset position x with respect to position n,\n\nfn+x = (1 - nabla)^-x fn equiv sum_p=0^inftyl_p(x)^p fn\n\nwhere l_0equiv 1 and l_p(x) = x(x+1)(x+2)cdots(x+p-1)p. Interpolation corresponds to the interval -kle xle 0; extrapolation to xge 0.\n\nExamples:\n\nk = 5; x = 1\nl = f_diff_expansion_coeffs_lagrange(k,x); println(l)\n [1, 1, 1, 1, 1, 1]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.summation_range-NTuple{4, Int64}","page":"Home","title":"CamiXon.summation_range","text":"summation_range(n, i, k, m)\n\nSummation range for interpolation position 0le im le 1 used in k^th-order lagrangian interpolation of the anaytic function f tabulated in forward order on a uniform grid of n points, f1 ldots fn; m is the multiplier defining the interpolation grid size.\n\nExamples:\n\nn = 7; k = 2; m = 1\no = [summation_range(n,i,k,m) for i=0:(n-1)*m]; println(o)\n UnitRange{Int64}[1:3, 2:4, 3:5, 4:6, 5:7, 5:7, 5:7]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.f_diff_function_sequences","page":"Home","title":"CamiXon.f_diff_function_sequences","text":"f_diff_function_sequences(f, k::Int, m=1)\n\nFinite-difference summation sequences of function values given in forward order for use in k^th-order lagrangian interpolation of the anaytic function f tabulated in forward order on a regular grid of n points, f1 fn; m is the multiplier defining the interpolation grid size. Each sequence consists of km+1 function values.\n\nExample:\n\nf = [0,1,2,3,4,5,6]\nk = 2\no = f_diff_function_sequences(f, k); println(o)\n [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [4, 5, 6], [4, 5, 6]]\n\n\n\n\n\n","category":"function"},{"location":"#CamiXon.lagrange_interpolation-Tuple{Vector{Float64}, IntervalSets.ClosedInterval{Float64}}","page":"Home","title":"CamiXon.lagrange_interpolation","text":"lagrangian_interpolation(f::Vector{Float64}, domain::ClosedInterval{Float64}; k=1, m=1)\n\nk^th-order lagrangian interpolation of the analytic function f tabulated in forward order on a regular grid of n points, f1 ldots fn; m is the multiplier defining the interpolation grid size.\n\nExample:\n\nf = [0.0,1,2,3,4,5,6,7]\ndomain = 0.0..1.0\n(X,Y) = lagrangian_interpolation(f, domain; k=2, m=2); println((X,Y))\n (0.0:0.07142857142857142:1.0, [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0])\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.lagrange_extrapolation-Tuple{Vector{Float64}, IntervalSets.ClosedInterval{Float64}}","page":"Home","title":"CamiXon.lagrange_extrapolation","text":"lagrangian_extrapolation(f::Vector{Float64}, domain::ClosedInterval{Float64}; k=1, e=1, m=1)\n\nk^th-order lagrangian extrapolation up to position n+e of the analytic function f tabulated in forward order at n points, f1 ldots fn; m is the multiplier defining the interpolation grid size.\n\nExample:\n\nf = [0.0,1,2,3,4,5,6,7]\ndomain = 0.0..1.0\n(X,Y) = lagrangian_extrapolation(f, domain; k=2, e=1, m=2); println((X,Y))\n (0.0:0.07142857142857142:1.0, [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0])\n\n\n\n\n\n","category":"method"},{"location":"#Lagrangian-differentiation","page":"Home","title":"Lagrangian differentiation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To derive the lagrangian differentiation formulas we formally differentiate","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+x = (1 - nabla)^-x fn","category":"page"},{"location":"","page":"Home","title":"Home","text":"with respect to x.","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracdfdxn+x=-ln(1-nabla) (1-nabla)^-xfn=sum_q=1^ktfrac1q^qsum_p=0^kl_p(x)^pfn+cdots","category":"page"},{"location":"","page":"Home","title":"Home","text":"Rewriting the r.h.s. as a single summation in powers of nabla for given values of n and x we obtain an expression of the form","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracdfdxn+x=sum_p=1^kl_p^prime(x)nabla^pfn+cdots","category":"page"},{"location":"","page":"Home","title":"Home","text":"where l_p^prime(x) represents the finite-difference expansion coefficients for lagrangian differentiation at position n+x. These coefficients are determined numerically by polynomial multiplication after adding the p=0 term, l_0^prime(x)equiv 0, to the first sum. The corresponding coefficient vector is generated in forward order by the function f_diff_expansion_coeffs_differentiation(k,x). Evaluating the finite-difference expansion up to order k we obtain","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracdfdxn+x=sum_p=0^kl_p^prime(x)nabla^pfn=sum_j=0^ks_j^k(x)fn-j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the s_j^k(x)=sum_p=j^kl_p^prime(x)c_j^p are the k^th-order lagrangian differentiation weights.  After changing dummy index to reverse the summation from backward to forward order the expansion becomes","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracdfdxn+x= sum_j=0^ks^k_xjfn-k+j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where s^k_xj  s^k_k-j(x). The weights vector s^k_x is generated by the function f_diff_expansion_weights(coeffs,∇), with ∇ = f_diff_weights_array(k).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"coeffs = f_diff_expansion_coeffs_differentiation(k,x) rightarrow l_0^prime(x) ldots l_k^prime(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Lagrange differentiation weights = f_diff_expansion_weights(coeffs,∇) s^k_xj  rightarrow s_k^k(x) ldots s_0^k(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Lagrange differentiation weights = create_lagrange_differentiation_weights(k,x) s^k_xj  rightarrow s_k^k(x) ldots s_0^k(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_diff_expansion_coeffs_differentiation(k::Int, x::T) where T<:Real\ncreate_lagrange_differentiation_weights(k::Int, x::T) where T<:Real\ncreate_lagrange_differentiation_matrix(k::Int)\nlagrange_differentiation(f::Vector{Float64}, domain::ClosedInterval{Float64}; k=3, i=0)","category":"page"},{"location":"#CamiXon.f_diff_expansion_coeffs_differentiation-Union{Tuple{T}, Tuple{Int64, T}} where T<:Real","page":"Home","title":"CamiXon.f_diff_expansion_coeffs_differentiation","text":"f_diff_expansion_coeffs_differentiation(k::Int, x::T) where T<:Real\n\nFinite-difference expansion coefficient vector l_0^prime(x) ldots l_p^prime(x) defining k^th-order lagrangian differentiation of the tabulated analytic function f(n+x) at position x,\n\nfracdfdxn+x=sum_p=0^kl_p^prime(x)nabla^pfn\n\nExample:\n\nk = 2; x = 0\no = f_diff_expansion_coeffs_differentiation(k,x); println(o)\n [0.0, 1.0, -1.5]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.create_lagrange_differentiation_weights-Union{Tuple{T}, Tuple{Int64, T}} where T<:Real","page":"Home","title":"CamiXon.create_lagrange_differentiation_weights","text":"create_lagrange_differentiation_weights(k::Int, x::T) where T<:Real\n\nk^th-order Lagrange differentiation weights vector, s^k(x)  s_k^k(x) ldots s_0^k(x), where x is the position relative point n.\n\nfracdfdxn+x= sum_j=0^ks_k-j^k(x)fn-k+j\n\nwhere s^k_xj  s_k-j(x)^k.\n\nExample:\n\nk = 3\nx = 0\nldw = create_lagrange_differentiation_weights(k,x); println(ldw)\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.create_lagrange_differentiation_matrix-Tuple{Int64}","page":"Home","title":"CamiXon.create_lagrange_differentiation_matrix","text":"create_lagrange_differentiation_matrix(k::Int)\n\nLagrange differentiation matrix, mij=s_k-j^k(i), for k^th-order lagrangian differentiation,\n\nfracdydxi= sum_j=0^kmijyj\n\nExample:\n\nk = 3\ncreate_lagrange_differentiation_matrix(k)\n 4×4 Matrix{Rational{Int64}}:\n  -11//6   3//1  -3//2   1//3\n   -1//3  -1//2   1//1  -1//6\n    1//6  -1//1   1//2   1//3\n   -1//3   3//2  -3//1  11//6\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.lagrange_differentiation-Tuple{Vector{Float64}, IntervalSets.ClosedInterval{Float64}}","page":"Home","title":"CamiXon.lagrange_differentiation","text":"lagrange_differentiation(f::Vector{Float64}, domain::ClosedInterval{Float64}; k=1, m=1)\n\nk^th-order lagrangian differentiation of the analytic function f, tabulated in forward order on a regular grid of n points, f1 ldots fn; m is the multiplier for intermediate positions\n\nExample:\n\nf = [0.0,1,2,3,4,5]\ndomain = 0.0..5.0\nX,Y = lagrangian_differentiation(f, domain; k=2, i = 0); println(X,Y)\n (0.0:1.0:5.0, [1.0, 1.0, 1.0, 1.0, 1.0, 1.0])\n\n\n\n\n\n","category":"method"},{"location":"#Integration","page":"Home","title":"Integration","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"trapezoidal_weights(k::Int; rationalize=false, devisor=false)\ntrapezoidal_integration(f, domain, weights)","category":"page"},{"location":"#CamiXon.trapezoidal_weights-Tuple{Int64}","page":"Home","title":"CamiXon.trapezoidal_weights","text":"trapezoidal_weights(k::Int [; rationalize=false [, devisor=false]])\n\nWeight coefficient vector a=a_1cdots a_k of trapeziodal rule optimized for functions of polynomial form,\n\n    _0^n f(x) dx = a_1 (f_0+f_n)+cdots+a_k (f_k-1+f_n-k+1) + (f_k+cdots+f_n-k)\n\nwhere k is odd. The rule is exact for polynonials of degree d=0 1cdots k-1. For k=1 the rule reduces to the ordinary trapezoidal rule. By default the output is in Float64, optionally the output is rational, with or without specification of the gcd devisor.\n\nExample::\n\n[trapezoidal_weights(k; rationalize=true, devisor=true) for k=1:2:9]\n5-element Vector{Tuple{Int64, Int64, Vector{Int64}}}:\n (1, 2, [1])\n (3, 24, [9, 28, 23])\n (5, 1440, [475, 1902, 1104, 1586, 1413])\n (7, 120960, [36799, 176648, 54851, 177984, 89437, 130936, 119585])\n (9, 7257600, [2082753, 11532470, 261166, 16263486, -1020160, 12489922, 5095890, 7783754, 7200319])\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.trapezoidal_integration-Tuple{Any, Any, Any}","page":"Home","title":"CamiXon.trapezoidal_integration","text":"trapezoidal_integration(f, domain, weights)\n\nIntegral of the tabulated function f=f_0cdots f_n over the domain ab using the optimized trapezoidal rule with endpoint correction by the weightsvector weights,\n\n    _0^n f(x) dx = a_1 (f_0+f_n)+cdots+a_k (f_k-1+f_n-k+1) + (f_k+cdots+f_n-k)\n\nThe rule is exact for polynonials of degree d=0 1cdots k-1. For k=1 the rule reduces to the ordinary trapezoidal rule (weights = [1/2]).\n\nExamples::\n\np = 3\nc = [1 for i=0:p]\npol = ImmutablePolynomial(c,:z)\nIpol = integrate(pol)\nn = 10\n\ndomain = 0.0..5.0\nx = collect(range(domain, n))\nf = pol.(x .-2.5)\n\nw3 = trapezoidal_weights(3)\ntrapezoidal_integration(f, domain, w3)\n 15.416666666666673\n\nIpol(2.5)-Ipol(-2.5)\n 15.41666666666666\n\n\n\n\n\n","category":"method"},{"location":"#Adams-Method","page":"Home","title":"Adams Method","text":"","category":"section"},{"location":"#Adams-Bashford-expansion","page":"Home","title":"Adams-Bashford expansion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Adams-Bashford integration step is given by the expansion","category":"page"},{"location":"","page":"Home","title":"Home","text":"yn+1-yn = -frach nabla(1-nabla)ln(1-nabla)fn+1=h (sum_p=0^inftyB_pnabla^p)fn+1","category":"page"},{"location":"","page":"Home","title":"Home","text":"A closed expression for the Adams-Bashford expansion coefficients, B_k, is not available. As we already have a finite-difference expansion for the operator (1-)^-1,","category":"page"},{"location":"","page":"Home","title":"Home","text":"frac11-equivsum_p=0^inftynabla^p","category":"page"},{"location":"","page":"Home","title":"Home","text":"we ask for the expansion of","category":"page"},{"location":"","page":"Home","title":"Home","text":"-fracln(1-)=(1-frac12-frac124^2-frac112^3+cdots)fn+1= (sum_p=0^inftyb_pnabla^p)fn+1","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is known as the Adams-Moulton expansion. Its coefficients are calculated numerically by the function f_diff_expansion_adams_moulton_coeffs(k). The Adams-Bashford expansion is obtained as the polynomial product of the two expansions,","category":"page"},{"location":"","page":"Home","title":"Home","text":"(sum_p=0^inftyB_p^p)fn+1=(sum_p=0^infty^p)(sum_p=0^inftyb_p^p)fn+1= ( 1 + frac12nabla + frac512nabla^2 + cdots)fn+1","category":"page"},{"location":"","page":"Home","title":"Home","text":"The coefficients B_p are calculated numerically with the function f_diff_expansion_adams_bashford_coeffs(k). Evaluating the finite-difference expansion up to order k we obtain (after changing dummy index bring the summation in forward order)","category":"page"},{"location":"","page":"Home","title":"Home","text":"sum_p=0^kB_pnabla^pfn=sum_p=0^kB_psum_j=0^p c_j^ifn-j= sum_j=0^kA_j^k(x)fn-j= sum_j=0^kA_k-j^k(x)fn-k+j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the A_j^k(x)= sum_p=j^k B_pc_j^p are the (k+1)-point Adams-Bashford integration weights.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"coeffs = f_diff_expansion_coeffs_adams_bashford(k) rightarrow B_k^k(x) ldots B_0^k(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"adams_bashford_integration_weights = f_diff_expansion_weights(coeffs,∇) rightarrow A_k^k(x) ldots A_0^k(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_diff_expansion_coeffs_adams_bashford(k::Int)","category":"page"},{"location":"#CamiXon.f_diff_expansion_coeffs_adams_bashford-Tuple{Int64}","page":"Home","title":"CamiXon.f_diff_expansion_coeffs_adams_bashford","text":"f_diff_expansion_coeffs_adams_bashford(k [; T=Int])\n\n(k+1)-point Adams-Bashford expansion coefficients B_p.\n\n-fracnabla(1-nabla)ln(1-nabla)=sum_p=0^inftyB_pnabla^p=1+ frac12+ frac512^2+ cdots\n\nThe weights are stored in forward order: B_0^k cdots B_k^k - order of use in summation.\n\nExamples:\n\nk = 5\no = f_diff_expansion_coeffs_adams_bashford(k); println(o)\n Rational{Int64}[1//1, 1//2, 5//12, 3//8, 251//720, 95//288]\n\n\n\n\n\n","category":"method"},{"location":"#Adams-Moulton-expansion","page":"Home","title":"Adams-Moulton expansion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Adams-Moulton integration step is given by the expansion","category":"page"},{"location":"","page":"Home","title":"Home","text":"yn+1-yn = -fracnablaln(1-nabla)fn+1 = ( 1 - frac12nabla - frac112nabla^2 - frac124nabla^3 +cdots)fn+1","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the evaluation of the integration step we limit the summation to k+1 terms (order k),","category":"page"},{"location":"","page":"Home","title":"Home","text":"yn+1-yn= (sum_p=0^kb_pnabla^p)fn+1+cdots","category":"page"},{"location":"","page":"Home","title":"Home","text":"where b_0ldotsb_k are the Adams-Moulton expansion coefficients, rational numbers generated numerically by the function f_diff_expansion_coeffs_adams_moulton(k). Extracting the greatest common denominator, 1D, the step becomes","category":"page"},{"location":"","page":"Home","title":"Home","text":"yn+1-yn= frac1D(sum_p=0^kb_p^primenabla^p)fn+1+cdots","category":"page"},{"location":"","page":"Home","title":"Home","text":"where b_0^primeldotsb_k^prime are integers and b_p=b_p^primeD. In practice the expansion is restricted to k18 (as limited by integer overflow). Note that this limit is much higher than values used in calculations (typically up to k = 10). Evaluating the finite-difference expansion up to order k we obtain (after changing dummy index bring the summation in forward order)","category":"page"},{"location":"","page":"Home","title":"Home","text":"sum_p=0^kb_pnabla^pfn=sum_p=0^kb_psum_j=0^p c_j^ifn-j= sum_j=0^ka_j^k(x)fn-j= sum_j=0^ka_k-j^k(x)fn-k+j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the a_j^k(x)= sum_p=j^k b_pc_j^p are the (k+1)-point Adams-Moulton integration weights. These are generated in backward order by the function f_diff_expansion_weights(coeffs,∇), with ∇ =f_diff_weights_array(k).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"coeffs = f_diff_expansion_coeffs_adams_moulton(k) rightarrow b_0ldotsb_k","category":"page"},{"location":"","page":"Home","title":"Home","text":"adams_moulton_weights = f_diff_expansion_weights(coeffs,∇)rightarrow a_k^k ldots a_0^k","category":"page"},{"location":"","page":"Home","title":"Home","text":"adams_moulton_weights = create_adams_moulton_weights(k)rightarrow a_k^k ldots a_0^k","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_diff_expansion_coeffs_adams_moulton(k::Int)\ncreate_adams_moulton_weights(k::Int; rationalize=false, devisor=false, T=Int)","category":"page"},{"location":"#CamiXon.f_diff_expansion_coeffs_adams_moulton-Tuple{Int64}","page":"Home","title":"CamiXon.f_diff_expansion_coeffs_adams_moulton","text":"f_diff_expansion_coeffs_adams_moulton(k [; T=Int])\n\nk^th-order Adams-Moulton expansion coefficients,\n\n-fracnablaln(1-nabla) = sum_p=0^inftyb_pnabla^p= 1 - frac12nabla - frac112nabla^2 - frac124nabla^3 +cdots\n\nThe weights are stored in forward order: b_0^k cdots b_k^k - order of use in summation.\n\nExamples:\n\nk = 5\nb = f_diff_expansion_coeffs_adams_moulton(k::Int); println(b)\n Rational[1//1, -1//2, -1//12, -1//24, -19//720, -3//160]\n\nD = denominator(gcd(b)); println(D)\n 1440\n\no = convert(Vector{Int},(b .* D)); println(o)\n [1440, -720, -120, -60, -38, -27]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.create_adams_moulton_weights-Tuple{Int64}","page":"Home","title":"CamiXon.create_adams_moulton_weights","text":"create_adams_moulton_weights(k::Int [; rationalize=false [, devisor=false [, T=Int]]])\n\nk^th-order Adams-Moulton weights vector,\n\nyn+1 = yn + frac1Dsum_j=0^ka^kjfn+1-k+j\n\nThe weights are stored in the vector a^k equiva_k^kD cdots a_0^kD under the convention a^kj equiv a_k-j^kD, where a_j^k are the Adams-Moulton weight coefficients and D the corresponding Adams-Moulton divisor. By default the output is in Float64, optionally the output is rational, with or without specification of the gcd devisor.\n\nExample:\n\n[create_adams_moulton_weights(k; rationalize=true, devisor=true, T=Int) for k=1:8]\n8-element Vector{Tuple{Int64, Int64, Vector{Int64}}}:\n (1, 2, [1, 1])\n (2, 12, [-1, 8, 5])\n (3, 24, [1, -5, 19, 9])\n (4, 720, [-19, 106, -264, 646, 251])\n (5, 1440, [27, -173, 482, -798, 1427, 475])\n (6, 60480, [-863, 6312, -20211, 37504, -46461, 65112, 19087])\n (7, 120960, [1375, -11351, 41499, -88547, 123133, -121797, 139849, 36799])\n (8, 3628800, [-33953, 312874, -1291214, 3146338, -5033120, 5595358, -4604594, 4467094, 1070017])\n\n\n\n\n\n","category":"method"},{"location":"#Grid","page":"Home","title":"Grid","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Grid{T}\ngridfunction(ID::Int, n::Int, h::T; p=5, coords=[0,1], deriv=0) where T <: Real\ncreateGrid(ID::Int, N::Int, T::Type; h=1, r0=0.001,  p=5, coords=[0,1], epn=7, k=7)","category":"page"},{"location":"#CamiXon.Grid","page":"Home","title":"CamiXon.Grid","text":"Grid(ID, name, T, N, r, r′, h, r0, epn, epw, k)\n\nType with fields:\n\n.ID::Int                 grid identifer name\n.name::String              grid identifer name\n.T::Type                gridType\n.N::Int                 number of grid points\n.r::Vector{T}           tabulated grid function\n.r′::Vector{T}           tabulated derivative of grid function\n.h ::T                   grid step multiplyer\n.r0::T                   grid scale factor\n.epn::Int                 number of endpoints used for trapezoidal endpoint correction (must be odd)\n.epw::Vector{Vector{T}}   trapezoidal endpoint weights for n=1:epn\n.k::Int                 Adams-Moulton order\n\nThe type Grid is best created by the function createGrid.\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.gridfunction-Union{Tuple{T}, Tuple{Int64, Int64, T}} where T<:Real","page":"Home","title":"CamiXon.gridfunction","text":"gridfunction(ID::Int, n::Int, h::T; p=5, coords=[0,1], deriv=0) where T <: Real\n\nID = 1: linear grid function,\n\n    fn = h(n-1)\n\nID = 2: exponential grid function,\n\n    fn = exp(h(n-1)) - 10\n\nID = 3: quasi-exponential grid function (exponential grid expanded upto order p),\n\n    fn = h(n-1) + frac12(h(n-1))^2 + cdots + frac1p(h(n-1))^p\n\nID = 4: polynomial grid function based on polynom c = c_1c_2ldotsc_p,\n\n    fn = c_1h(n-1) + c_2(h(n-1))^2 + cdots + c_p(h(n-1))^p\n\nExamples:\n\nh = 0.1\nr = [gridfunction(1, n-1, h) for n=1:5]                       # linear\n [0.0, 0.1, 0.2, 0.30000000000000004, 0.4]\n\nr′= [gridfunction(1, n-1, h; deriv=1) for n=1:5]     # linear (first derivative)\n [0.1, 0.1, 0.1, 0.1, 0.1]\n\nr = [gridfunction(3, n-1, h; p = 1) for n=1:5]  # quasi exponential (degree p=1)\n [0.0, 0.10000000000000009, 0.19999999999999996, 0.30000000000000004, 0.3999999999999999]\n\nr = [gridfunction(2, n-1, h) for n=1:5]                            # exponential\n [0.0, 0.10517091807564771, 0.22140275816016985, 0.3498588075760032, 0.49182469764127035]\n\nr = [gridfunction(3, n-1, h; p = 4) for n=1:5]  # quasi exponential (degree p=4)\n [0.0, 0.10517083333333321, 0.22140000000000004, 0.3498375, 0.49173333333333336]\n\nr = [gridfunction(4, n-1, h; coords = [0,1,1/2,1/6,1/24]) for n=1:5]  # polynomial (degree p=4)\n [0.0, 0.10517083333333334, 0.2214, 0.3498375000000001, 0.49173333333333336]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.createGrid-Tuple{Int64, Int64, Type}","page":"Home","title":"CamiXon.createGrid","text":"createGrid(ID::Int, N::Int, T::Type; h=1, r0=0.01,  p=5, coords=[0,1], epn=7, k=7)\n\nCreate the Grid object\n\nID = 1: linear grid, ID = 2: exponential grid, ID = 3: quasi-exponential grid, ID = 4: polynomial grid\n\nExamples:\n\nh = 0.1\nr0 = 1.0\ngrid = createGrid(1, 4, Float64; h, r0)                 # linear grid\ngrid.r\n [0.0, 0.1, 0.2, 0.30000000000000004]\ngrid.r′\n [0.1, 0.1, 0.1, 0.1]\n\ngrid = createGrid(2, 4, Float64; h, r0)                 # exponential grid\ngrid.r\n [0.0, 0.10517091807564771, 0.22140275816016985, 0.3498588075760032]\n\ngrid = createGrid(3, 4, Float64; p = 4, h, r0)          # quasi-exponential grid\ngrid.r\n [0.0, 0.10517083333333321, 0.22140000000000004, 0.3498375]\n\ngrid = createGrid(4, 4, Float64; coords=[0, 1, 1/2, 1/6, 1/24], h, r0)  # polynomial grid\ngrid.r\n  [0.0, 0.10517083333333334, 0.2214, 0.3498375000000001]\n\n\n\n\n\n","category":"method"},{"location":"#FITS","page":"Home","title":"FITS","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FITS stands for 'Flexible Image Transport System'. This is an open standard origionally developed for the astronomy community to store telescope images together with tables of spectral information. Over the years it has developed into a scientific standard - http://fits.gsfc.nasa.gov/iaufwg.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Within CamiXion only the basic FITS functionality is implemented for users not requiring celestal coordinates. The user can create, read and extend .fits files as well as create, edit and delete user-defined metainformation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A FITS file consists of a sequence of one or more header-data-units (HDUs), each containing a data block preceeded by header records of metainformation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"By the command f = fits_read(filnam) we asign a collection of FITS_HDU objects from the file filnam to the variable f.","category":"page"},{"location":"#FITS-Types","page":"Home","title":"FITS - Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FITS_HDU{T,V}\nFITS_header\nFITS_data\nFITS_table\nFITS_name","category":"page"},{"location":"#CamiXon.FITS_HDU","page":"Home","title":"CamiXon.FITS_HDU","text":"FITS_HDU{T,V}\n\nObject to hold a single \"Header-Data Unit\" (HDU).\n\nThe fields are\n\n.filename::String:  name of the corresponding FITS file\n.hduindex::Int:  identifier (a file may contain more than one HDU)\n.header::T:  the header object where T=FITS_header\n.dataobject::V:  the data object where V=FITS_data\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.FITS_header","page":"Home","title":"CamiXon.FITS_header","text":"FITS_header\n\nObject to hold the header information of a FITS_HDU.\n\nThe fields are:\n\n.hduindex::Int:  identifier (a file may contain more than one HDU)\n.records::Array{String,1}:  the header formated as an array of strings of 80 ASCII characters\n.keys::Array{String,1}:  keys[i] - key corresponding to records[i] (record of index i)\n.values::Array{Any,1}:  value[i] - corresponding to records[i]\n.comments::String:  comments[i] - comment corresponding to records[i]\n.dict::Dict{String,Any}:  Dictionary key[i] => value[i]\n.maps::Dict{String,Int}:  Dictionary key[i] => i\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.FITS_data","page":"Home","title":"CamiXon.FITS_data","text":"FITS_data\n\nObject to hold the data of the FITS_HDU of given hduindex and hdutype.\n\nThe fields are:\n\n.hduindex::Int:  identifier (a file may contain more than one HDU)\n.hdutype::String:  accepted types are 'PRIMARY', 'IMAGE' and 'TABLE'\n.data::Any:  in the from appropriate for the hdutype\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.FITS_table","page":"Home","title":"CamiXon.FITS_table","text":"FITS_table\n\nObject to hold the data of a TABLE HDU (a FITS_HDU for ASCII tables). It contains the data in the form of records (rows) of ASCII strings.\n\nThe fields are:\n\n.hduindex::Int:  identifier (a file may contain more than one HDU)\n.rows::Array{String,1}:  the table formated as an array of rows of ASCII strings\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.FITS_name","page":"Home","title":"CamiXon.FITS_name","text":"FITS_name\n\nFITS object to decompose the names of .fits files.\n\nThe fields are:\n\n.name::String:  for 'p#.fits' this is 'p#.fits'\n.prefix::String:  for 'p#.fits' this is 'p'\n.numerator::String:  for 'p#.fits' this is '#', a serial number (e.g., '3') or a range (e.g., '3-7')\n.extension::String:  for 'p#.fits' this is '.fits'.\n\n\n\n\n\n","category":"type"},{"location":"#FITS-HDU-Methods","page":"Home","title":"FITS - HDU Methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"fits_info(hdu::FITS_HDU)\nparse_FITS_TABLE(hdu::FITS_HDU)","category":"page"},{"location":"#CamiXon.fits_info-Tuple{FITS_HDU}","page":"Home","title":"CamiXon.fits_info","text":"fits_info(hdu)\n\nPrint metafinformation and data of given FITS_HDU\n\nExample:\n\nstrExample = \"remove.fits\"\ndata = [11,21,31,12,22,23,13,23,33]\ndata = reshape(data,(3,3,1))\nfits_create(strExample, data; protect=false)\n\nf = fits_read(strExample)\nfits_info(f[1])\n\n  File: remove.fits\n  hdu: 1\n  hdutype: PRIMARY\n  DataType: Int64\n  Datasize: (3, 3, 1)\n\n  Metainformation:\n  SIMPLE  =                    T / file does conform to FITS standard\n  BITPIX  =                   64 / number of bits per data pixel\n  NAXIS   =                    3 / number of data axes\n  NAXIS1  =                    3 / length of data axis 1\n  NAXIS2  =                    3 / length of data axis 2\n  NAXIS3  =                    1 / length of data axis 3\n  BZERO   =                  0.0 / offset data range to that of unsigned integer\n  BSCALE  =                  1.0 / default scaling factor\n  EXTEND  =                    T / FITS dataset may contain extensions\n  COMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov/iaufwg\n  END\n\n  3×3×1 Array{Int64, 3}:\n  [:, :, 1] =\n   11  12  13\n   21  22  23\n   31  23  33\n\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.parse_FITS_TABLE-Tuple{FITS_HDU}","page":"Home","title":"CamiXon.parse_FITS_TABLE","text":"parse_FITS_TABLE(hdu)\n\nParse FITS_TABLE (ASCII table) into a Vector of its columns for further processing by the user. Default formatting in ISO 2004 FORTRAN data format specified by keys \"TFORMS1\" - \"TFORMSn\") Display formatting in ISO 2004 FORTRAN data format (\"TDISP1\" - \"TDISPn\") prepared for user editing.\n\nExample:\n\nstrExample = \"example.fits\"\ndata = [10, 20, 30]\nfits_create(strExample, data; protect=false)\n\nt1 = Float16[1.01E-6,2.0E-6,3.0E-6,4.0E-6,5.0E-6]\nt2 = [0x0000043e, 0x0000040c, 0x0000041f, 0x0000042e, 0x0000042f]\nt3 = [1.23,2.12,3.,4.,5.]\nt4 = ['a','b','c','d','e']\nt5 = [\"a\",\"bb\",\"ccc\",\"dddd\",\"ABCeeaeeEEEEEEEEEEEE\"]\ndata = [t1,t2,t3,t4,t5]\nfits_extend(strExample, data, \"TABLE\")\n\nf = fits_read(strExample)\nd = f[2].header.dict\nd = [get(d,\"TFORM$i\",0) for i=1:5]; println(strip.(d))\n  SubString{String}[\"'E6.1    '\", \"'I4      '\", \"'F4.2    '\", \"'A1      '\", \"'A20     '\"]\n\nf[2].dataobject.data                            # this is the table hdu\n  5-element Vector{String}:\n   \"1.0e-6 1086 1.23 a a                    \"\n   \"2.0e-6 1036 2.12 b bb                   \"\n   \"3.0e-6 1055 3.0  c ccc                  \"\n   \"4.0e-6 1070 4.0  d dddd                 \"\n   \"5.0e-6 1071 5.0  e ABCeeaeeEEEEEEEEEEEE \"\n\nparse_FITS_TABLE(f[2])\n  5-element Vector{Vector{T} where T}:\n   [1.0e-6, 2.0e-6, 3.0e-6, 4.0e-6, 5.0e-6]\n   [1086, 1036, 1055, 1070, 1071]\n   [1.23, 2.12, 3.0, 4.0, 5.0]\n   [\"a\", \"b\", \"c\", \"d\", \"e\"]\n   [\"a                   \", \"bb                  \", \"ccc                 \", \"dddd                \", \"ABCeeaeeEEEEEEEEEEEE\"]\n\n\n\n\n\n","category":"method"},{"location":"#FITS-File-Methods","page":"Home","title":"FITS - File Methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"cast_FITS_name(filename::String)\nfits_combine(filnamFirst::String, filnamLast::String; protect=true)\nfits_copy(filenameA::String, filenameB::String=\" \"; protect=true)\nfits_create(filename::String, data=[]; protect=true)\nfits_extend(filename::String, data_extend, hdutype=\"IMAGE\")\nfits_read(filename::String)","category":"page"},{"location":"#CamiXon.cast_FITS_name-Tuple{String}","page":"Home","title":"CamiXon.cast_FITS_name","text":"cast_FITS_name(filename::String)\n\nDecompose the FITS filename 'filnam.fits' into its name, prefix, numerator and extension.\n\nExamples:\n\nstrExample = \"T23.01.fits\"\nf = cast_FITS_name(strExample)\nFITS_name(\"T23.01\", \"T23.\", \"01\", \".fits\")\n\nf.name, f.prefix, f.numerator, f.extension\n(\"T23.01\", \"T23.\", \"01\", \".fits\")\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.fits_combine-Tuple{String, String}","page":"Home","title":"CamiXon.fits_combine","text":"fits_combine(strFirst, strLast [; protect=true])\n\nCopy \"filenameFirst\" to \"filenameLast\" (with mandatory \".fits\" extension)\n\nKey:\n\nprotect::Bool: overwrite protection\n\nExample:\n\nfits_combine(\"T01.fits\", \"T22.fits\")\n  'T01-T22.fits': file created\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.fits_copy","page":"Home","title":"CamiXon.fits_copy","text":"fits_copy(filenameA [, filenameB=\"\" [; protect=true]])\n\nCopy \"filenameA\" to \"filenameB\" (with mandatory \".fits\" extension) Key:\n\nprotect::Bool: overwrite protection\n\nExamples:\n\nfits_copy(\"T01.fits\")\n  'T01.fits' was saved as 'T01 - Copy.fits'\n\nfits_copy(\"T01.fits\", \"T01a.fits\")\n  FitsError: 'T01a.fits' in use (set ';protect=false' to lift overwrite protection)\n\nfits_copy(\"T01.fits\", \"T01a.fits\"; protect=false)\n  'T01.fits' was saved as 'T01a.fits'\n\n\n\n\n\n","category":"function"},{"location":"#CamiXon.fits_create","page":"Home","title":"CamiXon.fits_create","text":"fits_create(filename [, data [; protect=true]])\n\nCreate FITS file of given filename [, optional data block [, default overwrite protection]] and return Array of HDUs. Key:\n\nprotect::Bool: overwrite protection\n\nExamples:\n\nstrExample = \"minimal.fits\"\nfits_create(strExample;protect=false)\n\nf = fits_read(strExample)\na = f[1].dataobject.data\nb = f[1].header.keys\nprintln(a);println(b)\n  Any[]\n  [\"SIMPLE\", \"NAXIS\", \"EXTEND\", \"COMMENT\", \"END\"]\n\nstrExample = \"remove.fits\"\ndata = [11,21,31,12,22,23,13,23,33]\ndata = reshape(data,(3,3,1))\nfits_create(strExample, data; protect=false)\n\nf = fits_read(strExample)\nfits_info(f[1])\n\n  File: remove.fits\n  hdu: 1\n  hdutype: PRIMARY\n  DataType: Int64\n  Datasize: (3, 3, 1)\n\n  Metainformation:\n  SIMPLE  =                    T / file does conform to FITS standard\n  BITPIX  =                   64 / number of bits per data pixel\n  NAXIS   =                    3 / number of data axes\n  NAXIS1  =                    3 / length of data axis 1\n  NAXIS2  =                    3 / length of data axis 2\n  NAXIS3  =                    1 / length of data axis 3\n  BZERO   =                  0.0 / offset data range to that of unsigned integer\n  BSCALE  =                  1.0 / default scaling factor\n  EXTEND  =                    T / FITS dataset may contain extensions\n  COMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov/iaufwg\n  END\n\n  3×3×1 Array{Int64, 3}:\n  [:, :, 1] =\n   11  12  13\n   21  22  23\n   31  23  33\n\n\n\n\n\n","category":"function"},{"location":"#CamiXon.fits_extend","page":"Home","title":"CamiXon.fits_extend","text":"fits_extend(filename, data_extend, hdutype=\"IMAGE\")\n\nExtend the FITS file of given filename with the data of hdutype from data_extend  and return Array of HDUs.\n\nExamples:\n\nstrExample = \"test_example.fits\"\ndata = [0x0000043e, 0x0000040c, 0x0000041f]\nfits_create(strExample, data, protect=false)\n\nf = fits_read(strExample)\na = Float16[1.01E-6,2.0E-6,3.0E-6,4.0E-6,5.0E-6]\nb = [0x0000043e, 0x0000040c, 0x0000041f, 0x0000042e, 0x0000042f]\nc = [1.23,2.12,3.,4.,5.]\nd = ['a','b','c','d','e']\ne = [\"a\",\"bb\",\"ccc\",\"dddd\",\"ABCeeaeeEEEEEEEEEEEE\"]\ndata = [a,b,c,d,e]\nfits_extend(strExample, data, \"TABLE\")\n\nf = fits_read(strExample)\nf[2].dataobject.data\n  5-element Vector{String}:\n   \"1.0e-6 1086 1.23 a a                    \"\n   \"2.0e-6 1036 2.12 b bb                   \"\n   \"3.0e-6 1055 3.0  c ccc                  \"\n   \"4.0e-6 1070 4.0  d dddd                 \"\n   \"5.0e-6 1071 5.0  e ABCeeaeeEEEEEEEEEEEE \"\n\nrm(strExample); f = data = a = b = c = d = e = nothing\n\n\n\n\n\n","category":"function"},{"location":"#CamiXon.fits_read-Tuple{String}","page":"Home","title":"CamiXon.fits_read","text":"fits_read(filename)\n\nRead FITS file and return Array of FITS_HDUs\n\nExample:\n\nstrExample = \"minimal.fits\"\nfits_create(strExample;protect=false)\n\nf = fits_read(strExample)\nf[1].dataobject.data\n  Any[]\n\nrm(strExample); f = nothing\n\n\n\n\n\n","category":"method"},{"location":"#FITS-Key-Methods","page":"Home","title":"FITS - Key Methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"fits_add_key(filename::String, hduindex::Int, key::String, val::Real, com::String)\nfits_delete_key(filename::String, hduindex::Int, key::String)\nfits_edit_key(filename::String, hduindex::Int, key::String, val::Real, com::String)\nfits_rename_key(filename::String, hduindex::Int, keyold::String, keynew::String)","category":"page"},{"location":"#CamiXon.fits_add_key-Tuple{String, Int64, String, Real, String}","page":"Home","title":"CamiXon.fits_add_key","text":"fits_add_key(filename, hduindex, key, value, comment)\n\nAdd a header record of given 'key, value and comment' to 'HDU[hduindex]' of file with name 'filename'\n\nExample:\n\nstrExample=\"minimal.fits\"\nfits_create(strExample;protect=false)\nfits_add_key(strExample, 1, \"KEYNEW1\", true, \"FITS dataset may contain extension\")\n\nf = fits_read(strExample)\nfits_info(f[1])\n\n  File: minimal.fits\n  hdu: 1\n  hdutype: PRIMARY\n  DataType: Any\n  Datasize: (0,)\n\n  Metainformation:\n  SIMPLE  =                    T / file does conform to FITS standard\n  NAXIS   =                    0 / number of data axes\n  EXTEND  =                    T / FITS dataset may contain extensions\n  COMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov/iaufwg\n  KEYNEW1 =                    T / FITS dataset may contain extension\n  END\n\n  Any[]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.fits_delete_key-Tuple{String, Int64, String}","page":"Home","title":"CamiXon.fits_delete_key","text":"fits_delete_key(filename, hduindex, key)\n\nDelete a header record of given key, value and comment to FITS_HDU[hduindex] of file with name  'filename'\n\nExamples:\n\nstrExample=\"minimal.fits\"\nfits_create(strExample;protect=false)\nfits_add_key(strExample, 1, \"KEYNEW1\", true, \"this is record 5\")\n\nf = fits_read(strExample)\nget(f[1].header.maps,\"KEYNEW1\",0)\n  5\n\nfits_delete_key(strExample, 1, \"KEYNEW1\")\n\nf = fits_read(strExample)\nget(f[1].header.maps,\"KEYNEW1\",0)\n  0\n\nfits_delete_key(filnam, 1, \"NAXIS\")\n 'NAXIS': cannot be deleted (key protected under FITS standard)\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.fits_edit_key-Tuple{String, Int64, String, Real, String}","page":"Home","title":"CamiXon.fits_edit_key","text":"fits_edit_key(filename, hduindex, key, value, comment)\n\nEdit a header record of given 'key, value and comment' to 'HDU[hduindex]' of file with name 'filename'\n\nExample:\n\ndata = DateTime(\"2020-01-01T00:00:00.000\")\nstrExample=\"minimal.fits\"\nfits_create(strExample;protect=false)\nfits_add_key(strExample, 1, \"KEYNEW1\", true, \"this is record 5\")\nfits_edit_key(strExample, 1, \"KEYNEW1\", data, \"record 5 changed to a DateTime type\")\n\nf = fits_read(strExample)\nfits_info(f[1])\n\n  File: minimal.fits\n  hdu: 1\n  hdutype: PRIMARY\n  DataType: Any\n  Datasize: (0,)\n\n  Metainformation:\n  SIMPLE  =                    T / file does conform to FITS standard\n  NAXIS   =                    0 / number of data axes\n  EXTEND  =                    T / FITS dataset may contain extensions\n  COMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov/iaufwg\n  KEYNEW1 = '2020-01-01T00:00:00' / record 5 changed to a DateTime type\n  END\n\n  Any[]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.fits_rename_key-Tuple{String, Int64, String, String}","page":"Home","title":"CamiXon.fits_rename_key","text":"fits_rename_key(filename, hduindex, keyold, kewnew)\n\nRename the key of a header record of file with name 'filename'\n\nExample:\n\nstrExample=\"minimal.fits\"\nfits_create(strExample;protect=false)\nfits_add_key(strExample, 1, \"KEYNEW1\", true, \"this is record 5\")\nfits_rename_key(strExample, 1, \"KEYNEW1\",  \"KEYNEW2\")\n\nf = fits_read(strExample)\nfits_info(f[1])\n\n  File: minimal.fits\n  hdu: 1\n  hdutype: PRIMARY\n  DataType: Any\n  Datasize: (0,)\n\n  Metainformation:\n  SIMPLE  =                    T / file does conform to FITS standard\n  NAXIS   =                    0 / number of data axes\n  EXTEND  =                    T / FITS dataset may contain extensions\n  COMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov/iaufwg\n  KEYNEW2 =                    T / this is record 5\n  END\n\n  Any[]\n\n\n\n\n\n","category":"method"},{"location":"#FORTRAN","page":"Home","title":"FORTRAN","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FORTRAN_format\ncast_FORTRAN_format(str::String)\ncast_FORTRAN_datatype(str::String)","category":"page"},{"location":"#CamiXon.FORTRAN_format","page":"Home","title":"CamiXon.FORTRAN_format","text":"FORTRAN_format\n\nObject to hold a FORTRAN format specifier decomposed into its fields. Accepted datatype specifiers are:  Aw,  Iw,  Fw.d,  Ew.d,  Dw.d. Accepted output formating specifiers are: Aw,  Iw.m,  Bw.m,  Ow.m,  Zw.m,  Fw.d,  Ew.dEe,  ENw.d,  ESw.d,  Gw.dEe,  Dw.dEe. Notation: 'w' - width, 'm' (optional) - minimum number of digits, 'd' - number of digits to right of decimal, 'e' - number of digits in exponent; 'N'/'S' (optional) - switch for engineering/scientific formating of the 'E' type.\n\nThe fields are:\n\nType::String: primary FORTRAN datatype\nTypeChar::Char: primary FORTRAN datatype character\nEngSci::Union{Char,Nothing}: secundary datatype character (N for engineering, S for scientific)\nwidth::Int: width of numeric field\nnmin::Int: minimum number of digits displayed\nndec::Int: number of digits to right of decimal\nnexp::Int: number of digits in exponent\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.cast_FORTRAN_format-Tuple{String}","page":"Home","title":"CamiXon.cast_FORTRAN_format","text":"cast_FORTRAN_format(format::String)\n\nDecompose the format specifier 'format' into its fields and cast this into the FORTRAN_format object. Allowed format specifiers are of the types: Aw, Iw.m, Bw.m, Ow.m, Zw.m, Fw.d, Ew.dEe, ENw.d, ESw.d, Gw.dEe, Dw.dEe, with: 'w' - width, 'm' (optional) - minimum number of digits, 'd' - number of digits to right of decimal, 'e' - number of digits in exponent; 'N'/'S' (optional) - switch for engineering/scientific formating of the 'E' type.\n\nExamples:\n\nt = cast_FORTRAN_format(\"I10\")\nFORTRAN_format(\"Iw\", 'I', nothing, 10, 0, 0, 0)\n\nt = cast_FORTRAN_format(\"I10.12\")\nFORTRAN_format(\"Iw.m\", 'I', nothing, 10, 12, 0, 0)\n\nt = cast_FORTRAN_format(\"E10.5E3\")\nFORTRAN_format(\"Ew.dEe\", 'E', nothing, 10, 0, 5, 3)\n\nt.Type, t.TypeChar, t.EngSci, t.width, t.nmin, t.ndec, t.nexp\n(\"Ew.dEe\", 'E', nothing, 10, 0, 5, 3)\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.cast_FORTRAN_datatype-Tuple{String}","page":"Home","title":"CamiXon.cast_FORTRAN_datatype","text":"cast_FORTRAN_datatype(format::String)\n\nDecompose the format specifier 'format' into its fields and cast this into the FORTRAN_format object. Allowed format specifiers are of the types: Aw, Iw, Fw.d, Ew.d, Dw.d, where: 'w' - width, 'd' - number of digits to right of decimal point.\n\nExamples:\n\nf = cast_FORTRAN_datatype(\"I10\")\nFORTRAN_format(\"Iw\", 'I', nothing, 10, 0, 0, 0)\n\nf = cast_FORTRAN_datatypet(\"F10.4\")\nFORTRAN_format(\"Fw.d\", 'F', nothing, 10, 0, 4, 0)\n\nf = cast_FORTRAN_datatype(\"E10.5\")\nFORTRAN_format(\"Ew.d\", 'E', nothing, 10, 0, 5, 0)\n\nt.Type, t.TypeChar, t.EngSci, t.width, t.nmin, t.ndec, t.nexp\n(\"Ew.d\", 'E', nothing, 10, 0, 5, 0)\n\n\n\n\n\n","category":"method"},{"location":"#Plotting","page":"Home","title":"Plotting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"step125(x::Real)\nselect125(x)\nsteps(x::Vector{T} where T<:Real)\nstepcenters(x::Vector{T} where T<:Real)\nstepedges(x::Vector{T} where T<:Real)\nedges(px, Δx=1.0, x0=0.0)","category":"page"},{"location":"#CamiXon.step125-Tuple{Real}","page":"Home","title":"CamiXon.step125","text":"step125(x)\n\nStep used for deviding the number x in steps according to 1-2-5 scheme\n\nExamples:\n\nstep125.([5,10,21.3,50,100.1])\n5-element Vector{Int64}:\n  1\n  2\n  5\n 10\n 20\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.select125-Tuple{Any}","page":"Home","title":"CamiXon.select125","text":"select125(x)\n\nSelect elements of the collection x by index according to 1-2-5 scheme\n\nExamples:\n\nx = [1,2,4,6,8,10,13,16,18,20,40,60,80,100]\nselect125(x)\n [2, 6, 10, 16, 20, 60, 100]\n\nx = string.(x)\nselect125(x)\n [\"2\", \"6\", \"10\", \"16\", \"20\", \"60\", \"100\"]\n\nx = 1:100\nselect125(x)\n [20, 40, 60, 80, 100]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.steps-Tuple{Vector{T} where T<:Real}","page":"Home","title":"CamiXon.steps","text":"steps(x)\n\nHeatmap range transformation for steplength specification vector x\n\nExamples:\n\nx = [4,2,6]\nsteps(x)\n [0, 4, 6, 12]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.stepcenters-Tuple{Vector{T} where T<:Real}","page":"Home","title":"CamiXon.stepcenters","text":"stepcenters(x)\n\nStepcenter positions for steplength specification vector x\n\nExamples:\n\nx = [4,2,6]\nstepcenters(x)\n [2.0, 5.0, 9.0]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.stepedges-Tuple{Vector{T} where T<:Real}","page":"Home","title":"CamiXon.stepedges","text":"stepedges(x)\n\nStepedges for steplength specification vector x\n\nExamples:\n\nx = [4,2,6]\nstepedges(x)\n [0, 4, 6, 12]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.edges","page":"Home","title":"CamiXon.edges","text":"edges(px [, Δx[, x0]])\n\nHeatmap range transformation from pixel coordinates to physical coordinates, with pixelsize Δx and offset x0, both in physical units.\n\nExamples:\n\npx = 1:5\nΔx = 2.5\nx0 = 2.5\nedges(px)\n [0.5, 1.5, 2.5, 3.5, 4.5]\n\nedges(px, Δx)\n [1.25, 3.75, 6.25, 8.75, 11.25]\n\nedges(px, Δx, x0)\n [-1.25, 1.25, 3.75, 6.25, 8.75]\n\n\n\n\n\n","category":"function"},{"location":"#Search-algorithms","page":"Home","title":"Search algorithms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"find_all(A::Union{String,AbstractArray{T,1}}, a::T...; count=false)  where T\nfind_first(A::Union{String,AbstractArray{T,1}}, a::T...; dict=false)  where T\nfind_last(A::Union{String,AbstractArray{T,1}}, a::T...; dict=false)  where T","category":"page"},{"location":"#CamiXon.find_all-Union{Tuple{T}, Tuple{Union{AbstractVector{T}, String}, Vararg{T}}} where T","page":"Home","title":"CamiXon.find_all","text":"find_all(A [,a...]; count=false)\n\nA: string/array of elements of the same type\n\ndefault   : Array containing the index (indices) of selected elements of A (default: all elements)\n\ncount=true: The number of indices found for selected elements of A (default: all elements)\n\nExamples:\n\nA = [:📑,:📌,:📢,:📌,:📞]\nB = [1,2,3,2,5]\nstr = \"aβcβd\";\nfind_all(A) == find_all(B) == find_all(str)\ntrue\n\nfind_all(A,:📌)\n1-element Array{Array{Int64,1},1}:\n [2, 4]\n\nfind_all(str)\n4-element Array{Array{Int64,1},1}:\n [1]\n [2, 4]\n [3]\n [5]\n\nfind_all(A; count=true)\n4-element Array{Int64,1}:\n 1\n 2\n 1\n 1\n\nstr = \"📑📌📢📌📞\"\nfind_all(str,'📌')\n1-element Array{Array{Int64,1},1}:\n [2, 4]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.find_first-Union{Tuple{T}, Tuple{Union{AbstractVector{T}, String}, Vararg{T}}} where T","page":"Home","title":"CamiXon.find_first","text":"find_first(A [,a...]; dict=false)\n\nThe first index of selected Array element\n\nA: string/array of elements of the same type\n\ndefault  : Array containing the first index (indices) of selected elements of A (default: all elements)\n\ndict=true: Dict for the first index (indices) of selected elements of A (default: all elements)\n\nExamples:\n\nA = [:📑,:📌,:📢,:📌,:📞]\nB = [1,2,3,2,5]\nstr = \"aβcβd\";\n\nfind_first(A) == find_first(B) == find_first(str)\ntrue\n\nfind_first(A,:📌)\n1-element Array{Array{Int64,1},1}:\n 2\n\nfind_last(A,:📌; dict=true)\n1-element Array{Pair{Symbol,Int64},1}:\n :📌 => 2\n\nfind_last(A; dict=true)\n4-element Array{Pair{Symbol,Int64},1}:\n :📑 => 1\n :📌 => 2\n :📢 => 3\n :📞 => 5\n\nfind_first(str)\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 5\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.find_last-Union{Tuple{T}, Tuple{Union{AbstractVector{T}, String}, Vararg{T}}} where T","page":"Home","title":"CamiXon.find_last","text":"find_last(A [,a...]; dict=false)\n\nThe last index of selected Array element\n\nA: string/array of elements of the same type\n\ndefault  : Array containing the lasst index (indices) of selected elements of A (default: all elements)\n\ndict=true: Dict for the lasst index (indices) of selected elements of A (default: all elements)\n\nExamples:\n\nA = [:📑,:📌,:📢,:📌,:📞]\nB = [1,2,3,2,5]\nstr = \"aβcβd\";\nfind_last(A) == find_first(B) == find_first(str)\ntrue\n\nfind_last(A,:📌)\n1-element Array{Array{Int64,1},1}:\n 4\n\nfind_last(A,:📌; dict=true)\n1-element Array{Pair{Symbol,Int64},1}:\n :📌 => 4\n\nfind_last(A; dict=true)\n4-element Array{Pair{Symbol,Int64},1}:\n :📑 => 1\n :📌 => 4\n :📢 => 3\n :📞 => 5\n\nfind_last(str)\n4-element Array{Int64,1}:\n 1\n 4\n 3\n 5\n\n\n\n\n\n","category":"method"},{"location":"#Math","page":"Home","title":"Math","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"bernoulli_numbers(nmax::Int)\ncanonical_partitions(n::Int, m=0; header=true, reverse=true)\nfaulhaber_polynom(p::Int)\nfaulhaber_summation(n::Int, p::Int; T=Int)\nharmonic_number(n::Int, p::Int)\nharmonic_number(n::Int)\ninteger_partitions(n::Int, m=0; transpose=false, count=false)\nlog10_characteristic_power(x)\nlog10_mantissa(x)\npermutations_unique_count(p::Array{Array{Int64,1},1}, i::Int)\npascal_triangle(nmax::Int)\npascal_next(a::Vector{Int})\npolynomial(coords::Vector{T}, x::T; deriv=0) where T<:Number\npolynom_derivative(coords::Vector{<:Number})\npolynom_derivatives(coords::Vector{<:Number}; deriv=0)\npolynom_derivatives_all(coords::Vector{<:Number})\npolynom_power(coords::Vector{<:Number}, power::Int)\npolynom_powers(coords::Vector{<:Number}, pmax::Int)\npolynom_primitive(coeffs::Vector{<:Number})\npolynom_product(a::Vector{T}, b::Vector{T}) where T<:Number\npolynom_product_expansion(a::Vector{T}, b::Vector{T}, p::Int) where T<:Number\ntexp(x::T, a::T, p::Int) where T <: Real\nVectorRational\nnormalize_VectorRational(vec::Vector{Rational{Int}})","category":"page"},{"location":"#CamiXon.bernoulli_numbers-Tuple{Int64}","page":"Home","title":"CamiXon.bernoulli_numbers","text":"bernoulli_numbers(nmax [, T=Int])\n\nBernoulli numbers B_0 cdots B_nmax calculated by repetative use of the recurrence relation\n\n    B_n = - frac1n+1sum_k=0^n-1frac(n+1)k(n+1-k)B_k\n\nSpecial numbers: B_0=1 B_1=-12 B_2n+1=0 (rmfor n1).\n\nExamples:\n\nbernoulli_numbers(10)\n11-element Vector{Rational{Int64}}:\n  1//1\n -1//2\n  1//6\n  0//1\n -1//30\n  0//1\n  1//42\n  0//1\n -1//30\n  0//1\n  5//66\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.canonical_partitions","page":"Home","title":"CamiXon.canonical_partitions","text":"canonical_partitions(n; header=false, reverse=true)\n\nThe canonical partition in integers of the integer n\n\nheader=true : unit patition included in output\n\nExamples:\n\ncanonical_partitions(6; header=true, reverse=false)\n6-element Array{Array{Int64,1},1}:\n [6]\n [5, 1]\n [4, 2]\n [3, 3]\n [2, 2, 2]\n [1, 1, 1, 1, 1, 1]\n\ncanonical_partitions(6; header=true)\n6-element Array{Array{Int64,1},1}:\n [1, 1, 1, 1, 1, 1]\n [2, 2, 2]\n [3, 3]\n [4, 2]\n [5, 1]\n [6]\n\ncanonical_partitions(6)\n5-element Array{Array{Int64,1},1}:\n [1, 1, 1, 1, 1, 1]\n [2, 2, 2]\n [3, 3]\n [4, 2]\n [5, 1]\n\n\n\n\n\n","category":"function"},{"location":"#CamiXon.faulhaber_polynom-Tuple{Int64}","page":"Home","title":"CamiXon.faulhaber_polynom","text":"faulhaber_polynom(p [, T=Int])\n\nVector representation of the Faulhaber polynomial of degree p,\n\n    F(np)=frac1psum_j=1^pbinom pp-jB_p-jn^j\n\nF(np)= polynomial(c,n), where c=c_0cdots c_p is the coefficient vector, with\n\n    c_0=0 c_j=frac1pbinom pp-jB_p-j\n\nwith j 1cdots p. The B_0cdots B_p-1 are Bernoulli numbers (but with B_1=+frac12 rather than -frac12).\n\nExample:\n\nfaulhaber_polynom(6)\n7-element Vector{Rational{Int64}}:\n  0//1\n  0//1\n -1//12\n  0//1\n  5//12\n  1//2\n  1//6\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.faulhaber_summation-Tuple{Int64, Int64}","page":"Home","title":"CamiXon.faulhaber_summation","text":"faulhaber_summation(n, p [, T=Int])\n\nSum of powers of natural numbers 1 cdots n,\n\n    FS(np)=sum_k=1^nk^p=F(np+1)\n\nwhere F(np) is the Faulhamer polynomial of degree p.\n\nExamples:\n\nfaulhaber_summation(5,1)\n 15\n\nfaulhaber_summation(3,60; T=BigInt)\n  42391158276369125018901280178\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.harmonic_number-Tuple{Int64, Int64}","page":"Home","title":"CamiXon.harmonic_number","text":"harmonic_number(n, p [, T=Int])\n\nSum of the p_th power of reciprocals of the first n numbers\n\n    H_np=sum_k=1^nfrac1k^p\n\nExamples:\n\nharmonic_number(12, 3)\n 25535765062457//21300003648000\n\nharmonic_number(12, 5; T=BigInt)\n 16971114472329088045481//16366888723117363200000\n\nharmonic_number(12, -3) == faulhaber_summation(12, 3)\n  true\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.harmonic_number-Tuple{Int64}","page":"Home","title":"CamiXon.harmonic_number","text":"harmonic_number(n [, T=Int])\n\nSum of the reciprocals of the first n natural numbers\n\n    H_n=sum_k=1^nfrac1k\n\nExamples:\n\no = [harmonic_number(i) for i=1:10]; println(o)\n [1//1, 3//2, 11//6, 25//12, 137//60, 49//20, 363//140, 761//280, 7129//2520, 7381//2520]\n\nharmonic_number(60; T=BigInt)\n 15117092380124150817026911//3230237388259077233637600\n\nharmonic_number(12) == harmonic_number(12, 1)\n true\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.integer_partitions","page":"Home","title":"CamiXon.integer_partitions","text":"integer_partitions(n [,m]; transpose=false, count=false)\n\ndefault              : The integer partitions of n\n\ncount=true           : The number of integer partitions of n\n\ntranspose=false/true : for m>0 restricted to partitions with maximum part/length m\n\ndefinitions:\n\nThe integer partition of the positive integer n is a nonincreasing sequence of positive integers p1, p2,... pk whose sum is n.\n\nThe elements of the sequence are called the parts of the partition.\n\nExamples:\n\ninteger_partitions(7)\n15-element Array{Array{Int64,1},1}:\n [1, 1, 1, 1, 1, 1, 1]\n [2, 2, 2, 1]\n [3, 3, 1]\n [4, 3]\n [5, 2]\n [6, 1]\n [7]\n [2, 2, 1, 1, 1]\n [3, 2, 2]\n [4, 2, 1]\n [5, 1, 1]\n [2, 1, 1, 1, 1, 1]\n [3, 2, 1, 1]\n [4, 1, 1, 1]\n [3, 1, 1, 1, 1]\n\ninteger_partitions(7; count=true)\n15\n\ninteger_partitions(7,4; count=true)\n3\n\ninteger_partitions(7,4)\n3-element Array{Array{Int64,1},1}:\n [4, 3]\n [4, 2, 1]\n [4, 1, 1, 1]\n\ninteger_partitions(7,4; transpose=true)\n3-element Array{Array{Int64,1},1}:\n [2, 2, 2, 1]\n [3, 2, 1, 1]\n [4, 1, 1, 1]\n\n\n\n\n\n","category":"function"},{"location":"#CamiXon.log10_characteristic_power-Tuple{Any}","page":"Home","title":"CamiXon.log10_characteristic_power","text":"log10_characteristic_power(x)\n\ncharacteristic power-of-10 of the number x\n\nExamples:\n\nlog10_characteristic_power.([3,30,300])\n3-element Vector{Int64}:\n 0\n 1\n 2\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.log10_mantissa-Tuple{Any}","page":"Home","title":"CamiXon.log10_mantissa","text":"log10_mantissa(x)\n\nlog10 mantissa of the number x\n\nExamples:\n\nlog10_mantissa.([3,30,300])\n3-element Vector{Float64}:\n 0.47712125471966244\n 0.4771212547196624\n 0.4771212547196626\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.permutations_unique_count-Tuple{Vector{Vector{Int64}}, Int64}","page":"Home","title":"CamiXon.permutations_unique_count","text":"permutations_unique_count(p::Array{Array{Int64,1},1}, i::Int)\n\nNumber of unique permutations of the subarray pi.\n\nExample:\n\np = [[1,2,3],[2,3,1,4,3]]\npermutations_unique_count(p,2)\n 60\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.pascal_triangle-Tuple{Int64}","page":"Home","title":"CamiXon.pascal_triangle","text":"pascal_triangle(nmax [, T=Int])\n\nPascal triangle of binomial coefficients binomnk for n=0 1 cdots nmax\n\nExample:\n\npascal_triangle(5)\n6-element Vector{Vector{Int64}}:\n [1]\n [1, 1]\n [1, 2, 1]\n [1, 3, 3, 1]\n [1, 4, 6, 4, 1]\n [1, 5, 10, 10, 5, 1]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.pascal_next-Tuple{Vector{Int64}}","page":"Home","title":"CamiXon.pascal_next","text":"pascal_next(nmax)\n\nNext row of Pascal triangle\n\nExample:\n\na = [1, 4, 6, 4, 1]\npascal_next(a)\n [1, 5, 10, 10, 5, 1]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynomial-Union{Tuple{T}, Tuple{Vector{T}, T}} where T<:Number","page":"Home","title":"CamiXon.polynomial","text":"polynomial(coords::Vector{T}, x::T[; deriv=0]) where T<:Number\n\nMethod to evaluate the function f(x)=textpolynomial(cx), where c=c_0 ldots c_d is the vector representation of a polynomial of degree d.\n\n    textpolynomial(cx)=c_0 + c_1 x + cdots + c_d x^d\n\nExamples:\n\ncoords = ones(Int,6)                     # for polynomial of degree 5 with unit coefficients\nf0(x) = polynomial(coords,x)             # default\nfd(x) = polynomial(coords,x; deriv=1)    # first derivative\nfp(x) = polynomial(coords,x; deriv=-1)   # primitive (with zero integration constant)\nf0(1)\n 6\n\nfd(1)\n 15\n\nfp(1)\n 49//20\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynom_derivative-Tuple{Vector{<:Number}}","page":"Home","title":"CamiXon.polynom_derivative","text":"polynom_derivative(coords)\n\nVector representation of the first derivative of the polynomial coords,\n\n    p(cx)=c_1 + 2 c_2 x + cdots + d c_d x^d-1\n\nPolynomials of degree d are represented by a vector in a vector space of dimension d+1. The polynomial coords is specified by the coordinates vector c=c_0 ldots c_d consisting of the polynomial coefficients.\n\nExamples:\n\ncoords=[1,1,1,1,1]                 # vector representation of polynomial of degree d=4\npolynom_derivative(coords)         # (first) derivative of polynomial `coords`\n4-element Vector{Int64}:\n 1\n 2\n 3\n 4\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynom_derivatives-Tuple{Vector{<:Number}}","page":"Home","title":"CamiXon.polynom_derivatives","text":"polynom_derivatives(coords::Vector{<:Number}[;deriv=0])\n\nVector representation of derivatives of the polynomial coords.\n\nPolynomials of degree d are represented by a vector in a vector space of dimension d+1. The polynomial coords is specified by the coordinates vector c=c_0 ldots c_d consisting of the polynomial coefficients.\n\nderiv: derivative of choice; default: coords remains unchanged.\n\nExamples:\n\ncoords=[1,1,1,1,1]               # vector representation of a polynomial of degree d=4\npolynom_derivatives(coords)      # default no (zero) derivative of polynomial `coords`\n5-element Vector{Vector{Int64}}:\n 1\n 1\n 1\n 1\n 1\n\npolynom_derivatives(coords; deriv=2)        # second derivative of polynomial `coords`\n3-element Vector{Int64}:\n  2\n  6\n 12\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynom_derivatives_all-Tuple{Vector{<:Number}}","page":"Home","title":"CamiXon.polynom_derivatives_all","text":"polynom_derivatives_all(coords::Vector{<:Number})\n\nVector representation of all nontrivial derivatives of the polynomial coords.\n\nPolynomials of degree d are represented by a vector in a vector space of dimension d+1. The polynomial coords is specified by the coordinates vector c=c_0 ldots c_d consisting of the polynomial coefficients.\n\nExamples:\n\ncoords=[1,1,1,1,1]               # vector representation of a polynomial of degree d=4\npolynom_derivatives_all(coords)      # `all' (nontrivial) derivatives of polynomial `coords`\n5-element Vector{Vector{Int64}}:\n [1, 2, 3, 4]\n [2, 6, 12]\n [6, 24]\n [24]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynom_power-Tuple{Vector{<:Number}, Int64}","page":"Home","title":"CamiXon.polynom_power","text":"polynom_power(coords, p)\n\nVector representation of the polynomial coords raised to the power p which results in a polynomial in a vector space of dimension p d + 1.\n\nPolynomials of degree d are represented by a vector in a vector space of dimension d+1. The polynomial coords is specified by the coordinates vector c=c_0 ldots c_d consisting of the polynomial coefficients.\n\nExamples:\n\ncoords=[1,1,1]             # vector representation of polynomial of degree ``d=2``\npolynom_power(coords,2)\n5-element Vector{Int64}:\n 1\n 2\n 3\n 2\n 1\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynom_powers-Tuple{Vector{<:Number}, Int64}","page":"Home","title":"CamiXon.polynom_powers","text":"polynom_powers(coords, pmax)\n\nThe polynomial coords raised to the powers 1,...,pmax  which results in a collection of polynomials in vector spaces of dimension d+1 tot p d + 1.\n\nPolynomials of degree d are represented by a vector in a vector space of dimension d+1. The polynomial coords is specified by the coordinates vector c=c_0 ldots c_d consisting of the polynomial coefficients.\n\nExamples:\n\ncoords=[1,1,1]                   # vector representation of polynomial of degree d=2\npolynom_powers(coords,3)\n3-element Vector{Vector{Int64}}:\n [1, 1, 1]\n [1, 2, 3, 2, 1]\n [1, 3, 6, 7, 6, 3, 1]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynom_primitive-Tuple{Vector{<:Number}}","page":"Home","title":"CamiXon.polynom_primitive","text":"polynom_primitive(coords)\n\nVector representation of the primitive of the polynomial coords which is a polynomial in a vector space of dimension p d + 1.\n\n    P(cx)=c_int +c_0 x + frac12 c_1 x^2 + frac13 c_2 x^3 + cdots + frac1d+1 c_d x^d+1\n\nThe constant of integration is set to zero, c_int = 0.\n\nPolynomials of degree d are represented by a vector in a vector space of dimension d+1. The polynomial coords is specified by the coordinates vector c=c_0 ldots c_d consisting of the polynomial coefficients.\n\nExamples:\n\ncoords=[1,1,1,1,1]         # vector representation of polynomial of degree ``d=4``\npolynom_primitive(coords)\n6-element Vector{Rational{Int64}}:\n 0//1\n 1//1\n 1//2\n 1//3\n 1//4\n 1//5\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynom_product-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}}} where T<:Number","page":"Home","title":"CamiXon.polynom_product","text":"polynom_product(a::Vector{T}, b::Vector{V}) where {T<:Number, V<:Number}\n\nVector representation of the product of two polynomials, a and b which is a polynomial in a vector space of dimension d=m+n,\n\n    p(cx)=a_0b_0 + (a_0b_1 + b_0a_1)x + cdots + a_n b_m x^n+m\n\nPolynomials of degree d are represented by a vector in a vector space of dimension d+1 The polynomial coords is specified by the coordinates vector c=c_0 ldots c_d consisting of the polynomial coefficients.\n\n\n\n[polynom_product1([1.0,1],[1,-1,2])]\n [1.0, 0.0, 1.0, 2.0]\n\n[polynom_product1([1//1,1],[1,-1,2])]\n [1//1, 0//1, 1//1, 2//1]\n\n[polynom_product([1,1],[1,- 1,2])]\n [1, 0, 1, 2]\n\n[polynom_product([1,- 1,2],[1,1])]\n [1, 0, 1, 2]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynom_product_expansion-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, Int64}} where T<:Number","page":"Home","title":"CamiXon.polynom_product_expansion","text":"polynom_product_expansion(a::Vector{T}, b::Vector{T}, p::Int) where T<:Number\n\nVector representation of the product of two polynomials, a (of degree n) and b (of degree m), with mn truncated at the order p is a polynomial in a vector space of dimension d=p+1. If ab is the polynom_product, the polynom_product_expansion is ab1p+1\n\n\n\na = [1,-1,1]\nb = [1,1,-1,1,1,1]\no = polynom_product(a, b); println(o)\n [1, 0, -1, 3, -1, 1, 0, 1]\n\no = expand_product(a, b, 4); println(o)\n [1, 0, -1, 3, -1]\n\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.texp-Union{Tuple{T}, Tuple{T, T, Int64}} where T<:Real","page":"Home","title":"CamiXon.texp","text":"texp(x::T, a::T, p::Int) where T <: Real\n\nTaylor expansion of exp(x) about x = a up to order p.\n\n    mathsftexp(xap) = 1 + (x-a) + frac12(x-a)^2 + cdots + frac1p(x-a)^p\n\nExamples:\n\np = 5\ntexp(1.0, 0.0, 5)\n 2.7166666666666663\n\ntexp(1, 0, 5)\n 163//60\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.VectorRational","page":"Home","title":"CamiXon.VectorRational","text":"VectorRational\n\nObject to decompose a vector of rational numbers\n\nThe fields are:\n\n.num::Vector{Int}`: vector of normalized numerators\n.den::Int: common denominator\n.val::Vector{Rational}: vector of rational numbers (simplified = not normalized)\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.normalize_VectorRational-Tuple{Vector{Rational{Int64}}}","page":"Home","title":"CamiXon.normalize_VectorRational","text":"normalize_VectorRational(vec::Vector{Rational{Int}})\n\nDecompose vector of rational numbers.\n\nExample:\n\nv = [2//3,4//5]\nnormalize_VectorRational(v)\n VectorRational([10, 12], 15, Rational{Int64}[2//3, 4//5])\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
