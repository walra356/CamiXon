var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CamiXon","category":"page"},{"location":"#CamiXon.jl","page":"Home","title":"CamiXon.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package for image analysis of backscattered light","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Table-of-contents","page":"Home","title":"Table of contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CamiXon is a package for the numerical solution of the radial Schrödinger equation allowing for screening.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In this package the solution is obtained for a single electron, acting as a spectator in the central field of the atomic nucleus screened by 'the other' electrons (the screening electrons).","category":"page"},{"location":"","page":"Home","title":"Home","text":"The starting point is the 1D Schrödinger equation,","category":"page"},{"location":"","page":"Home","title":"Home","text":"tildeχ_l^+2Z_mathrmeff(ρ)ρ-l(l+1)2ρ^2+ε_ltildeχ_l=0","category":"page"},{"location":"","page":"Home","title":"Home","text":"where tildechi_l(rho)=rhotildeR_l(rho) is the reduced radial wavefunction and ε_l=-κ _l^2 is the corresponding binding energy in Hartree atomic units (a.u.). As compared to the hydrogenic case, the atomic number Z has been replaced by Z_mathrmeff(ρ), the effective nuclear charge at radial distance ρ from the atomic center (in a.u.). In other words, the energy of the electron in the Coulomb field of the nucleus is replaced by an effective, central field potential of the form","category":"page"},{"location":"","page":"Home","title":"Home","text":"U_mathrmCF(ρ)=-Z_mathrmeff(ρ)ρ=-Zρ+U_mathrmscr(ρ)","category":"page"},{"location":"","page":"Home","title":"Home","text":"consisting of the bare Coulomb contribution, -Zρ, and the screening field U_mathrmscr(ρ), subject to the boundary conditions U_mathrmscr(0)=Z and mathrmlim_ρinftyU_mathrmscr(ρ)=Z_cρ. Here Z_c is the Rydberg charge; i.e. the effective nuclear charge for a spectator electron in the far field (ρinfty). Within these assumptions we can optimize U_mathrmscr(ρ), while preserving the bare Coulomb field close to the nucleus as well as the Rydberg potential in the far field. The price we pay is that the radial Schrödinger equation has to be solved numerically by radial integration. Our strategy is to use both inward and outward integration and match the two branches by equating the two solutions for the wavefunction, χ(ρ), and its derivative, χ^(ρ), at a point near the classical turning point of the radial motion of the electron. The basics of the solution can be found in the book Atomic Structure Theory by Walter R.Johnson.","category":"page"},{"location":"#Illustration:-the-hydrogen-3d-orbital","page":"Home","title":"Illustration: the hydrogen 3d orbital","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Shown below are the reduced radial wavefunction (χ) and its derivative (χ^) in the near field (left), the far field (right), and in the region about the classical turning point (center).","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Image)","category":"page"},{"location":"#Codata","page":"Home","title":"Codata","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Codata\nValue\nstrValue(f::Value)\nNamedValue\ncastNamedValue(val::Value; name=\" \", comment=\" \")\ncastCodata(year::Int)\nlistCodata(codata::Codata)\nconvertUnit(val, codata::Codata; unitIn=\"Hartree\", unitOut=\"xHz\")\ncalibrationReport(E, Ecal, codata::Codata; unitIn=\"Hartree\")","category":"page"},{"location":"#CamiXon.Codata","page":"Home","title":"CamiXon.Codata","text":"Codata\n\nObject to hold the natural constants from CODATA. It is best created with the function castCodata\n\nThe fields are:\n\n.∆νCs: Cs hyperfine transition frequency (::Value)\n.c: speed of light in vacuum (::Value)\n.h: Planck constant (::Value)\n.ħ: Planck constant - reduced (::Value)\n.e: elementary charge (::Value)\n.kB: Boltzmann constant (::Value)\n.NA: Avogadro constant (::Value)\n.Kcd: Luminous efficacy (::Value)\n.me: electron rest mass (::Value)\n.R∞: Rydberg constant (::Value)\n.Ry: Rydberg frequency (::Value)\n.Eh: Hartree a.u. (::Value)\n.α: fine-structure constant (::Value)\n.μ0: magnetic permitivity of vacuum (::Value)\n.ε0: electric permitivity of vacuum (::Value)\n.KJ: Josephson constant (::Value)\n.RK: Von Klitzing constant (::Value)\n.R: Molar gas constant (::Value)\n.matE: unit conversion matrix (Matrix{Float64})\n\nExample:\n\ncodata = castCodata(2018)\ncodata.μ0\n  Value(1.2566370621250601e-6, \"N A⁻²\")\n\ncodata.μ0.val\n  1.2566370621250601e-6\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.Value","page":"Home","title":"CamiXon.Value","text":"Value(val::Real, unit::String)\n\nObject to hold a real numerical value together with a unit specifier.\n\nThe fields are:\n\n.val: numerical value (::Real)\n.unit: unit specifier (::String)\n\nExample:\n\nf = Value(1,\"Hz\")\n  Value(1, \"Hz\")\n\nf.val\n  1\n\nf.unit\n  \"Hz\"\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.strValue-Tuple{Value}","page":"Home","title":"CamiXon.strValue","text":"strValue(f::Value)\n\nString expression for a Value object in :compact => true representation\n\nExample:\n\nf = Value(1,\"Hz\")\nstrValue(f)\n  \"1 Hz\"\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.NamedValue","page":"Home","title":"CamiXon.NamedValue","text":"NamedValue(val::Value, name::String, comment::String)\n\nObject to hold a Value together with its symbolic name and a short description\n\nThe fields are:\n\n.val: Value  (::Value)\n.name: symbolic name (::String)\n.comment: description (::String)\n\nNamed Value object The object NamedValue is best created using castNamedValue.\n\nExample:\n\nf = Value(1,\"Hz\")\n  Value(1, \"Hz\", \"frequency\")\n\nf.name\n  \"frequency\"\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.castNamedValue-Tuple{Value}","page":"Home","title":"CamiXon.castNamedValue","text":"castNamedValue(val::Value; name=\" \", comment=\" \")\n\nMethod to create a NamedValue object\n\nExample\n\nv = Value(1.602176634e-19, \"C\")\nnv = castNamedValue(v; name=\"e\")\nnv.name * \" = \" * strValue2(nv.val)\n  \"e = 1.60218e-19 C\"\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.castCodata-Tuple{Int64}","page":"Home","title":"CamiXon.castCodata","text":"castCodata(year::Int)\n\nMethod to create the Codata object\n\nExample:\n\ncodata = castCodata(2018)\nstrValue.([codata.∆νCs,codata.c,codata.h])\n 3-element Vector{String}:\n  \"9192631770 Hz\"\n  \"299792458 m s⁻¹\"\n  \"6.62607e-34 J Hz⁻¹\"\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.listCodata-Tuple{Codata}","page":"Home","title":"CamiXon.listCodata","text":"listCodata(codata::Codata)\n\nMethod to list the fields of Codata by their symbolic name\n\nExample:\n\ncodata = castCodata(2018)\nlistCodata(codata::Codata)\n  ∆νCs = 9192631770 Hz\n  c = 299792458 m s⁻¹\n  h = 6.62607e-34 J Hz⁻¹\n  ħ = 1.05457e-34 J s\n  e = 1.60218e-19 C\n  kB = 1.38065e-23 J K⁻¹\n  NA = 6.02214e23 mol⁻¹\n  Kcd = 683 lm W⁻¹\n  mₑ = 9.10938e-31 Kg\n  R∞ = 1.09737e7 m⁻¹\n  Ry = 3.28984e15 Hz\n  Eₕ = 4.35974e-18 Hartree a.u.\n  α = 0.00729735\n  μ₀ = 1.25664e-6 N A⁻²\n  ε₀ = 8.85419e-12 F m⁻¹\n  KJ = 4.83598e14 Hz V⁻¹\n  RK = 25812.8 Ω\n  R = 8.31446 J mol⁻¹K⁻¹\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.convertUnit-Tuple{Any, Codata}","page":"Home","title":"CamiXon.convertUnit","text":"convertUnit(val, codata::Codata; unitIn=\"Hartree\", unitOut=\"xHz\")\n\nUnit conversion between μHz,⋯ EHz, Hartree, Rydberg, Joule, and eV\n\ndefault input: Hartree\n\ndefault output: xHz ∈ {μHz, mHz, Hz, kHz, MHz, GHz, THz, PHz, EHz}\n\nExample:\n\ncodata = createCodata(2018)\nconvertUnit(1, codata; unitIn=\"Hz\", unitOut=\"Joule\")\n  6.62607015e-34\n\nconvertUnit(1, codata; unitIn=\"Hartree\", unitOut=\"Hz\")\n  Value(6.57968392050182e15, \"Hz\")\n\nf = convertUnit(1, codata) # default input (Hartree) and output (xHz)\nstrf = strValue(f)\n  \"6.57968 PHz\"\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.calibrationReport-Tuple{Any, Any, Codata}","page":"Home","title":"CamiXon.calibrationReport","text":"calibrationReport(E, Ecal, codata::Codata; unitIn=\"Hartree\")\n\nComparison of energy E with calibration value Ecal\n\ndefault input: Hartree\n\nExample:\n\ncodata = castCodata(2018)\ncalibrationReport1(1.1, 1.0, codata; unitIn=\"Hartree\")\n  calibration report (Float64):\n  Ecal = 1.0 Hartree\n  E = 1.1 Hartree\n  absolute accuracy: ΔE = 0.1 Hartree (657.968 THz)\n  relative accuracy: ΔE/E = 0.0909091\n\n\n\n\n\n","category":"method"},{"location":"#Atomic-properties","page":"Home","title":"Atomic properties","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Element\nIsotope\nAtom\nOrbit\nSpinOrbit\nTerm\ncastElement(;Z=1, msg=true)\ncastIsotope(;Z=1, A=1, msg=true)\ncastAtom(;Z=1, A=1, Q=0, msg=true)\ncastOrbit(;n=1, ℓ=0, msg=true)\ncreateSpinOrbit(o::Orbit; up=true, msg=true)\ncreateTerm(n::Int; ℓ=0, S=1//2, L=0, J=1//2, msg=true)\nbohrformula(Z::Int, n::Int)","category":"page"},{"location":"#CamiXon.Element","page":"Home","title":"CamiXon.Element","text":"Element(name, symbol, weight)\n\nType with fields:\n\n.name:  name of element (::String)\n.symbol:  symbol of element  (::String)\n.weight:  relative atomic mass - atomic weight (::Float64)\n\nThe type Element is best created with the function castElement).\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.Isotope","page":"Home","title":"CamiXon.Isotope","text":"Isotope(Z, A, radius, mass, I, π, lifetime, mdm, eqm, ra)\n\nType with fields:\n\n.Z:  atomic number (::Int)\n.N:  neutron number (::Int)\n.A:  atomic mass number in amu (::Int)\n.R:  rms charge radius in Fermi (::Float64)\n.M:  atomic mass in amu (::Float64)\n.I:  nuclear spin in units of ħ  (::Rational{Int})\n.π:  parity of nuclear state (::Int)\n.lt:  lifetime inyears (::Float64)\n.mdm: nuclear magnetic dipole moment (::Float64)\n.eqm: nuclear electric quadrupole moment (::Float64)\n.ra:  relative abundance in % (::Float64)\n\nThe type Isotope is best created with the function castIsotope).\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.Atom","page":"Home","title":"CamiXon.Atom","text":"Atom(Z, A, Q, Zc, element, isotope)\n\nType with fields:\n\n.Z:  atomic number (::Int)\n.A:  atomic mass number in amu (::Int)\n.Q:  ionic charge in a.u. (::Int)\n.Zc:  Rydberg charge in a.u. (::Int)\n.element:  (::Element)\n.isotope:  (::Isotope)\n\nThe type Atom is best created with the function castAtom).\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.Orbit","page":"Home","title":"CamiXon.Orbit","text":"Orbit(name, n, n′, ℓ)\n\nType for specification of atomic orbitals with fields:\n\n.name: name\n.n:  principal quantum number\n.n′:  radial quantum number (number of nodes in radial wavefunction)\n.ℓ:  orbital angular momentum valence electron\n\nThe type Orbit is best created with the function castOrbit.\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.SpinOrbit","page":"Home","title":"CamiXon.SpinOrbit","text":"SpinOrbit\n\nType for specification of atomic spinorbitals with fields:\n\n.name: name\n.n:  principal quantum number\n.n′:  radial quantum number (number of nodes in radial wavefunction)\n.ℓ:  orbital angular momentum valence electron\n.ms:  spin magnetic quantum number\n\nThe type SpinOrbit is best created with the function createSpinOrbit.\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.Term","page":"Home","title":"CamiXon.Term","text":"Term(name::String, n::Int, ℓ::Int, S::Real, L::Int, J::Real)\n\nType for specification of atomic fine-structure Terms with fields:\n\nname: name\n.n:  principal quantum number\n.n′:  radial quantum number (number of nodes in wavefunction)\n.ℓ:  orbital angular momentum valence electron\n.S:  total electron spin in units of ħ\n.L:  total orbital angular momentum in units of ħ\n.J:  total electronic angular momentum in units of ħ\n\nThe type Term is best created with the function createTerm.\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.castElement-Tuple{}","page":"Home","title":"CamiXon.castElement","text":"castElement(;Z=1, msg=true)\n\nCreate Atom with fields\n\n.name:  name of element\n.symbol:  symbol of element\n.weight:  relative atomic mass (atomic weight)\n\nExample:\n\ncastElement(;Z=1, msg=true)\n  Element created: hydrogen\n    symbol: H\n    atomic number (Z): 1\n    atomic weight (relative atomic mass): 1.008 amu\n\n  Element(\"hydrogen\", \"H\", 1.008)\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.castIsotope-Tuple{}","page":"Home","title":"CamiXon.castIsotope","text":"castIsotope(;Z=1, A=1, msg=true)\n\nCreate Isotope with fields\n\n.Z:  atomic number (::Int)\n.N:  neutron number (::Int)\n.A:  atomic mass number in amu (::Int)\n.R:  rms charge radius in Fermi (::Float64)\n.M:  atomic mass in amu (::Float64)\n.I:  nuclear spin in units of ħ (::Rational{Int})\n.π:  parity of nuclear state (::Int)\n.ra:  relative abundance in % (::Float64)\n.mdm: nuclear magnetic dipole moment (::Float64)\n.eqm: nuclear electric quadrupole moment (::Float64)\n.lt:  lifetime in years (::Float64)\n\nExamples:\n\nisotope = castIsotope(Z=1, A=3, msg=false)\n  Isotope(1,-2, 3, 1.7591, 3.016049281, 1//2, 1, 12.33, 2.97896246, 0, nothing)\n\nisotope.ra\n  99.9855\n\ncastIsotope(Z=1,A=3);\n  Isotope created: ³H\n      element: tritium\n      atomic number: Z = 1\n      neutron number: n = 2\n      atomic mass number: A =  3 amu\n      rms nuclear charge radius: R = 1.7591 fm\n      atomic mass: mass = 3.016049281 amu\n      nuclear spin: I = 1//2 ħ\n      parity of nuclear state: π = 1\n      lifetime: 12.33 years\n      nuclear magnetic dipole moment: mdm = 2.97896246\n      nuclear electric quadrupole moment: eqm = 0\n      relative abundance: RA = trace\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.castAtom-Tuple{}","page":"Home","title":"CamiXon.castAtom","text":"castAtom(;Z=1, A=1, Q=0, msg=true)\n\nCreate Atom with fields:\n\n.Z:  atomic number (::Int)\n.A:  atomic mass number in amu (::Int)\n.Q:  ionic charge in a.u. (::Int)\n.Zc:  Rydberg charge in a.u. (::Int)\n\n*.element:  (::Element) *.isotope:  (::Isotope)\n\nExamples:\n\natom = castAtom(Z=1, A=1, Q=0, msg=false)\n  Atom(1, 1, 0, 1, Element(\"hydrogen\", \"H\", 1.008), Isotope(1, 0, 1, 0.8783,\n  1.007825032, 1//2, 1, 1.0e100, 2.792847351, 0.0, 99.9855))\n\natom.isotope.ra\n  99.9855\n\ncastAtom(Z=1, A=3, Q=0);\n  Element created: hydrogen\n      symbol: H\n      atomic number (Z): 1\n      atomic weight (relative atomic mass): 1.008 amu\n  Isotope created: ³H\n      element: tritium\n      atomic number: Z = 1\n      neutron number: n = 2\n      atomic mass number: A =  3 amu\n      rms nuclear charge radius: R = 1.7591 fm\n      atomic mass: mass = 3.016049281 amu\n      nuclear spin: I = 1//2 ħ\n      parity of nuclear state: π = 1\n      lifetime: 12.33 years\n      nuclear magnetic dipole moment: mdm = 2.97896246\n      nuclear electric quadrupole moment: eqm = 0\n      relative abundance: RA = trace\nAtom created: hydrogen - ³H (Z = 1, Zc = 1, Q = 0)\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.castOrbit-Tuple{}","page":"Home","title":"CamiXon.castOrbit","text":"castOrbit(;n=1, ℓ=0, msg=true)\n\nCreate Orbit with fields:\n\n.name: name\n.n:  principal quantum number\n.n′:  radial quantum number (number of nodes in radial wavefunction)\n.ℓ:  orbital angular momentum valence electron\n\nExamples:\n\ncastOrbit(n=1, ℓ=0)\n Orbit created: 1s (n = 1, n′ = 0, ℓ = 0)\n Orbit(\"1s\", 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.createSpinOrbit-Tuple{Orbit}","page":"Home","title":"CamiXon.createSpinOrbit","text":"createSpinOrbital(o::Orbit; up=true, msg=true)\n\nSpecify SpinOrbit with fields:\n\n.name: name\n.n: principal quantum number\n.n′: radial quantum number (number of nodes in radial wavefunction)\n.ℓ: orbital angular momentum valence electron\n.ms: spin magnetic quantum number\n\nExamples:\n\ns1s = castOrbit(1,0)\ncreateSpinOrbit(s1s; up=true)\n  SpinOrbit created: 1s↑ (n = 1, n′ = 0, ℓ = 0, ms = 1//2)\n  SpinOrbit(\"1s↑\", 1, 0, 0, 1//2)\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.createTerm-Tuple{Int64}","page":"Home","title":"CamiXon.createTerm","text":"createTerm(n::Int; ℓ=0, S=1//2, L=0, J=1//2, msg=true)\n\nSpecify Term in the Term notatation with fields:\n\n.n: principal quantum number\n.n′: radial quantum number (number of nodes - autogenerated)\n.ℓ: orbital angular momentum valence electron\n.S: total electron spin\n.L: total orbital angular momentum\n.J: total electronic angular momentum\n\nExamples:\n\nterm_H1I = createTerm(1; ℓ=0, S=1//2, L=0, J=1//2)\n Term created: 1s ²S₁⸝₂, n = 1, n′ = 0, ℓ = 0, S = 1//2, L = 0, J = 1//2\n Term(\"1s ²S₁⸝₂\", 1, 0, 0, 1//2, 0, 1//2)\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.bohrformula-Tuple{Int64, Int64}","page":"Home","title":"CamiXon.bohrformula","text":"bohrformula(Z::Int, n::Int)\n\nHydrogenic energy (in Hartree a.u.) for atom with atomic number Z and principal quantum number n.\n\n    E_n = - fracZ^22n^2\n\nExample:\n\nZ = 2\nn = 4\nbohrformula(Z,n)\n -0.125\n\n\n\n\n\n","category":"method"},{"location":"#Grid","page":"Home","title":"Grid","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Grid object is the backbone for the numerical procedure on a non-uniform grid. Its principal fields are grid.r and grid.r′, which are discrete functions of N elements representing the grid function and its derivative.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Grid{T}\ngridname(ID::Int)\ngridfunction(ID::Int, n::Int, h::T; p=5, coords=[0,1], deriv=0) where T <: Real\ncastGrid(ID::Int, N::Int, T::Type; h=1, r0=0.001,  p=5, coords=[0,1], epn=7, k=7, msg=true)\nautoRmax(atom::Atom, orbit::Orbit)\nautoNtot(orbit::Orbit)\nautoPrecision(Rmax::T, orbit::Orbit) where T<:Real\nautoSteps(ID::Int, Ntot::Int, Rmax::T; p=5, coords=[0,1]) where T<:Real\nautoGrid(atom::Atom, orbit::Orbit, codata::Codata, T::Type ; p=0, coords=[], Nmul=1, epn=7, k=7, msg=true)\ngrid_lagrange_derivative(f::Vector{T}, grid::Grid{T}; k=5) where T<:Real\ngrid_trapezoidal_integral(f::Vector{T}, n1::Int, n2::Int, grid::Grid{T}) where T<:Real","category":"page"},{"location":"#CamiXon.Grid","page":"Home","title":"CamiXon.Grid","text":"Grid(ID, name, T, N, r, r′, h, r0, epn, epw, k)\n\nType with fields:\n\n.ID:   grid identifer name (::Int)\n.name: grid identifer name (::String)\n.T:    gridType (::Type)\n.N:    number of grid points (::Int)\n.r:   tabulated grid function (::Vector{T})\n.r′:   tabulated derivative of grid function (::Vector{T})\n.h :   grid step multiplyer (::T)\n.r0:   grid scale factor (::T)\n.epn:  number of endpoints used for trapezoidal endpoint correction (must be odd) (::Int)\n.epw:  trapezoidal endpoint weights for n=1:epn (::Vector{Vector{T}})\n.k:    Adams-Moulton order (::Int)\n\nThe object Grid is best created with the function castGrid.\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.gridname-Tuple{Int64}","page":"Home","title":"CamiXon.gridname","text":"gridname(ID::Int)\n\nName corresponding to the grid ID.\n\nExample:\n\nn = gridname(2); println(\"The grid type with ID = 2 is called '$n'.\")\n  The grid type with ID = 2 is called 'quasi-exponential'.\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.gridfunction-Union{Tuple{T}, Tuple{Int64, Int64, T}} where T<:Real","page":"Home","title":"CamiXon.gridfunction","text":"gridfunction(ID::Int, n::Int, h::T; p=5, coords=[0,1], deriv=0) where T <: Real\n\nID = 1: exponential grid function,\n\n    fn = textexp(h(n-1)) - 10\n\nID = 2: quasi-exponential grid function (linear grid for p = 1),\n\n    fn = h(n-1) + frac12(h(n-1))^2 +  + frac1p(h(n-1))^p\n\nID = 3: polynomial grid function based on polynom c = c_1c_2 c_p,\n\n    fn = c_1h(n-1) + c_2(h(n-1))^2 +  + c_p(h(n-1))^p\n\nID = 4: linear grid function,\n\n    fn = (n-1) * h\n\nExamples:\n\nh = 0.1\nr = [gridfunction(1, n-1, h) for n=1:5]                            # exponential\n [0.0, 0.10517091807564771, 0.22140275816016985, 0.3498588075760032, 0.49182469764127035]\n\nr = [gridfunction(2, n-1, h; p = 4) for n=1:5]  # quasi exponential (degree p=4)\n [0.0, 0.10517083333333321, 0.22140000000000004, 0.3498375, 0.49173333333333336]\n\nr = [gridfunction(3, n-1, h; coords = [0,1,1/2,1/6,1/24]) for n=1:5]  # polynomial (degree p=4)\n [0.0, 0.10517083333333334, 0.2214, 0.3498375000000001, 0.49173333333333336]\n\nr = [gridfunction(4, n-1, h) for n=1:5]              # linear\n  [0.0, 0.1, 0.2, 0.3, 0.4]\n\nr′= [gridfunction(4, n-1, h; deriv=1) for n=1:5]     # linear (first derivative)\n   [0.1, 0.1, 0.1, 0.1, 0.1]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.castGrid-Tuple{Int64, Int64, Type}","page":"Home","title":"CamiXon.castGrid","text":"castGrid(ID::Int, N::Int, T::Type; h=1, r0=1,  p=5, coords=[0,1], epn=7, k=7, msg=true)\n\nMethod to create the Grid object\n\nID = 1: exponential grid, ID = 2: quasi-exponential grid, ID = 3: polynomial grid ID = 4: linear grid\n\nExamples:\n\nh = 0.1\nr0 = 1.0\ngrid = castGrid(1, 4, Float64; h, r0)\ngrid.r\n  create exponential Grid: Float64, Rmax = 0.491825 a.u., Ntot = 4, h = 0.1, r0 = 1.0\n  [0.0, 0.10517091807564771, 0.22140275816016985, 0.3498588075760032]\n\ngrid = castGrid(2, 4, Float64; p = 4, h, r0)\ngrid.r\n  create quasi-exponential Grid: Float64, Rmax = 0.491733 a.u., Ntot = 4, p = 4, h = 0.1, r0 = 1.0\n  [0.0, 0.10517083333333321, 0.22140000000000004, 0.3498375]\n\ngrid = castGrid(3, 4, Float64; coords=[0, 1, 1/2, 1/6, 1/24], h, r0)\ngrid.r\n  create polynomial Grid: Float64, Rmax = 0.491733 a.u., Ntot = 4, coords = [0.0, 1.0, 0.5, 0.166666, 0.0416666], h = 0.1, r0 = 1.0\n  [0.0, 0.10517083333333334, 0.2214, 0.3498375000000001]\n\ngrid = castGrid(4, 4, Float64; h, r0)\ngrid.r\n  create linear Grid: Float64, Rmax = 0.4 a.u., Ntot = 4, p = 1, h = 0.1, r0 = 1.0\n  [0.0, 0.1, 0.2, 0.3]\n\ngrid.r′\n  [0.1, 0.1, 0.1, 0.1]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.autoRmax-Tuple{Atom, Orbit}","page":"Home","title":"CamiXon.autoRmax","text":"autoRmax(atom::Atom, orbit::Orbit)\n\nLargest relevant radial distance in a.u. (rule of thumb value)\n\nExample:\n\ncodata = castCodata(2018)\natom = castAtom(Z=1, Q=0, M=1.00782503223, I=1//2, gI=5.585694713; msg=true)\norbit = castOrbit(n=1, ℓ=0)\nrmax = autoRmax(atom::Atom, orbit::Orbit); println(\"rmax = $(rmax) a.u.\")\n  Atom created: Hydrogen - ¹H (Z = 1, Zc = 1, Q = 0, M = 1.00782503223, I = 1//2, gI = 5.585694713)\n  Orbit created: 1s - (n = 1, n′ = 0, ℓ = 0)\n  rmax = 63.0 a.u.\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.autoNtot-Tuple{Orbit}","page":"Home","title":"CamiXon.autoNtot","text":"autoNtot(orbit::Orbit)\n\nTotal number of gridpoints (rule of thumb value)\n\nExample:\n\norbit = castOrbit(1,0)\nautoNtot(orbit)\n Orbit created: 1s - (n = 1, n′ = 0, ℓ = 0)\n\n 100\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.autoPrecision-Union{Tuple{T}, Tuple{T, Orbit}} where T<:Real","page":"Home","title":"CamiXon.autoPrecision","text":"autoPrecision(Rmax::T, orbit::Orbit) where T<:Real\n\nFloating point precision (rule of thumb value)\n\nExample:\n\natom = castAtom(1)\norbit = castOrbit(1,0)\nRmax = autoRmax(atom, orbit)\nautoPrecision(Rmax, orbit)\n Atom created: Hydrogen - ¹H (Z = 1, Zc = 1, Q = 0, M = 1.0, I = 1//2, gI = 5.5)\n Orbit created: 1s - (n = 1, n′ = 0, ℓ = 0)\n\n Float64\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.autoSteps-Union{Tuple{T}, Tuple{Int64, Int64, T}} where T<:Real","page":"Home","title":"CamiXon.autoSteps","text":"autoSteps(ID::Int, Ntot::Int, Rmax::T; p=5, coords=[0,1]) where T<:Real\n\nStep size parameter (h) and range parameter (r0) (rule of thumb values).\n\nExample:\n\n(h, r0) = autoSteps(1, 100, 100)\n (0.1, 0.004540199100968777)\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.autoGrid-Tuple{Atom, Orbit, Codata, Type}","page":"Home","title":"CamiXon.autoGrid","text":"autoGrid(atom::Atom, orbit::Orbit, codata::Codata, T::Type ; p=0, coords=[], Nmul=1, epn=7, k=7, msg=true)\n\nAutomatic setting of grid parameters. Important cases:\n\np=0 (exponential grid default)\np=1 (linear grid)\np>1 (quasi-exponential grid)\n\nExample:\n\nNB. plot_gridfunction is not part of the package\n\natom = castAtom(;Z=1, A=1, Q=0, msg=false)\norbit = castOrbit(n=75, ℓ=0, msg=false)\ncodata = castCodata(2018)\ngrid = autoGrid(atom, orbit, codata, Float64)\nplot_gridfunction(1:grid.N, grid; title=\"\")\n  create exponential Grid: Float64, Rmax = 16935.0 (a.u.), Ntot = 3800, h = 0.00263158, r0 = 0.768883\n\n(Image: Image)\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.grid_lagrange_derivative-Union{Tuple{T}, Tuple{Vector{T}, Grid{T}}} where T<:Real","page":"Home","title":"CamiXon.grid_lagrange_derivative","text":"grid_lagrange_derivative(f::Vector{T}, grid::Grid{T}; k=5) where T<:Real\n\nk^th-order lagrangian differentiation of the analytic function f, tabulated in forward order on a Grid of n points, f1   fn; m is the multiplier for intermediate positions (for m=1 without intermediate points).\n\nExample:\n\nID = 4 # linear grid\nf = [0.0, 1.0, 4.0, 9.0, 16.0, 25.0, 36.0, 49.0, 64.0, 81.0, 100.0]\ngrid = castGrid(ID, length(f), Float64; r0=1.0, h=1.0, k=3)  # linear grid\nf′= grid_lagrange_derivative(f, grid, k=4)\nf′= ceil.(f′;sigdigits=2); println(f′)\n  create linear Grid: Float64, Rmax = 11.0 (a.u.), Ntot = 11, p = 1, h = 1.0, r0 = 1.0\n  [0.0, 2.0, 4.0, 6.0, 8.1, 11.0, 12.0, 14.0, 17.0, 18.0, 20.0]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.grid_trapezoidal_integral-Union{Tuple{T}, Tuple{Vector{T}, Int64, Int64, Grid{T}}} where T<:Real","page":"Home","title":"CamiXon.grid_trapezoidal_integral","text":"grid_trapezoidal_integral(f::Vector{T}, n1::Int, n2::Int, grid::Grid{T}) where T<:Real\n\nIntegral of the function f=f_0 f_n tabulated on a Grid using the trapezoidal rule optimized with endpoint correction by the weightsvector grid.epw,\n\n    _0^r_n f(r) dr = _0^n f(x) r^prime(x) dx\n\nwhere the latter integral corresponds to the optimized trapezoidal rule for a uniform grid (see trapezoidal_integration). The rule is exact for polynonials of degree d=0 1 k-1, where k= grid.epn. For k=1 the rule reduces to the ordinary trapezoidal rule (weights = [1/2]).\n\nExample:\n\nf1s(r) = 2.0*r*exp(-r)  # hydrogen 1s wavefunction (reduced and unit normalized)\nN = 1000\ngrid = castGrid(1, N, Float64; h=0.01, r0=0.005)\nr = grid.r\nf2 = [f1s(r[n])^2 for n=1:N]\nnorm = grid_trapezoidal_integral(f2, 1:N, grid)\n  create exponential Grid: Float64, Rmax = 110.127 (a.u.), Ntot = 1000, h = 0.01, r0 = 0.005\n\n  1.0\n\n\n\n\n\n","category":"method"},{"location":"#Adams-Moulton-integration","page":"Home","title":"Adams-Moulton integration","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Adams-Moulton method is used for numerical integration of the reduces radial wave equation. In the present implementation it is constructed on top the objects Atom, Orbit, Grid, Def and Adams using 5 globally defined instances called atom, orbit, grid, def and adams.","category":"page"},{"location":"#Pos","page":"Home","title":"Pos","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Pos object serves within Def object to contain the position indices def.Na, def.Nb, def.Nlctp, def.Nmin, def.Nuctp used in Adams-Moulton integration. These positions are contained in the fields def.pos.Na, def.pos.Nb, def.pos.Nlctp, def.pos.Nmin, def.pos.Nuctp. Alternatively, they can be determined with the functions get_Na, get_Nb, get_Nlctp, get_Nmin, get_Nuctp.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pos","category":"page"},{"location":"#CamiXon.Pos","page":"Home","title":"CamiXon.Pos","text":"Pos(Na::Int, Nlctp::Int, Nmin::Int, Nuctp::Int, Nb::Int, N::Int, nodes::Int)\n\nType with fields:\n\n.Na: grid index of last leading point (::Int)\n.Nlctp: grid index of classical turning point (::Int)\n.Nmin: grid index of (screened) potential minimum (::Int)\n.Nuctp: grid index of classical turning point (::Int)\n.Nb: grid index first trailing point (::Int)\n.N: grid index last point (::Int)\n.nodes: number of nodes  (::Int)\n\nMutable struct to hold special grid indices as well as the number of nodes; Pos is one of the fields of the Def object\n\nExamples:\n\npos = Pos(1, 2, 3, 4, 5, 6, 7)\npos.Nuctp\n 4\n\npos.Nuctp = 8\npos\n Pos(1, 2, 3, 8, 5, 6, 7)\n\n\n\n\n\n","category":"type"},{"location":"#Def","page":"Home","title":"Def","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Def object serves to define the problem to be solved and to contain in the field def.Z the solution as a discrete function of N elements.","category":"page"},{"location":"#Illustration:-central-field-potential-U_{\\mathrm{CF}}-versus-grid-index","page":"Home","title":"Illustration: central field potential U_mathrmCF versus grid index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NB. plot_potentials is not part of the package","category":"page"},{"location":"","page":"Home","title":"Home","text":"atom = castAtom(Z=1, Q=0, M=1.00782503223, I=1//2, gI=5.585694713)\norbit = castOrbit(n=7, ℓ=2)\ncodata = castCodata(2018)\ngrid = autoGrid(atom, orbit, codata, Float64)\ndef = castDef(grid, atom, orbit)\nE = convert(grid.T,bohrformula(atom.Z, orbit.n))\n@printf \"E = %.15g %s \\n\" E \"Hartree\"\nadams = castAdams(E, grid, def)\nplot_potentials(E, grid, def)\n  Atom created: Hydrogen - ¹H (Z = 1, Zc = 1, Q = 0, M = 1.00782503223, I = 1//2, gI = 5.585694713)\n  Orbit created: 7d - (n = 7, n′ = 4, ℓ = 2)\n  create exponential Grid: Float64, Rmax = 207.0 (a.u.), Ntot = 400, h = 0.025, r0 = 0.00939821\n  E = -0.0102040816326531 Hartree\n  Nlctp = 234, Nmin = 259, Nuctp = 369 (Ructp = 93.0059202490 a.u.)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Image)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Def{T}\ncastDef(grid::Grid{T}, atom::Atom, orbit::Orbit) where T <: Real\ninitE(def::Def{T}; E=nothing) where T<:Real\nget_Na(Z::Vector{Complex{T}}, def::Def{T}) where T<:Real\nget_Nb(Z::Vector{Complex{T}}, def::Def{T}) where T<:Real\nget_Nlctp(E::T, def::Def{T}) where T<:Real\nget_Nmin(def::Def{T}) where T<:Real\nget_Nuctp(E::T, def::Def{T}) where T<:Real\nget_nodes(Z::Vector{Complex{T}}, def::Def{T}) where T<:Real","category":"page"},{"location":"#CamiXon.Def","page":"Home","title":"CamiXon.Def","text":"Def(T, atom, orbit, pot, scr, o1, o2, o3, pos, epn, k, am, matLD)\n\nType with fields:\n\n.T: gridType (::Type)\n.atom: atom object (::Atom)\n.orbit: orbit object (::Orbit)\n.pot: tabulated potential function (::Vector{T})\n.scr: tabulated screening function (::Vector{T})\n.o1: vector of zero-filled matrices (::Vector{Matrix{T}})\n.o2: vector of zero-filled matrices (::Vector{Matrix{T}})\n.o3: vector of unit-filled matrices (::Vector{Matrix{T}})\n.pos: object containing Na, Nlctp, Nmin, Nuctp, Nb, N and nodes (::Pos)\n.epn: number of endpoints trapezoidal correction - must be odd (::Int)\n.k: Adams-Moulton order (::Int)\n.am: Adams-Moulton weight coefficients (::Vector{T})\n.matLD: Lagrangian differentiation matrix (::Matrix{T})\n\nThe object Def is best created with the function castDef.\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.castDef-Union{Tuple{T}, Tuple{Grid{T}, Atom, Orbit}} where T<:Real","page":"Home","title":"CamiXon.castDef","text":"castDef(grid::Grid{T}, atom::Atom, orbit::Orbit) where T <: Real\n\nCreate the Def object starting from the Grid object and the atomic properties of the objects Atom and Orbit. \n\nExample:\n\natom = castAtom(Z=1, Q=0, M=1.00782503223, I=1//2, gI=5.585694713)\norbit = castOrbit(n=7, ℓ=2)\ncodata = castCodata(2018)\ngrid = autoGrid(atom, orbit, codata, Float64)\ndef = castDef(grid, atom, orbit);\n    Atom created: Hydrogen - ¹H (Z = 1, Zc = 1, Q = 0, M = 1.00782503223, I = 1//2, gI = 5.585694713)\n    Orbit created: 7d - (n = 7, n′ = 4, ℓ = 2)\n    Grid created: exponential, Float64, Rmax = 207.0 (a.u.), Ntot = 400, h = 0.025, r0 = 0.00939821\n    Def created for Hydrogen 7d on exponential grid in Float64\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.initE-Union{Tuple{Def{T}}, Tuple{T}} where T<:Real","page":"Home","title":"CamiXon.initE","text":"initE(def::Def{T}; E=nothing) where T<:Real\n\nAutogenerated seed value for the energy (default: no manual E seed)\n\nExample:\n\ncodata = castCodata(2018)\natom = castAtom(Z=1, Q=0, M=1.00782503223, I=1//2, gI=5.585694713)\norbit = castOrbit(n=1, ℓ=0)\nEcal = convert(Float64, bohrformula(atom.Z, orbit.n))\ngrid = autoGrid(atom, orbit, codata; msg=false)\ndef = castDef(grid, atom, orbit)\n  Atom created: Hydrogen - ¹H (Z = 1, Zc = 1, Q = 0, M = 1.00782503223, I = 1//2, gI = 5.585694713)\n  Orbit created: 1s - (n = 1, n′ = 0, ℓ = 0)\n\nE = initE(def); println(\"E = $E\")\n  E = -0.03508495857961283\n\nE = initE(def; E=Ecal); println(\"E = $E\")\n  E = -0.5\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.get_Na-Union{Tuple{T}, Tuple{Array{Complex{T}, 1}, Def{T}}} where T<:Real","page":"Home","title":"CamiXon.get_Na","text":"get_Na(Z::Vector{Complex{T}}, def::Def{T}) where T<:Real\n\nGrid index of the starting point for outward numerical integration. This is the first point where the integration threshold value (1.0e-10) is exceeded.\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.get_Nb-Union{Tuple{T}, Tuple{Array{Complex{T}, 1}, Def{T}}} where T<:Real","page":"Home","title":"CamiXon.get_Nb","text":"get_Nb(Z::Vector{Complex{T}}, def::Def{T}) where T<:Real\n\nGrid index of the stopping for outward numerical integration. This is the last point where the integration threshold value (1.0e-10) is exceeded.\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.get_Nlctp-Union{Tuple{T}, Tuple{T, Def{T}}} where T<:Real","page":"Home","title":"CamiXon.get_Nlctp","text":"get_Nlctp(E::T, def::Def{T}) where T<:Real\n\nGrid index of the *lower classical turning point * of the screened potential curve. By definition get_Nlctp(E, def) = 2 for zero orbital angular momentum (ℓ=0).\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.get_Nmin-Union{Tuple{Def{T}}, Tuple{T}} where T<:Real","page":"Home","title":"CamiXon.get_Nmin","text":"get_Nmin(def::Def{T}) where T<:Real\n\nGrid index of the minimum of the screened potential curve. By definition get_Nmin(def) = 1 for zero orbital angular momentum (ℓ=0).\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.get_Nuctp-Union{Tuple{T}, Tuple{T, Def{T}}} where T<:Real","page":"Home","title":"CamiXon.get_Nuctp","text":"get_Nuctp(E::T, def::Def{T}) where T<:Real\n\nGrid index of the upper classical turning point of the screened potential curve. By definition get_Nuctp(E, def) = N-1 for zero orbital angular momentum (ℓ=0).\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.get_nodes-Union{Tuple{T}, Tuple{Array{Complex{T}, 1}, Def{T}}} where T<:Real","page":"Home","title":"CamiXon.get_nodes","text":"get_nodes(Z::Vector{Complex{T}}, def::Def{T}) where T<:Real\n\nNumber of nodes (excluding the origin) of the reduced radial wavefunction χ(r) = real(Z).\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"matG(E::T, grid::Grid{T}, def::Def{T}) where T<:Real\nmatσ(E::T, grid::Grid{T}, def::Def{T}) where T<:Real\nmatMinv(E::T, grid::Grid{T}, def::Def{T}, amEnd::T) where T<:Real\nOUTSCH(grid::Grid{T}, def::Def{T}, σ::Vector{Matrix{T}}) where T<:Real\nOUTSCH_WKB(E::T, grid::Grid{T}, def::Def{T}) where T<:Real","category":"page"},{"location":"#CamiXon.matG-Union{Tuple{T}, Tuple{T, Grid{T}, Def{T}}} where T<:Real","page":"Home","title":"CamiXon.matG","text":"matG(E::T, grid::Grid{T}, def::Def{T}) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.matσ-Union{Tuple{T}, Tuple{T, Grid{T}, Def{T}}} where T<:Real","page":"Home","title":"CamiXon.matσ","text":"matσ(E::T, grid::Grid{T}, def::Def{T}) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.matMinv-Union{Tuple{T}, Tuple{T, Grid{T}, Def{T}, T}} where T<:Real","page":"Home","title":"CamiXon.matMinv","text":"matMinv(E::T, grid::Grid{T}, def::Def{T}, amEnd::T) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.OUTSCH-Union{Tuple{T}, Tuple{Grid{T}, Def{T}, Array{Matrix{T}, 1}}} where T<:Real","page":"Home","title":"CamiXon.OUTSCH","text":"OUTSCH(grid::Grid{T}, def::Def{T}, σ::Vector{Matrix{T}}) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.OUTSCH_WKB-Union{Tuple{T}, Tuple{T, Grid{T}, Def{T}}} where T<:Real","page":"Home","title":"CamiXon.OUTSCH_WKB","text":"OUTSCH_WKB(E::T, grid::Grid{T}, def::Def{T}) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"#Adams","page":"Home","title":"Adams","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Adams object serves to hold the Adams-Moulton integration matrices matG, matσ, matMinv as well as the actual normalized solution Z in the form of a tabulated function of N elements.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Adams\ncastAdams(E::T, grid::Grid{T}, def::Def{T}) where T<:Real\nupdateAdams!(adams::Adams{T}, E, grid::Grid{T}, def::Def{T}) where T<:Real\nINSCH(E::T, grid::Grid{T}, def::Def{T}, adams::Adams{T}) where T<:Real\nadams_moulton_inward(E::T, grid::Grid{T}, def::Def{T}, adams::Adams{T}) where T<:Real\nadams_moulton_outward(def::Def{T}, adams::Adams{T}) where T<:Real\nadams_moulton_normalized(Z::Vector{Complex{T}}, ΔQ::T, grid::Grid{T}, def::Def{T}) where T<:Real\nsolve_adams_moulton(E::T, grid::Grid{T}, def::Def{T}, adams::Adams) where T<:Real","category":"page"},{"location":"#CamiXon.Adams","page":"Home","title":"CamiXon.Adams","text":"Adams\n\nG: (:Vector{Matrix{T}})\nσ: (:Vector{Matrix{T}})\nMinv: (:Vector{Matrix{T}})\nZ: (:Vector{Complex{T}})\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.castAdams-Union{Tuple{T}, Tuple{T, Grid{T}, Def{T}}} where T<:Real","page":"Home","title":"CamiXon.castAdams","text":"castAdams(E::T, grid::Grid{T}, def::Def{T}) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.updateAdams!-Union{Tuple{T}, Tuple{Adams{T}, Any, Grid{T}, Def{T}}} where T<:Real","page":"Home","title":"CamiXon.updateAdams!","text":"updateAdams!(adams::Adams{T}, E, grid::Grid{T}, def::Def{T}) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.INSCH-Union{Tuple{T}, Tuple{T, Grid{T}, Def{T}, Adams{T}}} where T<:Real","page":"Home","title":"CamiXon.INSCH","text":"INSCH(E::T, grid::Grid{T}, def::Def{T}, adams::Adams{T}) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.adams_moulton_inward-Union{Tuple{T}, Tuple{T, Grid{T}, Def{T}, Adams{T}}} where T<:Real","page":"Home","title":"CamiXon.adams_moulton_inward","text":"adams_moulton_inward(E::T, grid::Grid{T}, def::Def{T}, adams::Adams{T}) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.adams_moulton_outward-Union{Tuple{T}, Tuple{Def{T}, Adams{T}}} where T<:Real","page":"Home","title":"CamiXon.adams_moulton_outward","text":"adams_moulton_outward(def::Def{T}, adams::Adams{T}) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.adams_moulton_normalized-Union{Tuple{T}, Tuple{Array{Complex{T}, 1}, T, Grid{T}, Def{T}}} where T<:Real","page":"Home","title":"CamiXon.adams_moulton_normalized","text":"adams_moulton_normalized(Z::Vector{Complex{T}}, ΔQ::T, grid::Grid{T}, def::Def{T}) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.solve_adams_moulton-Union{Tuple{T}, Tuple{T, Grid{T}, Def{T}, Adams}} where T<:Real","page":"Home","title":"CamiXon.solve_adams_moulton","text":"solve_adams_moulton(E::T, grid::Grid{T}, def::Def{T}, adams::Adams) where T<:Real\n\n\n\n\n\n","category":"method"},{"location":"#FITS","page":"Home","title":"FITS","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FITS stands for 'Flexible Image Transport System'. This is an open standard origionally developed for the astronomy community to store telescope images together with tables of spectral information. Over the years it has developed into a scientific standard - http://fits.gsfc.nasa.gov/iaufwg.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Within CamiXon only the basic FITS functionality is implemented for users not requiring celestal coordinates. The user can create, read and extend .fits files as well as create, edit and delete user-defined metainformation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A FITS file consists of a sequence of one or more header-data-units (HDUs), each containing a data block preceeded by header records of metainformation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"By the command f = fits_read(filnam) we asign a collection of FITS_HDU objects from the file filnam to the variable f.","category":"page"},{"location":"#FITS-Types","page":"Home","title":"FITS - Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FITS_HDU{T,V}\nFITS_header\nFITS_data\nFITS_table\nFITS_name","category":"page"},{"location":"#CamiXon.FITS_HDU","page":"Home","title":"CamiXon.FITS_HDU","text":"FITS_HDU{T,V}\n\nObject to hold a single \"Header-Data Unit\" (HDU).\n\nThe fields are\n\n.filename:  name of the corresponding FITS file (::String)\n.hduindex::  identifier (a file may contain more than one HDU) (:Int)\n.header:  the header object where T=FITS_header (::T)\n.dataobject:  the data object where V=FITS_data (::V)\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.FITS_header","page":"Home","title":"CamiXon.FITS_header","text":"FITS_header\n\nObject to hold the header information of a FITS_HDU.\n\nThe fields are:\n\n.hduindex:  identifier (a file may contain more than one HDU) (::Int)\n.records:  the header formated as an array of strings of 80 ASCII characters (::Array{String,1})\n.keys:  keys[i] - key corresponding to records[i] (record of index i)  (::Array{String,1})\n.values:  value[i] - corresponding to records[i]  (::Array{Any,1})\n.comments:  comments[i] - comment corresponding to records[i] (::String)\n.dict:  Dictionary key[i] => value[i] (::Dict{String,Any})\n.maps:  Dictionary key[i] => i (::Dict{String,Int})\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.FITS_data","page":"Home","title":"CamiXon.FITS_data","text":"FITS_data\n\nObject to hold the data of the FITS_HDU of given hduindex and hdutype.\n\nThe fields are:\n\n.hduindex:  identifier (a file may contain more than one HDU) (::Int)\n.hdutype:  accepted types are 'PRIMARY', 'IMAGE' and 'TABLE' (::String)\n.data:  in the from appropriate for the hdutype (::Any)\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.FITS_table","page":"Home","title":"CamiXon.FITS_table","text":"FITS_table\n\nObject to hold the data of a TABLE HDU (a FITS_HDU for ASCII tables). It contains the data in the form of records (rows) of ASCII strings.\n\nThe fields are:\n\n.hduindex:  identifier (a file may contain more than one HDU) (::Int)\n.rows:  the table formated as an array of rows of ASCII strings (::Array{String,1})\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.FITS_name","page":"Home","title":"CamiXon.FITS_name","text":"FITS_name\n\nFITS object to hold the decomposed name of a .fits file.\n\nThe fields are:\n\n.name:  for 'p#.fits' this is 'p#.fits' (::String)\n.prefix:  for 'p#.fits' this is 'p' (::String)\n.numerator:  for 'p#.fits' this is '#', a serial number (e.g., '3') or a range (e.g., '3-7') (::String)\n.extension:  for 'p#.fits' this is '.fits' (::String)\n\n\n\n\n\n","category":"type"},{"location":"#FITS-HDU-Methods","page":"Home","title":"FITS - HDU Methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"fits_info(hdu::FITS_HDU)\nparse_FITS_TABLE(hdu::FITS_HDU)","category":"page"},{"location":"#CamiXon.fits_info-Tuple{FITS_HDU}","page":"Home","title":"CamiXon.fits_info","text":"fits_info(hdu)\n\nPrint metafinformation and data of given FITS_HDU\n\nExample:\n\nstrExample = \"remove.fits\"\ndata = [11,21,31,12,22,23,13,23,33]\ndata = reshape(data,(3,3,1))\nfits_create(strExample, data; protect=false)\n\nf = fits_read(strExample)\nfits_info(f[1])\n\n  File: remove.fits\n  hdu: 1\n  hdutype: PRIMARY\n  DataType: Int64\n  Datasize: (3, 3, 1)\n\n  Metainformation:\n  SIMPLE  =                    T / file does conform to FITS standard\n  BITPIX  =                   64 / number of bits per data pixel\n  NAXIS   =                    3 / number of data axes\n  NAXIS1  =                    3 / length of data axis 1\n  NAXIS2  =                    3 / length of data axis 2\n  NAXIS3  =                    1 / length of data axis 3\n  BZERO   =                  0.0 / offset data range to that of unsigned integer\n  BSCALE  =                  1.0 / default scaling factor\n  EXTEND  =                    T / FITS dataset may contain extensions\n  COMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov/iaufwg\n  END\n\n  3×3×1 Array{Int64, 3}:\n  [:, :, 1] =\n   11  12  13\n   21  22  23\n   31  23  33\n\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.parse_FITS_TABLE-Tuple{FITS_HDU}","page":"Home","title":"CamiXon.parse_FITS_TABLE","text":"parse_FITS_TABLE(hdu)\n\nParse FITS_TABLE (ASCII table) into a Vector of its columns for further processing by the user. Default formatting in ISO 2004 FORTRAN data format specified by keys \"TFORMS1\" - \"TFORMSn\"). Display formatting in ISO 2004 FORTRAN data format (\"TDISP1\" - \"TDISPn\") prepared for user editing.\n\nExample:\n\nstrExample = \"example.fits\"\ndata = [10, 20, 30]\nfits_create(strExample, data; protect=false)\n\nt1 = Float16[1.01E-6,2.0E-6,3.0E-6,4.0E-6,5.0E-6]\nt2 = [0x0000043e, 0x0000040c, 0x0000041f, 0x0000042e, 0x0000042f]\nt3 = [1.23,2.12,3.,4.,5.]\nt4 = ['a','b','c','d','e']\nt5 = [\"a\",\"bb\",\"ccc\",\"dddd\",\"ABCeeaeeEEEEEEEEEEEE\"]\ndata = [t1,t2,t3,t4,t5]\nfits_extend(strExample, data, \"TABLE\")\n\nf = fits_read(strExample)\nd = f[2].header.dict\nd = [get(d,\"TFORM$i\",0) for i=1:5]; println(strip.(d))\n  SubString{String}[\"'E6.1    '\", \"'I4      '\", \"'F4.2    '\", \"'A1      '\", \"'A20     '\"]\n\nf[2].dataobject.data                            # this is the table hdu\n  5-element Vector{String}:\n   \"1.0e-6 1086 1.23 a a                    \"\n   \"2.0e-6 1036 2.12 b bb                   \"\n   \"3.0e-6 1055 3.0  c ccc                  \"\n   \"4.0e-6 1070 4.0  d dddd                 \"\n   \"5.0e-6 1071 5.0  e ABCeeaeeEEEEEEEEEEEE \"\n\nparse_FITS_TABLE(f[2])\n  5-element Vector{Vector{T} where T}:\n   [1.0e-6, 2.0e-6, 3.0e-6, 4.0e-6, 5.0e-6]\n   [1086, 1036, 1055, 1070, 1071]\n   [1.23, 2.12, 3.0, 4.0, 5.0]\n   [\"a\", \"b\", \"c\", \"d\", \"e\"]\n   [\"a                   \", \"bb                  \", \"ccc                 \", \"dddd                \", \"ABCeeaeeEEEEEEEEEEEE\"]\n\n\n\n\n\n","category":"method"},{"location":"#FITS-File-Methods","page":"Home","title":"FITS - File Methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"cast_FITS_name(filename::String)\nfits_combine(filnamFirst::String, filnamLast::String; protect=true)\nfits_copy(filenameA::String, filenameB::String=\" \"; protect=true)\nfits_create(filename::String, data=[]; protect=true)\nfits_extend(filename::String, data_extend, hdutype=\"IMAGE\")\nfits_read(filename::String)","category":"page"},{"location":"#CamiXon.cast_FITS_name-Tuple{String}","page":"Home","title":"CamiXon.cast_FITS_name","text":"cast_FITS_name(filename::String)\n\nDecompose the FITS filename 'filnam.fits' into its name, prefix, numerator and extension.\n\nExamples:\n\nstrExample = \"T23.01.fits\"\nf = cast_FITS_name(strExample)\nFITS_name(\"T23.01\", \"T23.\", \"01\", \".fits\")\n\nf.name, f.prefix, f.numerator, f.extension\n(\"T23.01\", \"T23.\", \"01\", \".fits\")\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.fits_combine-Tuple{String, String}","page":"Home","title":"CamiXon.fits_combine","text":"fits_combine(strFirst, strLast [; protect=true])\n\nCopy \"filenameFirst\" to \"filenameLast\" (with mandatory \".fits\" extension)\n\nKey:\n\nprotect::Bool: overwrite protection\n\nExample:\n\nfits_combine(\"T01.fits\", \"T22.fits\")\n  'T01-T22.fits': file created\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.fits_copy","page":"Home","title":"CamiXon.fits_copy","text":"fits_copy(filenameA [, filenameB=\"\" [; protect=true]])\n\nCopy \"filenameA\" to \"filenameB\" (with mandatory \".fits\" extension) Key:\n\nprotect::Bool: overwrite protection\n\nExamples:\n\nfits_copy(\"T01.fits\")\n  'T01.fits' was saved as 'T01 - Copy.fits'\n\nfits_copy(\"T01.fits\", \"T01a.fits\")\n  FitsError: 'T01a.fits' in use (set ';protect=false' to lift overwrite protection)\n\nfits_copy(\"T01.fits\", \"T01a.fits\"; protect=false)\n  'T01.fits' was saved as 'T01a.fits'\n\n\n\n\n\n","category":"function"},{"location":"#CamiXon.fits_create","page":"Home","title":"CamiXon.fits_create","text":"fits_create(filename [, data [; protect=true]])\n\nCreate FITS file of given filename [, optional data block [, default overwrite protection]] and return Array of HDUs. Key:\n\nprotect::Bool: overwrite protection\n\nExamples:\n\nstrExample = \"minimal.fits\"\nfits_create(strExample;protect=false)\n\nf = fits_read(strExample)\na = f[1].dataobject.data\nb = f[1].header.keys\nprintln(a);println(b)\n  Any[]\n  [\"SIMPLE\", \"NAXIS\", \"EXTEND\", \"COMMENT\", \"END\"]\n\nstrExample = \"remove.fits\"\ndata = [11,21,31,12,22,23,13,23,33]\ndata = reshape(data,(3,3,1))\nfits_create(strExample, data; protect=false)\n\nf = fits_read(strExample)\nfits_info(f[1])\n\n  File: remove.fits\n  hdu: 1\n  hdutype: PRIMARY\n  DataType: Int64\n  Datasize: (3, 3, 1)\n\n  Metainformation:\n  SIMPLE  =                    T / file does conform to FITS standard\n  BITPIX  =                   64 / number of bits per data pixel\n  NAXIS   =                    3 / number of data axes\n  NAXIS1  =                    3 / length of data axis 1\n  NAXIS2  =                    3 / length of data axis 2\n  NAXIS3  =                    1 / length of data axis 3\n  BZERO   =                  0.0 / offset data range to that of unsigned integer\n  BSCALE  =                  1.0 / default scaling factor\n  EXTEND  =                    T / FITS dataset may contain extensions\n  COMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov/iaufwg\n  END\n\n  3×3×1 Array{Int64, 3}:\n  [:, :, 1] =\n   11  12  13\n   21  22  23\n   31  23  33\n\n\n\n\n\n","category":"function"},{"location":"#CamiXon.fits_extend","page":"Home","title":"CamiXon.fits_extend","text":"fits_extend(filename, data_extend, hdutype=\"IMAGE\")\n\nExtend the FITS file of given filename with the data of hdutype from data_extend  and return Array of HDUs.\n\nExamples:\n\nstrExample = \"test_example.fits\"\ndata = [0x0000043e, 0x0000040c, 0x0000041f]\nfits_create(strExample, data, protect=false)\n\nf = fits_read(strExample)\na = Float16[1.01E-6,2.0E-6,3.0E-6,4.0E-6,5.0E-6]\nb = [0x0000043e, 0x0000040c, 0x0000041f, 0x0000042e, 0x0000042f]\nc = [1.23,2.12,3.,4.,5.]\nd = ['a','b','c','d','e']\ne = [\"a\",\"bb\",\"ccc\",\"dddd\",\"ABCeeaeeEEEEEEEEEEEE\"]\ndata = [a,b,c,d,e]\nfits_extend(strExample, data, \"TABLE\")\n\nf = fits_read(strExample)\nf[2].dataobject.data\n  5-element Vector{String}:\n   \"1.0e-6 1086 1.23 a a                    \"\n   \"2.0e-6 1036 2.12 b bb                   \"\n   \"3.0e-6 1055 3.0  c ccc                  \"\n   \"4.0e-6 1070 4.0  d dddd                 \"\n   \"5.0e-6 1071 5.0  e ABCeeaeeEEEEEEEEEEEE \"\n\nrm(strExample); f = data = a = b = c = d = e = nothing\n\n\n\n\n\n","category":"function"},{"location":"#CamiXon.fits_read-Tuple{String}","page":"Home","title":"CamiXon.fits_read","text":"fits_read(filename)\n\nRead FITS file and return Array of FITS_HDUs\n\nExample:\n\nstrExample = \"minimal.fits\"\nfits_create(strExample;protect=false)\n\nf = fits_read(strExample)\nf[1].dataobject.data\n  Any[]\n\nrm(strExample); f = nothing\n\n\n\n\n\n","category":"method"},{"location":"#FITS-Key-Methods","page":"Home","title":"FITS - Key Methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"fits_add_key(filename::String, hduindex::Int, key::String, val::Real, com::String)\nfits_delete_key(filename::String, hduindex::Int, key::String)\nfits_edit_key(filename::String, hduindex::Int, key::String, val::Real, com::String)\nfits_rename_key(filename::String, hduindex::Int, keyold::String, keynew::String)","category":"page"},{"location":"#CamiXon.fits_add_key-Tuple{String, Int64, String, Real, String}","page":"Home","title":"CamiXon.fits_add_key","text":"fits_add_key(filename, hduindex, key, value, comment)\n\nAdd a header record of given 'key, value and comment' to 'HDU[hduindex]' of file with name 'filename'\n\nExample:\n\nstrExample=\"minimal.fits\"\nfits_create(strExample;protect=false)\nfits_add_key(strExample, 1, \"KEYNEW1\", true, \"FITS dataset may contain extension\")\n\nf = fits_read(strExample)\nfits_info(f[1])\n\n  File: minimal.fits\n  hdu: 1\n  hdutype: PRIMARY\n  DataType: Any\n  Datasize: (0,)\n\n  Metainformation:\n  SIMPLE  =                    T / file does conform to FITS standard\n  NAXIS   =                    0 / number of data axes\n  EXTEND  =                    T / FITS dataset may contain extensions\n  COMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov/iaufwg\n  KEYNEW1 =                    T / FITS dataset may contain extension\n  END\n\n  Any[]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.fits_delete_key-Tuple{String, Int64, String}","page":"Home","title":"CamiXon.fits_delete_key","text":"fits_delete_key(filename, hduindex, key)\n\nDelete a header record of given key, value and comment to FITS_HDU[hduindex] of file with name  'filename'\n\nExamples:\n\nstrExample=\"minimal.fits\"\nfits_create(strExample;protect=false)\nfits_add_key(strExample, 1, \"KEYNEW1\", true, \"this is record 5\")\n\nf = fits_read(strExample)\nget(f[1].header.maps,\"KEYNEW1\",0)\n  5\n\nfits_delete_key(strExample, 1, \"KEYNEW1\")\n\nf = fits_read(strExample)\nget(f[1].header.maps,\"KEYNEW1\",0)\n  0\n\nfits_delete_key(filnam, 1, \"NAXIS\")\n 'NAXIS': cannot be deleted (key protected under FITS standard)\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.fits_edit_key-Tuple{String, Int64, String, Real, String}","page":"Home","title":"CamiXon.fits_edit_key","text":"fits_edit_key(filename, hduindex, key, value, comment)\n\nEdit a header record of given 'key, value and comment' to 'HDU[hduindex]' of file with name 'filename'\n\nExample:\n\ndata = DateTime(\"2020-01-01T00:00:00.000\")\nstrExample=\"minimal.fits\"\nfits_create(strExample;protect=false)\nfits_add_key(strExample, 1, \"KEYNEW1\", true, \"this is record 5\")\nfits_edit_key(strExample, 1, \"KEYNEW1\", data, \"record 5 changed to a DateTime type\")\n\nf = fits_read(strExample)\nfits_info(f[1])\n\n  File: minimal.fits\n  hdu: 1\n  hdutype: PRIMARY\n  DataType: Any\n  Datasize: (0,)\n\n  Metainformation:\n  SIMPLE  =                    T / file does conform to FITS standard\n  NAXIS   =                    0 / number of data axes\n  EXTEND  =                    T / FITS dataset may contain extensions\n  COMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov/iaufwg\n  KEYNEW1 = '2020-01-01T00:00:00' / record 5 changed to a DateTime type\n  END\n\n  Any[]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.fits_rename_key-Tuple{String, Int64, String, String}","page":"Home","title":"CamiXon.fits_rename_key","text":"fits_rename_key(filename, hduindex, keyold, kewnew)\n\nRename the key of a header record of file with name 'filename'\n\nExample:\n\nstrExample=\"minimal.fits\"\nfits_create(strExample;protect=false)\nfits_add_key(strExample, 1, \"KEYNEW1\", true, \"this is record 5\")\nfits_rename_key(strExample, 1, \"KEYNEW1\",  \"KEYNEW2\")\n\nf = fits_read(strExample)\nfits_info(f[1])\n\n  File: minimal.fits\n  hdu: 1\n  hdutype: PRIMARY\n  DataType: Any\n  Datasize: (0,)\n\n  Metainformation:\n  SIMPLE  =                    T / file does conform to FITS standard\n  NAXIS   =                    0 / number of data axes\n  EXTEND  =                    T / FITS dataset may contain extensions\n  COMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov/iaufwg\n  KEYNEW2 =                    T / this is record 5\n  END\n\n  Any[]\n\n\n\n\n\n","category":"method"},{"location":"#FORTRAN","page":"Home","title":"FORTRAN","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FORTRAN_format\ncast_FORTRAN_format(str::String)\ncast_FORTRAN_datatype(str::String)","category":"page"},{"location":"#CamiXon.FORTRAN_format","page":"Home","title":"CamiXon.FORTRAN_format","text":"FORTRAN_format\n\nObject to hold a FORTRAN format specifier decomposed in its fields.\n\nAccepted datatype specifiers are:  Aw,  Iw,  Fw.d,  Ew.d,  Dw.d\n\nAccepted output formating specifiers are: Aw,  Iw.m,  Bw.m,  Ow.m, Zw.m,  Fw.d,  Ew.dEe,  ENw.d,  ESw.d,  Gw.dEe,  Dw.dEe. Notation: w - width, m (optional) - minimum number of digits, d - number of digits to right of decimal, e - number of digits in exponent N/S (optional) indicates engineering/scientific formating of the E type.\n\nThe fields are:\n\n.Type: primary FORTRAN datatype (::String)\n.TypeChar: primary FORTRAN datatype character (::Char)\n.EngSci: secundary datatype character - N for engineering/ S for scientific (::Union{Char,Nothing})\n.width: width of numeric field (::Int)\n.nmin: minimum number of digits displayed (::Int)\n.ndec: number of digits to right of decimal (::Int)\n.nexp: number of digits in exponent (::Int)\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.cast_FORTRAN_format-Tuple{String}","page":"Home","title":"CamiXon.cast_FORTRAN_format","text":"cast_FORTRAN_format(format::String)\n\nDecompose the format specifier format into its fields and cast this into the FORTRAN_format object. Allowed format specifiers are of the types: Aw, Iw.m, Bw.m, Ow.m, Zw.m, Fw.d, Ew.dEe, ENw.d, ESw.d, Gw.dEe, Dw.dEe, with: w - width, m(optional) - minimum number of digits, d - number of digits to right of decimal, e - number of digits in exponent; N/S (optional) indicates engineering/scientific formating of the E type.\n\nExamples:\n\nf = cast_FORTRAN_format(\"I10\")\n  FORTRAN_format(\"Iw\", 'I', nothing, 10, 0, 0, 0)\n\nf = cast_FORTRAN_format(\"I10.12\")\n  FORTRAN_format(\"Iw.m\", 'I', nothing, 10, 12, 0, 0)\n\nf = cast_FORTRAN_format(\"E10.5E3\")\n  FORTRAN_format(\"Ew.dEe\", 'E', nothing, 10, 0, 5, 3)\n\nf.Type, f.TypeChar, f.EngSci, f.width, f.nmin, f.ndec, f.nexp\n  (\"Ew.dEe\", 'E', nothing, 10, 0, 5, 3)\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.cast_FORTRAN_datatype-Tuple{String}","page":"Home","title":"CamiXon.cast_FORTRAN_datatype","text":"cast_FORTRAN_datatype(format::String)\n\nDecompose the format specifier format into its fields and cast this into the FORTRAN_format object. Allowed format specifiers are of the types: Aw, Iw, Fw.d, Ew.d, Dw.d, where: w - width, d - number of digits to right of decimal point.\n\nExamples:\n\nf = cast_FORTRAN_datatype(\"I10\")\n  FORTRAN_format(\"Iw\", 'I', nothing, 10, 0, 0, 0)\n\nf = cast_FORTRAN_datatypet(\"F10.4\")\n  FORTRAN_format(\"Fw.d\", 'F', nothing, 10, 0, 4, 0)\n\nf = cast_FORTRAN_datatype(\"E10.5\")\n  FORTRAN_format(\"Ew.d\", 'E', nothing, 10, 0, 5, 0)\n\nf.Type, f.TypeChar, f.EngSci, f.width, f.nmin, f.ndec, f.nexp\n  (\"Ew.d\", 'E', nothing, 10, 0, 5, 0)\n\n\n\n\n\n","category":"method"},{"location":"#Plotting","page":"Home","title":"Plotting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"step125(x::Real)\nselect125(x)\nsteps(x::Vector{T} where T<:Real)\nstepcenters(x::Vector{T} where T<:Real)\nstepedges(x::Vector{T} where T<:Real)\nedges(px, Δx=1.0, x0=0.0)","category":"page"},{"location":"#CamiXon.step125-Tuple{Real}","page":"Home","title":"CamiXon.step125","text":"step125(x)\n\nStep used for deviding the number x in steps according to 1-2-5 scheme\n\nExamples:\n\nstep125.([5,10,21.3,50,100.1])\n5-element Vector{Int64}:\n  1\n  2\n  5\n 10\n 20\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.select125-Tuple{Any}","page":"Home","title":"CamiXon.select125","text":"select125(x)\n\nSelect elements of the collection x by index according to 1-2-5 scheme\n\nExamples:\n\nx = [1,2,4,6,8,10,13,16,18,20,40,60,80,100]\nselect125(x)\n [2, 6, 10, 16, 20, 60, 100]\n\nx = string.(x)\nselect125(x)\n [\"2\", \"6\", \"10\", \"16\", \"20\", \"60\", \"100\"]\n\nx = 1:100\nselect125(x)\n [20, 40, 60, 80, 100]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.steps-Tuple{Vector{T} where T<:Real}","page":"Home","title":"CamiXon.steps","text":"steps(x)\n\nHeatmap range transformation for steplength specification vector x\n\nExamples:\n\nx = [4,2,6]\nsteps(x)\n [0, 4, 6, 12]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.stepcenters-Tuple{Vector{T} where T<:Real}","page":"Home","title":"CamiXon.stepcenters","text":"stepcenters(x)\n\nStepcenter positions for steplength specification vector x\n\nExamples:\n\nx = [4,2,6]\nstepcenters(x)\n [2.0, 5.0, 9.0]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.stepedges-Tuple{Vector{T} where T<:Real}","page":"Home","title":"CamiXon.stepedges","text":"stepedges(x)\n\nStepedges for steplength specification vector x\n\nExamples:\n\nx = [4,2,6]\nstepedges(x)\n [0, 4, 6, 12]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.edges","page":"Home","title":"CamiXon.edges","text":"edges(px [, Δx[, x0]])\n\nHeatmap range transformation from pixel coordinates to physical coordinates, with pixelsize Δx and offset x0, both in physical units.\n\nExamples:\n\npx = 1:5\nΔx = 2.5\nx0 = 2.5\nedges(px)\n [0.5, 1.5, 2.5, 3.5, 4.5]\n\nedges(px, Δx)\n [1.25, 3.75, 6.25, 8.75, 11.25]\n\nedges(px, Δx, x0)\n [-1.25, 1.25, 3.75, 6.25, 8.75]\n\n\n\n\n\n","category":"function"},{"location":"#Search-and-conversion-tools","page":"Home","title":"Search and conversion tools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"find_all(A::Union{String,AbstractArray{T,1}}, a::T...; count=false)  where T\nfind_first(A::Union{String,AbstractArray{T,1}}, a::T...; dict=false)  where T\nfind_last(A::Union{String,AbstractArray{T,1}}, a::T...; dict=false)  where T","category":"page"},{"location":"#CamiXon.find_all-Union{Tuple{T}, Tuple{Union{AbstractVector{T}, String}, Vararg{T}}} where T","page":"Home","title":"CamiXon.find_all","text":"find_all(A [,a...]; count=false)\n\nA: string/array of elements of the same type\n\ndefault   : Array containing the index (indices) of selected elements of A (default: all elements)\n\ncount=true: The number of indices found for selected elements of A (default: all elements)\n\nExamples:\n\nA = [:📑,:📌,:📢,:📌,:📞]\nB = [1,2,3,2,5]\nstr = \"aβcβd\";\nfind_all(A) == find_all(B) == find_all(str)\ntrue\n\nfind_all(A,:📌)\n1-element Array{Array{Int64,1},1}:\n [2, 4]\n\nfind_all(str)\n4-element Array{Array{Int64,1},1}:\n [1]\n [2, 4]\n [3]\n [5]\n\nfind_all(A; count=true)\n4-element Array{Int64,1}:\n 1\n 2\n 1\n 1\n\nstr = \"📑📌📢📌📞\"\nfind_all(str,'📌')\n1-element Array{Array{Int64,1},1}:\n [2, 4]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.find_first-Union{Tuple{T}, Tuple{Union{AbstractVector{T}, String}, Vararg{T}}} where T","page":"Home","title":"CamiXon.find_first","text":"find_first(A [,a...]; dict=false)\n\nThe first index of selected Array element\n\nA: string/array of elements of the same type\n\ndefault  : Array containing the first index (indices) of selected elements of A (default: all elements)\n\ndict=true: Dict for the first index (indices) of selected elements of A (default: all elements)\n\nExamples:\n\nA = [:📑,:📌,:📢,:📌,:📞]\nB = [1,2,3,2,5]\nstr = \"aβcβd\";\n\nfind_first(A) == find_first(B) == find_first(str)\ntrue\n\nfind_first(A,:📌)\n1-element Array{Array{Int64,1},1}:\n 2\n\nfind_last(A,:📌; dict=true)\n1-element Array{Pair{Symbol,Int64},1}:\n :📌 => 2\n\nfind_last(A; dict=true)\n4-element Array{Pair{Symbol,Int64},1}:\n :📑 => 1\n :📌 => 2\n :📢 => 3\n :📞 => 5\n\nfind_first(str)\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 5\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.find_last-Union{Tuple{T}, Tuple{Union{AbstractVector{T}, String}, Vararg{T}}} where T","page":"Home","title":"CamiXon.find_last","text":"find_last(A [,a...]; dict=false)\n\nThe last index of selected Array element\n\nA: string/array of elements of the same type\n\ndefault  : Array containing the lasst index (indices) of selected elements of A (default: all elements)\n\ndict=true: Dict for the lasst index (indices) of selected elements of A (default: all elements)\n\nExamples:\n\nA = [:📑,:📌,:📢,:📌,:📞]\nB = [1,2,3,2,5]\nstr = \"aβcβd\";\nfind_last(A) == find_first(B) == find_first(str)\ntrue\n\nfind_last(A,:📌)\n1-element Array{Array{Int64,1},1}:\n 4\n\nfind_last(A,:📌; dict=true)\n1-element Array{Pair{Symbol,Int64},1}:\n :📌 => 4\n\nfind_last(A; dict=true)\n4-element Array{Pair{Symbol,Int64},1}:\n :📑 => 1\n :📌 => 4\n :📢 => 3\n :📞 => 5\n\nfind_last(str)\n4-element Array{Int64,1}:\n 1\n 4\n 3\n 5\n\n\n\n\n\n","category":"method"},{"location":"#Math","page":"Home","title":"Math","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"bernoulli_numbers(nmax::Int)\ncanonical_partitions(n::Int, m=0; header=true, reverse=true)\nfaulhaber_polynom(p::Int)\nfaulhaber_summation(n::Int, p::Int; T=Int)\nharmonic_number(n::Int, p::Int)\nharmonic_number(n::Int)\ninteger_partitions(n::Int, m=0; transpose=false, count=false)\nlog10_characteristic_power(x)\nlog10_mantissa(x)\npermutations_unique_count(p::Array{Array{Int64,1},1}, i::Int)\npascal_triangle(nmax::Int)\npascal_next(a::Vector{Int})\npochhammer(x::T, p::Int) where T<:Real\npolynomial(coords::Vector{T}, x::T; deriv=0) where T<:Number\npolynom_derivative(coords::Vector{<:Number})\npolynom_derivatives(coords::Vector{<:Number}; deriv=0)\npolynom_derivatives_all(coords::Vector{<:Number})\npolynom_power(coords::Vector{<:Number}, power::Int)\npolynom_powers(coords::Vector{<:Number}, pmax::Int)\npolynom_primitive(coeffs::Vector{<:Number})\npolynom_product(a::Vector{T}, b::Vector{T}) where T<:Number\npolynom_product_expansion(a::Vector{T}, b::Vector{T}, p::Int) where T<:Number\ntexp(x::T, a::T, p::Int) where T <: Real\nVectorRational\nnormalize_VectorRational(vec::Vector{Rational{Int}})","category":"page"},{"location":"#CamiXon.bernoulli_numbers-Tuple{Int64}","page":"Home","title":"CamiXon.bernoulli_numbers","text":"bernoulli_numbers(nmax [, T=Int])\n\nBernoulli numbers B_0 B_nmax calculated by repetative use of the recurrence relation\n\n    B_n = - frac1n+1sum_k=0^n-1frac(n+1)k(n+1-k)B_k\n\nSpecial numbers: B_0=1 B_1=-12 B_2n+1=0 (rmfor n1).\n\nExamples:\n\nbernoulli_numbers(10)\n11-element Vector{Rational{Int64}}:\n  1//1\n -1//2\n  1//6\n  0//1\n -1//30\n  0//1\n  1//42\n  0//1\n -1//30\n  0//1\n  5//66\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.canonical_partitions","page":"Home","title":"CamiXon.canonical_partitions","text":"canonical_partitions(n; header=false, reverse=true)\n\nThe canonical partition in integers of the integer n\n\nheader=true : unit patition included in output\n\nExamples:\n\ncanonical_partitions(6; header=true, reverse=false)\n6-element Array{Array{Int64,1},1}:\n [6]\n [5, 1]\n [4, 2]\n [3, 3]\n [2, 2, 2]\n [1, 1, 1, 1, 1, 1]\n\ncanonical_partitions(6; header=true)\n6-element Array{Array{Int64,1},1}:\n [1, 1, 1, 1, 1, 1]\n [2, 2, 2]\n [3, 3]\n [4, 2]\n [5, 1]\n [6]\n\ncanonical_partitions(6)\n5-element Array{Array{Int64,1},1}:\n [1, 1, 1, 1, 1, 1]\n [2, 2, 2]\n [3, 3]\n [4, 2]\n [5, 1]\n\n\n\n\n\n","category":"function"},{"location":"#CamiXon.faulhaber_polynom-Tuple{Int64}","page":"Home","title":"CamiXon.faulhaber_polynom","text":"faulhaber_polynom(p [, T=Int])\n\nVector representation of the Faulhaber polynomial of degree p,\n\n    F(np)=frac1psum_j=1^pbinom pp-jB_p-jn^j\n\nF(np)= polynomial(c,n), where c=c_0 c_p is the coefficient vector, with\n\n    c_0=0 c_j=frac1pbinom pp-jB_p-j\n\nwith j 1 p. The B_0 B_p-1 are Bernoulli numbers (but with B_1=+frac12 rather than -frac12).\n\nExample:\n\nfaulhaber_polynom(6)\n7-element Vector{Rational{Int64}}:\n  0//1\n  0//1\n -1//12\n  0//1\n  5//12\n  1//2\n  1//6\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.faulhaber_summation-Tuple{Int64, Int64}","page":"Home","title":"CamiXon.faulhaber_summation","text":"faulhaber_summation(n, p [, T=Int])\n\nSum of powers of natural numbers 1 n,\n\n    FS(np)=sum_k=1^nk^p=F(np+1)\n\nwhere F(np) is the Faulhamer polynomial of degree p.\n\nExamples:\n\nfaulhaber_summation(5,1)\n 15\n\nfaulhaber_summation(3,60; T=BigInt)\n  42391158276369125018901280178\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.harmonic_number-Tuple{Int64, Int64}","page":"Home","title":"CamiXon.harmonic_number","text":"harmonic_number(n, p [, T=Int])\n\nSum of the p_th power of reciprocals of the first n numbers\n\n    H_np=sum_k=1^nfrac1k^p\n\nExamples:\n\nharmonic_number(12, 3)\n 25535765062457//21300003648000\n\nharmonic_number(12, 5; T=BigInt)\n 16971114472329088045481//16366888723117363200000\n\nharmonic_number(12, -3) == faulhaber_summation(12, 3)\n  true\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.harmonic_number-Tuple{Int64}","page":"Home","title":"CamiXon.harmonic_number","text":"harmonic_number(n [, T=Int])\n\nSum of the reciprocals of the first n natural numbers\n\n    H_n=sum_k=1^nfrac1k\n\nExamples:\n\no = [harmonic_number(i) for i=1:10]; println(o)\n [1//1, 3//2, 11//6, 25//12, 137//60, 49//20, 363//140, 761//280, 7129//2520, 7381//2520]\n\nharmonic_number(60; T=BigInt)\n 15117092380124150817026911//3230237388259077233637600\n\nharmonic_number(12) == harmonic_number(12, 1)\n true\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.integer_partitions","page":"Home","title":"CamiXon.integer_partitions","text":"integer_partitions(n [,m]; transpose=false, count=false)\n\ndefault              : The integer partitions of n\n\ncount=true           : The number of integer partitions of n\n\ntranspose=false/true : for m>0 restricted to partitions with maximum part/length m\n\ndefinitions:\n\nThe integer partition of the positive integer n is a nonincreasing sequence of positive integers p1, p2,... pk whose sum is n.\n\nThe elements of the sequence are called the parts of the partition.\n\nExamples:\n\ninteger_partitions(7)\n15-element Array{Array{Int64,1},1}:\n [1, 1, 1, 1, 1, 1, 1]\n [2, 2, 2, 1]\n [3, 3, 1]\n [4, 3]\n [5, 2]\n [6, 1]\n [7]\n [2, 2, 1, 1, 1]\n [3, 2, 2]\n [4, 2, 1]\n [5, 1, 1]\n [2, 1, 1, 1, 1, 1]\n [3, 2, 1, 1]\n [4, 1, 1, 1]\n [3, 1, 1, 1, 1]\n\ninteger_partitions(7; count=true)\n15\n\ninteger_partitions(7,4; count=true)\n3\n\ninteger_partitions(7,4)\n3-element Array{Array{Int64,1},1}:\n [4, 3]\n [4, 2, 1]\n [4, 1, 1, 1]\n\ninteger_partitions(7,4; transpose=true)\n3-element Array{Array{Int64,1},1}:\n [2, 2, 2, 1]\n [3, 2, 1, 1]\n [4, 1, 1, 1]\n\n\n\n\n\n","category":"function"},{"location":"#CamiXon.log10_characteristic_power-Tuple{Any}","page":"Home","title":"CamiXon.log10_characteristic_power","text":"log10_characteristic_power(x)\n\ncharacteristic power-of-10 of the number x\n\nExamples:\n\nlog10_characteristic_power.([3,30,300])\n3-element Vector{Int64}:\n 0\n 1\n 2\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.log10_mantissa-Tuple{Any}","page":"Home","title":"CamiXon.log10_mantissa","text":"log10_mantissa(x)\n\nlog10 mantissa of the number x\n\nExamples:\n\nlog10_mantissa.([3,30,300])\n3-element Vector{Float64}:\n 0.47712125471966244\n 0.4771212547196624\n 0.4771212547196626\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.permutations_unique_count-Tuple{Vector{Vector{Int64}}, Int64}","page":"Home","title":"CamiXon.permutations_unique_count","text":"permutations_unique_count(p::Array{Array{Int64,1},1}, i::Int)\n\nNumber of unique permutations of the subarray pi.\n\nExample:\n\np = [[1,2,3],[2,3,1,4,3]]\npermutations_unique_count(p,2)\n 60\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.pascal_triangle-Tuple{Int64}","page":"Home","title":"CamiXon.pascal_triangle","text":"pascal_triangle(nmax [, T=Int])\n\nPascal triangle of binomial coefficients binomnk for n=0 1 nmax\n\nExample:\n\npascal_triangle(5)\n6-element Vector{Vector{Int64}}:\n [1]\n [1, 1]\n [1, 2, 1]\n [1, 3, 3, 1]\n [1, 4, 6, 4, 1]\n [1, 5, 10, 10, 5, 1]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.pascal_next-Tuple{Vector{Int64}}","page":"Home","title":"CamiXon.pascal_next","text":"pascal_next(nmax)\n\nNext row of Pascal triangle\n\nExample:\n\na = [1, 4, 6, 4, 1]\npascal_next(a)\n [1, 5, 10, 10, 5, 1]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.pochhammer-Union{Tuple{T}, Tuple{T, Int64}} where T<:Real","page":"Home","title":"CamiXon.pochhammer","text":"pochhammer(x::T, p::Int) where T<:Real\n\nPochhammer symbol (x)_p,\n\n(x)_p=begincases\n1  p=0\nx(x+1)(x+2)(x+p-1)  p0\nendcases\n\nNote that (x)_p=0 for x=0-1 -(p-1)\n\nExamples:\n\nx = [-4,-3,-2,-1, 0, 1, 2 , 3, 4]\npochhammer.(x,5) == [0, 0, 0, 0, 0, 120, 720, 2520, 6720]\n  true\n\npochhammer.(x,0) == [1, 1, 1, 1, 1, 1, 1, 1, 1]\n  true\n\no = [pochhammer.([x for x=0:-1:-p],p) for p=0:5]\nprintln(\"non-positive integer x = 0,⋯\\ -p:\")\nfor p=0:5\n    println(\"p = $p: $(o[p+1])\")\nend\n  non-positive integer x = 0,⋯\\ -p:\n  p = 0: [1]\n  p = 1: [0, -1]\n  p = 2: [0, 0, 2]\n  p = 3: [0, 0, 0, -6]\n  p = 4: [0, 0, 0, 0, 24]\n  p = 5: [0, 0, 0, 0, 0, -120]\n\n o = [pochhammer.([x for x=0:p],p) for p=0:5]\n println(\"non-negative integer x = 0,⋯\\  p:\")\n for p=0:5\n     println(\"p = $p: $(o[p+1])\")\n end\n   non-negative integer x = 0,⋯\\  p:\n   p = 0: [1]\n   p = 1: [0, 1]\n   p = 2: [0, 2, 6]\n   p = 3: [0, 6, 24, 60]\n   p = 4: [0, 24, 120, 360, 840]\n   p = 5: [0, 120, 720, 2520, 6720, 15120]\n\nx = -1//50\npochhammer(x,20)\n  OverflowError: -1491212300990613201 * 449 overflowed for type Int64\n\nx = convert(Rational{BigInt}, -1//50)\npochhammer(x,20)\n  -21605762356630090481082546653745369902321614221999//9536743164062500000000000000000000\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynomial-Union{Tuple{T}, Tuple{Vector{T}, T}} where T<:Number","page":"Home","title":"CamiXon.polynomial","text":"polynomial(coords::Vector{T}, x::T[; deriv=0]) where T<:Number\n\nMethod to evaluate the function f(x)=textpolynomial(cx), where c=c_0 c_d is the vector representation of a polynomial of degree d.\n\n    textpolynomial(cx)=c_0 + c_1 x +  + c_d x^d\n\nExamples:\n\ncoords = ones(Int,6)                     # for polynomial of degree 5 with unit coefficients\nf0(x) = polynomial(coords,x)             # default\nfd(x) = polynomial(coords,x; deriv=1)    # first derivative\nfp(x) = polynomial(coords,x; deriv=-1)   # primitive (with zero integration constant)\nf0(1)\n 6\n\nfd(1)\n 15\n\nfp(1)\n 49//20\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynom_derivative-Tuple{Vector{<:Number}}","page":"Home","title":"CamiXon.polynom_derivative","text":"polynom_derivative(coords)\n\nVector representation of the first derivative of the polynomial coords,\n\n    p(cx)=c_1 + 2 c_2 x +  + d c_d x^d-1\n\nPolynomials of degree d are represented by a vector in a vector space of dimension d+1. The polynomial coords is specified by the coordinates vector c=c_0 c_d consisting of the polynomial coefficients.\n\nExamples:\n\ncoords=[1,1,1,1,1]                 # vector representation of polynomial of degree d=4\npolynom_derivative(coords)         # (first) derivative of polynomial `coords`\n4-element Vector{Int64}:\n 1\n 2\n 3\n 4\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynom_derivatives-Tuple{Vector{<:Number}}","page":"Home","title":"CamiXon.polynom_derivatives","text":"polynom_derivatives(coords::Vector{<:Number}[;deriv=0])\n\nVector representation of derivatives of the polynomial coords.\n\nPolynomials of degree d are represented by a vector in a vector space of dimension d+1. The polynomial coords is specified by the coordinates vector c=c_0 c_d consisting of the polynomial coefficients.\n\nderiv: derivative of choice; default: coords remains unchanged.\n\nExamples:\n\ncoords=[1,1,1,1,1]               # vector representation of a polynomial of degree d=4\npolynom_derivatives(coords)      # default no (zero) derivative of polynomial `coords`\n5-element Vector{Vector{Int64}}:\n 1\n 1\n 1\n 1\n 1\n\npolynom_derivatives(coords; deriv=2)        # second derivative of polynomial `coords`\n3-element Vector{Int64}:\n  2\n  6\n 12\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynom_derivatives_all-Tuple{Vector{<:Number}}","page":"Home","title":"CamiXon.polynom_derivatives_all","text":"polynom_derivatives_all(coords::Vector{<:Number})\n\nVector representation of all nontrivial derivatives of the polynomial coords.\n\nPolynomials of degree d are represented by a vector in a vector space of dimension d+1. The polynomial coords is specified by the coordinates vector c=c_0 c_d consisting of the polynomial coefficients.\n\nExamples:\n\ncoords=[1,1,1,1,1]               # vector representation of a polynomial of degree d=4\npolynom_derivatives_all(coords)      # `all' (nontrivial) derivatives of polynomial `coords`\n5-element Vector{Vector{Int64}}:\n [1, 2, 3, 4]\n [2, 6, 12]\n [6, 24]\n [24]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynom_power-Tuple{Vector{<:Number}, Int64}","page":"Home","title":"CamiXon.polynom_power","text":"polynom_power(coords, p)\n\nVector representation of the polynomial coords raised to the power p which results in a polynomial in a vector space of dimension p d + 1.\n\nPolynomials of degree d are represented by a vector in a vector space of dimension d+1. The polynomial coords is specified by the coordinates vector c=c_0 c_d consisting of the polynomial coefficients.\n\nExamples:\n\ncoords=[1,1,1]             # vector representation of polynomial of degree ``d=2``\npolynom_power(coords,2)\n5-element Vector{Int64}:\n 1\n 2\n 3\n 2\n 1\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynom_powers-Tuple{Vector{<:Number}, Int64}","page":"Home","title":"CamiXon.polynom_powers","text":"polynom_powers(coords, pmax)\n\nThe polynomial coords raised to the powers 1,...,pmax  which results in a collection of polynomials in vector spaces of dimension d+1 tot p d + 1.\n\nPolynomials of degree d are represented by a vector in a vector space of dimension d+1. The polynomial coords is specified by the coordinates vector c=c_0 c_d consisting of the polynomial coefficients.\n\nExamples:\n\ncoords=[1,1,1]                   # vector representation of polynomial of degree d=2\npolynom_powers(coords,3)\n3-element Vector{Vector{Int64}}:\n [1, 1, 1]\n [1, 2, 3, 2, 1]\n [1, 3, 6, 7, 6, 3, 1]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynom_primitive-Tuple{Vector{<:Number}}","page":"Home","title":"CamiXon.polynom_primitive","text":"polynom_primitive(coords)\n\nVector representation of the primitive of the polynomial coords which is a polynomial in a vector space of dimension p d + 1.\n\n    P(cx)=c_int +c_0 x + frac12 c_1 x^2 + frac13 c_2 x^3 +  + frac1d+1 c_d x^d+1\n\nThe constant of integration is set to zero, c_int = 0.\n\nPolynomials of degree d are represented by a vector in a vector space of dimension d+1. The polynomial coords is specified by the coordinates vector c=c_0 c_d consisting of the polynomial coefficients.\n\nExamples:\n\ncoords=[1,1,1,1,1]         # vector representation of polynomial of degree ``d=4``\npolynom_primitive(coords)\n6-element Vector{Rational{Int64}}:\n 0//1\n 1//1\n 1//2\n 1//3\n 1//4\n 1//5\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynom_product-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}}} where T<:Number","page":"Home","title":"CamiXon.polynom_product","text":"polynom_product(a::Vector{T}, b::Vector{V}) where {T<:Number, V<:Number}\n\nVector representation of the product of two polynomials, a and b which is a polynomial in a vector space of dimension d=m+n,\n\n    p(cx)=a_0b_0 + (a_0b_1 + b_0a_1)x +  + a_n b_m x^n+m\n\nPolynomials of degree d are represented by a vector in a vector space of dimension d+1 The polynomial coords is specified by the coordinates vector c=c_0 c_d consisting of the polynomial coefficients.\n\n\n\n[polynom_product1([1.0,1],[1,-1,2])]\n [1.0, 0.0, 1.0, 2.0]\n\n[polynom_product1([1//1,1],[1,-1,2])]\n [1//1, 0//1, 1//1, 2//1]\n\n[polynom_product([1,1],[1,- 1,2])]\n [1, 0, 1, 2]\n\n[polynom_product([1,- 1,2],[1,1])]\n [1, 0, 1, 2]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.polynom_product_expansion-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, Int64}} where T<:Number","page":"Home","title":"CamiXon.polynom_product_expansion","text":"polynom_product_expansion(a::Vector{T}, b::Vector{T}, p::Int) where T<:Number\n\nVector representation of the product of two polynomials, a (of degree n) and b (of degree m), with mn truncated at the order p is a polynomial in a vector space of dimension d=p+1. If ab is the polynom_product, the polynom_product_expansion is ab1p+1\n\n\n\na = [1,-1,1]\nb = [1,1,-1,1,1,1]\no = polynom_product(a, b); println(o)\n [1, 0, -1, 3, -1, 1, 0, 1]\n\no = expand_product(a, b, 4); println(o)\n [1, 0, -1, 3, -1]\n\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.texp-Union{Tuple{T}, Tuple{T, T, Int64}} where T<:Real","page":"Home","title":"CamiXon.texp","text":"texp(x::T, a::T, p::Int) where T <: Real\n\nTaylor expansion of exp(x) about x = a up to order p.\n\n    mathsftexp(xap) = 1 + (x-a) + frac12(x-a)^2 +  + frac1p(x-a)^p\n\nExamples:\n\np = 5\ntexp(1.0, 0.0, 5)\n 2.7166666666666663\n\ntexp(1, 0, 5)\n 163//60\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.VectorRational","page":"Home","title":"CamiXon.VectorRational","text":"VectorRational\n\nObject to decompose a vector of rational numbers\n\nThe fields are:\n\n.num::Vector{Int}`: vector of normalized numerators\n.den::Int: common denominator\n.val::Vector{Rational}: vector of rational numbers (simplified = not normalized)\n\n\n\n\n\n","category":"type"},{"location":"#CamiXon.normalize_VectorRational-Tuple{Vector{Rational{Int64}}}","page":"Home","title":"CamiXon.normalize_VectorRational","text":"normalize_VectorRational(vec::Vector{Rational{Int}})\n\nDecompose vector of rational numbers.\n\nExample:\n\nv = [2//3,4//5]\nnormalize_VectorRational(v)\n VectorRational([10, 12], 15, Rational{Int64}[2//3, 4//5])\n\n\n\n\n\n","category":"method"},{"location":"#Finite-difference-methods","page":"Home","title":"Finite-difference methods","text":"","category":"section"},{"location":"#Finite-differences","page":"Home","title":"Finite differences","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Consider the analytical function f tabulated in forward order   (growing index) at n positions on a uniform grid.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Forward difference notation","category":"page"},{"location":"","page":"Home","title":"Home","text":"In forward difference notation, the finite difference of two adjacent values on the grid is defined as","category":"page"},{"location":"","page":"Home","title":"Home","text":"Δ fn = fn+1-fn","category":"page"},{"location":"","page":"Home","title":"Home","text":"where Δ is the forward difference operator. In this notation, the  k^th-order forward difference involves k+1 points and is defined as a weighted sum over the function values fn fn+k,","category":"page"},{"location":"","page":"Home","title":"Home","text":"Δ^k fn = c_k^kfn + c_k-1^kfn+1 +   + fn+k\n= sum_j=0^k c_k-j^k fn-j","category":"page"},{"location":"","page":"Home","title":"Home","text":"The k+1 coefficients","category":"page"},{"location":"","page":"Home","title":"Home","text":"c_j^k=(-1)^jbinomkj","category":"page"},{"location":"","page":"Home","title":"Home","text":"are the summation weights (short: weights) which define the summation. Note that c_0^k1 and c_k^k(-1)^k. In inner-product form the forward difference equation is given by","category":"page"},{"location":"","page":"Home","title":"Home","text":"Δ^k fn\n= sum_j=0^k c_k-j^kfn+j=barc^k cdot fnn+k","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the bar indicates backward order and","category":"page"},{"location":"","page":"Home","title":"Home","text":"fnn+k = leftbeginarrayc\nfn\nvdots\nfn+k\nendarrayright","category":"page"},{"location":"","page":"Home","title":"Home","text":"Functions:  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"fdiff_weight(k,j)  c_j^k=(-1)^jbinomkj","category":"page"},{"location":"","page":"Home","title":"Home","text":"fdiff_weights(k)  barc^k  c_k^k c_1^k c_0^k","category":"page"},{"location":"","page":"Home","title":"Home","text":"fdiff_weights_array(kmax) → fdiffs ≡ barc^0 barc^1 barc^kmax ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Backward difference notation","category":"page"},{"location":"","page":"Home","title":"Home","text":"In backward difference notation, the finite difference of two adjacent values on the grid is defined as","category":"page"},{"location":"","page":"Home","title":"Home","text":" fn = fn-fn-1","category":"page"},{"location":"","page":"Home","title":"Home","text":"where  is the backward difference operator. In this notation, the k^th-order backward difference (which involves k+1 points) is defined as a weighted sum over the function values in backward order, fn fn-k,","category":"page"},{"location":"","page":"Home","title":"Home","text":"^k fn = fn + c_1^kfn-1 +  + c_k^kfn-k\n= sum_j=0^k c_j^kfn-j=c^k cdot fn-1n-k","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the c_j^k are the k+1 summation weights defined above. As the function f is tabulated in forward order it is good practice to change dummy index to also write the function iterator in forward order (coefficients in backward order). In inner product notation this becomes","category":"page"},{"location":"","page":"Home","title":"Home","text":"^k fn\n= sum_j=0^k c_k-j^kfn-k+j=barc^k cdot fn-kn","category":"page"},{"location":"","page":"Home","title":"Home","text":"Functions:  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"fdiff_weight(k,j)  c_j^k=(-1)^jbinomkj","category":"page"},{"location":"","page":"Home","title":"Home","text":"fdiff_weights(k)   barc^k  c_k^kc_1^k c_0^k","category":"page"},{"location":"","page":"Home","title":"Home","text":"fdiff_weights_array(kmax) → fdiffs ≡ barc^0 barc^1 barc^kmax ","category":"page"},{"location":"","page":"Home","title":"Home","text":"fdiff_weight(k::Int,j::Int)\nfdiff_weights(k::Int)\nfdiff_weights_array(kmax::Int)","category":"page"},{"location":"#CamiXon.fdiff_weight-Tuple{Int64, Int64}","page":"Home","title":"CamiXon.fdiff_weight","text":"fdiff_weight(k, j)\n\nFinite difference weight coefficient\n\nc_j^k=(-1)^jbinomkj\n\nFunction:\n\nfdiff_weight(k,j)]  c_j^k\n\nExample:\n\nc(k,j) = fdiff_weight(k,j)\nc(5,3)\n -10\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.fdiff_weights-Tuple{Int64}","page":"Home","title":"CamiXon.fdiff_weights","text":"fdiff_weights(k)\n\nFinite difference weights vector defining the k^th order finite difference summation weights,\n\nfdiff_weights(k)   barc^k  c_k^k c_1^k c_0^k,\n\nwhere fdiff_weight(k,j)  barc_j^k.\n\nApplications:\n\nForward difference notation\n\nThe forward difference summation is\n\nΔ^k fn=sum_j=0^k c_k-j^kfn+j=barc^k cdot fnn+k\n\nThis convention applies to analytical functions, f, tabulated in forward order as fn fn+k.\n\nBackward difference notation\n\nThe backward difference summation is\n\n^kfn=sum_j=0^kc_k-j^kfn-k+j=barc^k cdot fn-kn\n\nThis convention applies to analytical functions, f, tabulated in forward order as fn-k fn.\n\nExample:\n\nc(k) = fdiff_weights(k)\nc(3)\n4-element Vector{Int64}:\n  1\n -3\n  3\n -1\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.fdiff_weights_array-Tuple{Int64}","page":"Home","title":"CamiXon.fdiff_weights_array","text":"fdiff_weights_array(kmax)\n\nCollection of finite difference weight vectors,\n\nfdiff_weights_array(kmax) → fdiffs ≡ barc^0 barc^1 barc^kmax ,\n\nwhere fdiff_weights(k)  barc^k  c_k^k c_k-1^k c_0^k.\n\nExample:\n\nkmax = 3\nfdiffs = fdiff_weights_array(kmax)\n4-element Vector{Vector{Int64}}:\n [1]\n [-1, 1]\n [1, -2, 1]\n [-1, 3, -3, 1]\n\n\n\n\n\n","category":"method"},{"location":"#Finite-difference-expansions","page":"Home","title":"Finite difference expansions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Finite-difference calculus builds on the finite-difference expansion.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Forward difference notation","category":"page"},{"location":"","page":"Home","title":"Home","text":"In terms of forward differences the expansion takes the form","category":"page"},{"location":"","page":"Home","title":"Home","text":"sum_p=0^inftyα_pΔ^pfn\n=sum_p=0^kα_pΔ^pfn+","category":"page"},{"location":"","page":"Home","title":"Home","text":"A finite-difference expansion truncated order k is defined by k+1 finite-difference expansion coefficients, defined by the vector α = α_0 α_k. It takes some bookkeeping to rewrite the expansion in the form of a weighted sum over the k+1 function values fn fn-k (note the backward order). Substituting the finite difference expression for Δ^k, we obtain","category":"page"},{"location":"","page":"Home","title":"Home","text":"sum_p=0^kα_pΔ^pfn\n=sum_p=0^kα_psum_j=0^pc_p-j^pfn+j\n=sum_j=0^ksum_p=j^kα_pc_p-j^pfn+j\n=sum_j=0^kF_j^kfn+j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the weighted summation is defined by the weights","category":"page"},{"location":"","page":"Home","title":"Home","text":"F_j^k=sum_p=j^kα_pc_p-j^p\n=sum_p=j^k(-1)^p+jbinompjα_p","category":"page"},{"location":"","page":"Home","title":"Home","text":"with j=0 k. In inner product form the expansion becomes","category":"page"},{"location":"","page":"Home","title":"Home","text":"sum_p=0^kα_pΔ^pfn\n=sum_j=0^kF_j^kfn+j\n=F^k cdot fnn+k","category":"page"},{"location":"","page":"Home","title":"Home","text":"where F^k   F_0^k F_k^k.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"fdiff_expansion_weights(coeffs, fdiffs; notation=fwd)  F^k  F_0^k F_k^k,","category":"page"},{"location":"","page":"Home","title":"Home","text":"where fdiffs ≡ fdiff_weights_array(k) and coeffs = α  α_0 α_k defines the expansion.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Backward difference notation","category":"page"},{"location":"","page":"Home","title":"Home","text":"In terms of backward differences the expansion takes the form","category":"page"},{"location":"","page":"Home","title":"Home","text":"sum_p=0^inftyβ_p^pfn=sum_p=0^kβ_p^pfn+","category":"page"},{"location":"","page":"Home","title":"Home","text":"In this case the k+1 finite-difference expansion coefficients are defined by the vector β = β_0 β_k. We rewrite the expansion in the form of a weighted sum over the k+1 function values fn fn-k (note the backward order). Substituting the finite difference expression for ^k, we obtain","category":"page"},{"location":"","page":"Home","title":"Home","text":"sum_p=0^kβ_p^pfn\n=sum_p=0^kβ_psum_j=0^pc_j^pfn-j\n=sum_j=0^ksum_p=j^kβ_pc_j^pfn-j\n=sum_j=0^kB_j^kfn-j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the weighted summation is defined as the weights B_j^k=sum_p=j^kβ_pc_j^p, with j=0 k. By a change of dummy index we turn to forward order","category":"page"},{"location":"","page":"Home","title":"Home","text":"sum_p=0^kβ_p^pfn\n=sum_j=0^kB_k-j^kfn-k+j\n=barB^k cdot fn-kn","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that the weights vector barB^k  B_k^k B_0^k contains the weights in backward order.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In general β  α and there is no simple symmetry relation between B^k and F^k. In the special case β = α we find barB^k = textreverse(F^k).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"fdiff_expansion_weights(coeffs, fdiffs; notation=bwd)  barB^k  B_k^k B_0^k,","category":"page"},{"location":"","page":"Home","title":"Home","text":"where fdiffs ≡ fdiff_weights_array(k) and coeffs = β  β_0 β_k defines the expansion.","category":"page"},{"location":"","page":"Home","title":"Home","text":"fdiff_expansion_weights(coeffs, fdiffs; notation=fwd)","category":"page"},{"location":"#CamiXon.fdiff_expansion_weights-Tuple{Any, Any}","page":"Home","title":"CamiXon.fdiff_expansion_weights","text":"fdiff_expansion_weights(coeffs, fdiffs; notation=fwd)\n\nExpansion weights corresponding to the expansion coefficients coeffs for the finite difference expansion fdiff.\n\nForward difference notation (notation = fwd)\n\nWeight vector F^k  F_k^k F_0^k corresponding to the expansion coefficients α  α_0^k α_k^k of the k^th-order forward-difference expansion,\n\nsum_p=0^kα_pΔ^pfn\n=sum_j=0^kF_j^kfn+j\n=F^k cdot fnn+k\n\nwhere fn fn+k are elements of the analytic function f tabulated in forward order.\n\nfdiff_expansion_weights(coeffs, fdiffs; notation=fwd)  F^k  F_0^k F_k^k,\n\nwhere fdiffs ≡fdiff_weights_array(k) and coeffs = α  α_0 α_k defines the expansion.\n\nBackward difference notation (notation = bwd)\n\nWeight vector barB^k  B_k^k B_0^k corresponding to the expansion coefficients β  β_0 β_k of the k^th-order backward-difference expansion,\n\nsum_p=0^kβ_p^pfn\n=sum_j=0^kB_k-j^kfn-k+j\n=barB^k cdot fn-kn\n\nwhere fn-k fn are elements of the analytic function f tabulated in forward order.\n\nfdiff_expansion_weights(coeffs, fdiffs; notation=bwd)  barB^k  B_k^k B_0^k,\n\nwhere fdiffs ≡fdiff_weights_array(k) and coeffs = β  β_0 β_k defines the expansion.\n\nExample:\n\nk=5\nα = β = UnitRange(0,k)\nfdiffs = fdiff_weights_array(k)\nFk = fdiff_expansion_weights(α, fdiffs; notation=fwd); println(\"Fk = $(Fk)\")\nbBk = fdiff_expansion_weights(β, fdiffs; notation=bwd); println(\"bBk = $(bBk)\")\n  Fk = [15, -55, 85, -69, 29, -5]\n  bBk = [-5, 29, -69, 85, -55, 15]\n\nbBk == reverse(Fk)\n  true\n\n\n\n\n\n","category":"method"},{"location":"#Lagrangian-interpolation","page":"Home","title":"Lagrangian interpolation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This section build on the finite difference expansion methods","category":"page"},{"location":"","page":"Home","title":"Home","text":"Forward difference notation","category":"page"},{"location":"","page":"Home","title":"Home","text":"Starting from the relation","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn=(1+Δ)fn+1","category":"page"},{"location":"","page":"Home","title":"Home","text":"we obtain by formal inversion of the operator","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+1 = (1 + Δ)^-1 fn equiv sum_p=0^infty(-1)^p Δ^p fn","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+2 = (1 + Δ)^-2 fn equiv sum_p=0^infty(-1)^p pΔ^p fn","category":"page"},{"location":"","page":"Home","title":"Home","text":"vdots","category":"page"},{"location":"","page":"Home","title":"Home","text":"which can be generalized to the form of lagrangian interpolation,","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn-x = (1 + Δ)^-x fn equiv sum_p=0^infty α_p(x) Δ^p fn","category":"page"},{"location":"","page":"Home","title":"Home","text":"where","category":"page"},{"location":"","page":"Home","title":"Home","text":"α_p(x)  (-1)^p(x)_pp","category":"page"},{"location":"","page":"Home","title":"Home","text":"is the p^th-order finite-difference expansion coefficient for lagrangian lagrangian_extrapolation over the interval -k x 0  (n le n-x le n+k),","category":"page"},{"location":"","page":"Home","title":"Home","text":"(x)_p=begincases\n1  p=0\nx(x+1)(x+2)cdots(x+p-1)  p0\nendcases","category":"page"},{"location":"","page":"Home","title":"Home","text":"being the Pochhammer symbol (pochhammer). Evaluating the finite-difference expansion up to order k we obtain","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn-x =sum_p=0^kα_p(x)Δ^pfn\n=sum_j=0^kF_j^k(x)fn+j\n=F^k(x) cdot fnn+k","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the k+1 weights","category":"page"},{"location":"","page":"Home","title":"Home","text":"F_j^k(x)= sum_p=j^k (-1)^k α_p(x) c_j^p\n=sum_p=j^k (-1)^j binompj(x)_pp","category":"page"},{"location":"","page":"Home","title":"Home","text":"are the lagrangian interpolation weights corresponding to the point fn-x.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"fdiff_expansion_weights(coeffs, fdiffs; notation=fwd)  F^k(x)  F^k_0(x) F^k_k,","category":"page"},{"location":"","page":"Home","title":"Home","text":"where fdiffs ≡ fdiff_weights_array(k) and","category":"page"},{"location":"","page":"Home","title":"Home","text":"coeffs =fdiff_expansion_coeffs_lagrange(k, x; notation=fwd)  α(x)  α_0(x) α_k(x) defines the expansion.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Backward difference notation","category":"page"},{"location":"","page":"Home","title":"Home","text":"Starting from the relation","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn=(1-)fn+1","category":"page"},{"location":"","page":"Home","title":"Home","text":"we obtain by formal inversion of the operator","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+1 = (1 - )^-1 fn equiv sum_p=0^infty^p fn","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+2 = (1 - )^-2 fn equiv sum_p=0^inftyp^p fn","category":"page"},{"location":"","page":"Home","title":"Home","text":"vdots","category":"page"},{"location":"","page":"Home","title":"Home","text":"which can be generalized to the form of lagrangian interpolation,","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+x = (1 - )^-x fn equiv sum_p=0^infty β_p(x) ^p fn","category":"page"},{"location":"","page":"Home","title":"Home","text":"where","category":"page"},{"location":"","page":"Home","title":"Home","text":"β_p(x)  (x)_pp = (-1)^p α_p(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"is the p^th-order finite-difference expansion coefficient for lagrangian lagrangian_extrapolation over the interval -k x 0  (n-k le n+x le n), with","category":"page"},{"location":"","page":"Home","title":"Home","text":"(x)_p=begincases\n1  p=0\nx(x+1)(x+2)cdots(x+p-1)  p0\nendcases","category":"page"},{"location":"","page":"Home","title":"Home","text":"being the Pochhammer symbol (pochhammer). Evaluating the finite-difference expansion up to order k we obtain","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+x =sum_p=0^kβ_p(x)^pfn\n= sum_j=0^kB^k_j(x)fn-j\n= B^k(x)  fn-1n-k","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the k+1 weights B^k_j(x)= sum_p=j^k β_p(x) c_j^p are the corresponding lagrangian interpolation weights.  After changing dummy index to obtain forward order the expansion becomes","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+x\n=sum_p=0^kβ_p(x)^pfn\n= sum_j=0^kB_k-j^k(x)fn-k+j\n=barB^k(x)  fn-kn","category":"page"},{"location":"","page":"Home","title":"Home","text":"Function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"fdiff_expansion_weights(coeffs, fdiffs; notation=bwd)  barB^k(x)  B_k^k(x) B_0^k(x),","category":"page"},{"location":"","page":"Home","title":"Home","text":"where fdiffs ≡ fdiff_weights_array(k) and","category":"page"},{"location":"","page":"Home","title":"Home","text":"coeffs =fdiff_expansion_coeffs_lagrange(k, x; notation=bwd)  β  β_0(x) β_k(x) defines the expansion.","category":"page"},{"location":"","page":"Home","title":"Home","text":"\nfdiff_expansion_coeffs_lagrange(k::Int, x::T; notation=fwd) where T<:Real\nsummation_range(n::Int, i::Int, k::Int, μ::Int)\nfdiff_function_sequences(f, k::Int, μ=0)\nlagrange_interpolation(f::Vector{Float64}, domain::ClosedInterval{Float64}; k=1, i=0)\nlagrange_extrapolation(f::Vector{Float64}, domain::ClosedInterval{Float64}; k=1, e=2, μ=0)\n","category":"page"},{"location":"#CamiXon.fdiff_expansion_coeffs_lagrange-Union{Tuple{T}, Tuple{Int64, T}} where T<:Real","page":"Home","title":"CamiXon.fdiff_expansion_coeffs_lagrange","text":"fdiff_expansion_coeffs_lagrange(k::Int, x::T; notation=fwd) where T<:Real\n\nForward difference notation (notation = fwd)\n\nFinite-difference expansion coefficient vector α^k=(x)_0 (x)_k defining the k^th-order lagrangian interpolation of the tabulated analytic function f(n+x) at offset position x with respect to position n,\n\nfn-x = (1 + )^-x fn equiv sum_p=0^k α_p Δ^p fn + \n\nwhere (x)_p is the pochhammer symbol. Interpolation corresponds to the interval -kle xle 0; extrapolation to xge 0.\n\n[fdiff_expansion_coeffs_lagrange(k, x; notation=fwd)] → α^k  α_0 α_k\n\nBackward difference notation (notation = bwd)\n\nfn+x = (1 - )^-x fn equiv sum_p=0^k β_p ^p fn + \n\n[fdiff_expansion_coeffs_lagrange(k, x; notation=bwd)] → β^k  β_0 β_k\n\nExamples:\n\nk = 5; x = 1\nl = fdiff_expansion_coeffs_lagrange(k, x; notation=bwd); println(l)\n [1, 1, 1, 1, 1, 1]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.summation_range-NTuple{4, Int64}","page":"Home","title":"CamiXon.summation_range","text":"summation_range(n, i, k, m)\n\nSummation range for interpolation position 0le im le 1 used in k^th-order lagrangian interpolation of the anaytic function f tabulated in forward order on a uniform grid of n points, f1 fn; m is the multiplier defining the interpolation grid size.\n\nExamples:\n\nn = 7; k = 2; m = 1\no = [summation_range(n,i,k,m) for i=0:(n-1)*m]; println(o)\n UnitRange{Int64}[1:3, 2:4, 3:5, 4:6, 5:7, 5:7, 5:7]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.fdiff_function_sequences","page":"Home","title":"CamiXon.fdiff_function_sequences","text":"fdiff_function_sequences(f, k::Int, m=1)\n\nFinite-difference summation sequences of function values given in forward order for use in k^th-order lagrangian interpolation of the anaytic function f tabulated in forward order on a uniform grid of n points, f1 fn; m is the multiplier defining the interpolation grid size. Each sequence consists of km+1 function values.\n\nExample:\n\nf = [0,1,2,3,4,5,6]\nk = 2\no = fdiff_function_sequences(f, k); println(o)\n [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [4, 5, 6], [4, 5, 6]]\n\n\n\n\n\n","category":"function"},{"location":"#CamiXon.lagrange_interpolation-Tuple{Vector{Float64}, IntervalSets.ClosedInterval{Float64}}","page":"Home","title":"CamiXon.lagrange_interpolation","text":"lagrangian_interpolation(f::Vector{Float64},\n                                  domain::ClosedInterval{Float64}; k=1, m=1)\n\nk^th-order lagrangian interpolation of the analytic function f tabulated in forward order on a uniform grid of n points, f1   fn; m is the multiplier defining the interpolation grid size.\n\nExample:\n\nf = [0.0,1,2,3,4,5,6,7]\ndomain = 0.0..1.0\n(X,Y) = lagrangian_interpolation(f, domain; k=2, m=2); println((X,Y))\n (0.0:0.07142857142857142:1.0, [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0,\n                                                  4.5, 5.0, 5.5, 6.0, 6.5, 7.0])\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.lagrange_extrapolation-Tuple{Vector{Float64}, IntervalSets.ClosedInterval{Float64}}","page":"Home","title":"CamiXon.lagrange_extrapolation","text":"lagrangian_extrapolation(f::Vector{Float64},\n                             domain::ClosedInterval{Float64}; k=1, e=1, m=1)\n\nk^th-order lagrangian extrapolation up to position n+e of the analytic function f tabulated in forward order at n points, f1 fn; m is the multiplier defining the interpolation grid size.\n\nExample:\n\nf = [0.0,1,2,3,4,5,6,7]\ndomain = 0.0..1.0\n(X,Y) = lagrangian_extrapolation(f, domain; k=2, e=1, m=2); println((X,Y))\n  (0.0:0.07142857142857142:1.0, [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0,\n                                                  4.5, 5.0, 5.5, 6.0, 6.5, 7.0])\n\n\n\n\n\n","category":"method"},{"location":"#Lagrangian-differentiation","page":"Home","title":"Lagrangian differentiation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To derive the lagrangian differentiation formulas we formally differentiate","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+x = (1 - )^-x fn","category":"page"},{"location":"","page":"Home","title":"Home","text":"with respect to x.","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracdfdxn+x=-ln(1-) (1-)^-xfn=sum_q=1^ktfrac1q^qsum_p=0^kl_p(x)^pfn+","category":"page"},{"location":"","page":"Home","title":"Home","text":"Rewriting the r.h.s. as a single summation in powers of  for given values of n and x we obtain an expression of the form","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracdfdxn+x=sum_p=1^kl_p^prime(x)^pfn+","category":"page"},{"location":"","page":"Home","title":"Home","text":"where l_p^prime(x) represents the finite-difference expansion coefficients for lagrangian differentiation at position n+x. These coefficients are determined numerically by polynomial multiplication after adding the p=0 term, l_0^prime(x)equiv 0, to the first sum. The corresponding coefficient vector is generated in forward order by the function fdiff_expansion_coeffs_differentiation(k,x). Evaluating the finite-difference expansion up to order k we obtain","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracdfdxn+x=sum_p=0^kl_p^prime(x)^pfn=sum_j=0^ks_j^k(x)fn-j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the s_j^k(x)=sum_p=j^kl_p^prime(x)c_j^p are the k^th-order lagrangian differentiation weights.  After changing dummy index to reverse the summation from backward to forward order the expansion becomes","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracdfdxn+x= sum_j=0^ks^k_xjfn-k+j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where s^k_xj  s^k_k-j(x). The weights vector s^k_x is generated by the function fdiff_expansion_weights(coeffs, fdiffs; notation=bwd).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"β = fdiff_expansion_coeffs_differentiation(k, x)  l_0^prime(x) l_k^prime(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"fdiff_expansion_weights(β, fdiffs; notation=bwd) s^k_xj   s_k^k(x) s_0^k(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"create_lagrange_differentiation_weights(k,x) s^k_xj   s_k^k(x) s_0^k(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"fdiff_expansion_coeffs_differentiation(k::Int, x::T) where T<:Real\ncreate_lagrange_differentiation_weights(k::Int, x::T) where T<:Real\ncreate_lagrange_differentiation_matrix(k::Int)\nlagrange_differentiation(f::Vector{Float64}, domain::ClosedInterval{Float64}; k=3, i=0)","category":"page"},{"location":"#CamiXon.fdiff_expansion_coeffs_differentiation-Union{Tuple{T}, Tuple{Int64, T}} where T<:Real","page":"Home","title":"CamiXon.fdiff_expansion_coeffs_differentiation","text":"fdiff_expansion_coeffs_differentiation(k::Int, x::T) where T<:Real\n\nFinite-difference expansion coefficient vector l_0^prime(x)   l_p^prime(x) defining k^th-order lagrangian differentiation of the tabulated analytic function f(n+x) at position x,\n\nfracdfdxn+x=sum_p=0^kl_p^prime(x)^pfn\n\nExample:\n\nk = 2; x = 0\no = fdiff_expansion_coeffs_differentiation(k,x); println(o)\n [0.0, 1.0, -1.5]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.create_lagrange_differentiation_weights-Union{Tuple{T}, Tuple{Int64, T}} where T<:Real","page":"Home","title":"CamiXon.create_lagrange_differentiation_weights","text":"create_lagrange_differentiation_weights(k::Int, x::T) where T<:Real\n\nk^th-order Lagrange differentiation weights vector, s^k(x)  s_k^k(x) s_0^k(x), where x is the position relative point n.\n\nfracdfdxn+x= sum_j=0^ks_k-j^k(x)fn-k+j\n\nwhere s^k_xj  s_k-j(x)^k.\n\nExample:\n\nk = 3\nx = 0\nldw = create_lagrange_differentiation_weights(k,x); println(ldw)\n  Rational{Int64}[-11//6, 3//1, -3//2, 1//3]\n\n sum(ldw)\n   0//1\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.create_lagrange_differentiation_matrix-Tuple{Int64}","page":"Home","title":"CamiXon.create_lagrange_differentiation_matrix","text":"create_lagrange_differentiation_matrix(k::Int)\n\nLagrange differentiation matrix, mij=s_k-j^k(i), for k^th-order lagrangian differentiation,\n\nfracdydxi= sum_j=0^kmijyj\n\nExample:\n\nk = 3\ncreate_lagrange_differentiation_matrix(k)\n 4×4 Matrix{Rational{Int64}}:\n  -11//6   3//1  -3//2   1//3\n   -1//3  -1//2   1//1  -1//6\n    1//6  -1//1   1//2   1//3\n   -1//3   3//2  -3//1  11//6\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.lagrange_differentiation-Tuple{Vector{Float64}, IntervalSets.ClosedInterval{Float64}}","page":"Home","title":"CamiXon.lagrange_differentiation","text":"lagrange_differentiation(f::Vector{Float64},\n                    domain::ClosedInterval{Float64}; k=1, m=1)\n\nk^th-order lagrangian differentiation of the analytic function f, tabulated in forward order on a uniform grid of n points, f1   fn; m is the multiplier for intermediate positions (for m=1 without intermediate points).\n\nExample:\n\nf = [0.0,1,4,9,16,25] # f = x^2\ndomain = 0.0..5.0\nX,Y = lagrange_differentiation(f, domain; k=2, m = 1)\n  (0.0:1.0:5.0, [0.0, 2.0, 4.0, 6.0, 8.0, 10.0])\n\n\n\n\n\n","category":"method"},{"location":"#Integration","page":"Home","title":"Integration","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"trapezoidal_weights(k::Int; rationalize=false, devisor=false)\ntrapezoidal_integration(f, domain, weights)","category":"page"},{"location":"#CamiXon.trapezoidal_weights-Tuple{Int64}","page":"Home","title":"CamiXon.trapezoidal_weights","text":"trapezoidal_weights(k::Int [; rationalize=false [, devisor=false]])\n\nWeight coefficient vector a=a_1 a_k of trapeziodal rule optimized for functions of polynomial form,\n\n    _0^n f(x) dx = a_1 (f_0+f_n) +  + a_k (f_k-1+f_n-k+1)\n                                                         + (f_k++f_n-k)\n\nwhere k is odd. The rule is exact for polynonials of degree d=0 1  k-1. For k=1 the rule reduces to the ordinary trapezoidal rule. By default the output is in Float64, optionally the output is rational, with or without specification of the gcd devisor.\n\nExample::\n\n[trapezoidal_weights(k; rationalize=true, devisor=true) for k=1:2:9]\n5-element Vector{Tuple{Int64, Int64, Vector{Int64}}}:\n  (1, 2, [1])\n  (3, 24, [9, 28, 23])\n  (5, 1440, [475, 1902, 1104, 1586, 1413])\n  (7, 120960, [36799, 176648, 54851, 177984, 89437, 130936, 119585])\n  (9, 7257600, [2082753, 11532470, 261166, 16263486, -1020160, 12489922,\n                                                     5095890, 7783754, 7200319])\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.trapezoidal_integration-Tuple{Any, Any, Any}","page":"Home","title":"CamiXon.trapezoidal_integration","text":"trapezoidal_integration(f, domain, weights)\n\nIntegral of the tabulated function f=f_0 f_n over the domain ab using the optimized trapezoidal rule with endpoint correction by the weightsvector weights,\n\n    _0^n f(x) dx = a_1 (f_0+f_n) +  + a_k (f_k-1+f_n-k+1)\n                                                         + (f_k++f_n-k)\n\nThe rule is exact for polynonials of degree d=0 1 k-1. For k=1 the rule reduces to the ordinary trapezoidal rule (weights = [1/2]).\n\nExamples::\n\np = 3\nc = [1 for i=0:p]\npol = ImmutablePolynomial(c,:z)\nIpol = integrate(pol)\nn = 10\n\ndomain = 0.0..5.0\nx = collect(range(domain, n))\nf = pol.(x .-2.5)\n\nw3 = trapezoidal_weights(3)\ntrapezoidal_integration(f, domain, w3)\n 15.416666666666673\n\nIpol(2.5)-Ipol(-2.5)\n 15.41666666666666\n\n\n\n\n\n","category":"method"},{"location":"#Adams-Method","page":"Home","title":"Adams Method","text":"","category":"section"},{"location":"#Adams-Bashford-expansion","page":"Home","title":"Adams-Bashford expansion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Adams-Bashford integration step is given by the expansion","category":"page"},{"location":"","page":"Home","title":"Home","text":"yn+1-yn = -frach (1-)ln(1-)fn+1=h (sum_p=0^inftyB_p^p)fn+1","category":"page"},{"location":"","page":"Home","title":"Home","text":"A closed expression for the Adams-Bashford expansion coefficients, B_k, is not available. As we already have a finite-difference expansion for the operator (1-)^-1,","category":"page"},{"location":"","page":"Home","title":"Home","text":"frac11-equivsum_p=0^infty^p","category":"page"},{"location":"","page":"Home","title":"Home","text":"we ask for the expansion of","category":"page"},{"location":"","page":"Home","title":"Home","text":"-fracln(1-)=(1-frac12-frac124^2-frac112^3+)fn+1= (sum_p=0^inftyb_p^p)fn+1","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is known as the Adams-Moulton expansion. Its coefficients are calculated numerically by the function fdiff_expansion_adams_moulton_coeffs(k). The Adams-Bashford expansion is obtained as the polynomial product of the two expansions,","category":"page"},{"location":"","page":"Home","title":"Home","text":"(sum_p=0^inftyB_p^p)fn+1=(sum_p=0^infty^p)(sum_p=0^inftyb_p^p)fn+1= ( 1 + frac12 + frac512^2 + )fn+1","category":"page"},{"location":"","page":"Home","title":"Home","text":"The coefficients B_p are calculated numerically with the function fdiff_expansion_adams_bashford_coeffs(k). Evaluating the finite-difference expansion up to order k we obtain (after changing dummy index bring the summation in forward order)","category":"page"},{"location":"","page":"Home","title":"Home","text":"sum_p=0^kB_p^pfn=sum_p=0^kB_psum_j=0^p c_j^ifn-j= sum_j=0^kA_j^k(x)fn-j= sum_j=0^kA_k-j^k(x)fn-k+j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the A_j^k(x)= sum_p=j^k B_pc_j^p are the (k+1)-point Adams-Bashford integration weights.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"β = fdiff_expansion_coeffs_adams_bashford(k)   B_k^k(x) B_0^k(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"adams_bashford_integration_weights = fdiff_expansion_weights(β, fdiffs; notation=bwd)   A_k^k(x) A_0^k(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"fdiff_expansion_coeffs_adams_bashford(k::Int)","category":"page"},{"location":"#CamiXon.fdiff_expansion_coeffs_adams_bashford-Tuple{Int64}","page":"Home","title":"CamiXon.fdiff_expansion_coeffs_adams_bashford","text":"fdiff_expansion_coeffs_adams_bashford(k [; T=Int])\n\n(k+1)-point Adams-Bashford expansion coefficients B_p.\n\n-frac(1-)ln(1-)=sum_p=0^inftyB_p^p=1+ frac12+ frac512^2+ \n\nThe weights are stored in forward order: B_0^k B_k^k - order of use in summation.\n\nExamples:\n\nk = 5\no = fdiff_expansion_coeffs_adams_bashford(k); println(o)\n Rational{Int64}[1//1, 1//2, 5//12, 3//8, 251//720, 95//288]\n\n\n\n\n\n","category":"method"},{"location":"#Adams-Moulton-expansion","page":"Home","title":"Adams-Moulton expansion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Adams-Moulton integration step is given by the expansion","category":"page"},{"location":"","page":"Home","title":"Home","text":"yn+1-yn = -fracln(1-)fn+1 = ( 1 - frac12 - frac112^2 - frac124^3 +)fn+1","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the evaluation of the integration step we limit the summation to k+1 terms (order k),","category":"page"},{"location":"","page":"Home","title":"Home","text":"yn+1-yn= (sum_p=0^kb_p^p)fn+1+","category":"page"},{"location":"","page":"Home","title":"Home","text":"where b_0 b_k are the Adams-Moulton expansion coefficients, rational numbers generated numerically by the function fdiff_expansion_coeffs_adams_moulton(k). Extracting the greatest common denominator, 1D, the step becomes","category":"page"},{"location":"","page":"Home","title":"Home","text":"yn+1-yn= frac1D(sum_p=0^kb_p^prime^p)fn+1+","category":"page"},{"location":"","page":"Home","title":"Home","text":"where b_0^prime b_k^prime are integers and b_p=b_p^primeD. In practice the expansion is restricted to k18 (as limited by integer overflow). Note that this limit is much higher than values used in calculations (typically up to k = 10). Evaluating the finite-difference expansion up to order k we obtain (after changing dummy index bring the summation in forward order)","category":"page"},{"location":"","page":"Home","title":"Home","text":"sum_p=0^kb_p^pfn\n=sum_p=0^kb_psum_j=0^p c_j^ifn-j\n= sum_j=0^ka_j^k(x)fn-j\n= sum_j=0^ka_k-j^k(x)fn-k+j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the a_j^k(x)= sum_p=j^k b_pc_j^p are the (k+1)-point Adams-Moulton integration weights.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"β = fdiff_expansion_coeffs_adams_moulton(k)  b_0 b_k","category":"page"},{"location":"","page":"Home","title":"Home","text":"adams_moulton_weights = fdiff_expansion_weights(β, fdiffs; notation=bwd)  a_k^k a_0^k,","category":"page"},{"location":"","page":"Home","title":"Home","text":"where fdiffs = fdiff_weights_array(k).","category":"page"},{"location":"","page":"Home","title":"Home","text":"adams_moulton_weights = create_adams_moulton_weights(k)  a_k^k a_0^k","category":"page"},{"location":"","page":"Home","title":"Home","text":"fdiff_expansion_coeffs_adams_moulton(k::Int)\ncreate_adams_moulton_weights(k::Int; rationalize=false, devisor=false, T=Int)","category":"page"},{"location":"#CamiXon.fdiff_expansion_coeffs_adams_moulton-Tuple{Int64}","page":"Home","title":"CamiXon.fdiff_expansion_coeffs_adams_moulton","text":"fdiff_expansion_coeffs_adams_moulton(k [; T=Int])\n\nk^th-order Adams-Moulton expansion coefficients,\n\n-fracln(1-) = sum_p=0^inftyb_p^p= 1 - frac12 - frac112^2 - frac124^3 +\n\nThe weights are stored in forward order: b_0^k b_k^k - order of use in summation.\n\nExamples:\n\nk = 5\nb = fdiff_expansion_coeffs_adams_moulton(k::Int); println(b)\n Rational[1//1, -1//2, -1//12, -1//24, -19//720, -3//160]\n\nD = denominator(gcd(b)); println(D)\n 1440\n\no = convert(Vector{Int},(b .* D)); println(o)\n [1440, -720, -120, -60, -38, -27]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.create_adams_moulton_weights-Tuple{Int64}","page":"Home","title":"CamiXon.create_adams_moulton_weights","text":"create_adams_moulton_weights(k::Int [; rationalize=false [, devisor=false [, T=Int]]])\n\nk^th-order Adams-Moulton weights vector,\n\nyn+1 = yn + frac1Dsum_j=0^ka^kjfn+1-k+j\n\nThe weights are stored in the vector a^k equiva_k^kD a_0^kD under the convention a^kj equiv a_k-j^kD, where a_j^k are the Adams-Moulton weight coefficients and D the corresponding Adams-Moulton divisor. By default the output is in Float64, optionally the output is rational,  with or without specification of the gcd devisor.\n\nExample:\n\n[create_adams_moulton_weights(k; rationalize=true, devisor=true, T=Int) for k=1:8]\n8-element Vector{Tuple{Int64, Int64, Vector{Int64}}}:\n (1, 2, [1, 1])\n (2, 12, [-1, 8, 5])\n (3, 24, [1, -5, 19, 9])\n (4, 720, [-19, 106, -264, 646, 251])\n (5, 1440, [27, -173, 482, -798, 1427, 475])\n (6, 60480, [-863, 6312, -20211, 37504, -46461, 65112, 19087])\n (7, 120960, [1375, -11351, 41499, -88547, 123133, -121797, 139849, 36799])\n (8, 3628800, [-33953, 312874, -1291214, 3146338, -5033120, 5595358, -4604594, 4467094, 1070017])\n\n\n\n\n\n","category":"method"},{"location":"#Strings","page":"Home","title":"Strings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"sup(i::T) where T<:Real\nsub(i::T) where T<:Real\nfrac(i::Rational{Int})","category":"page"},{"location":"#CamiXon.sup-Tuple{T} where T<:Real","page":"Home","title":"CamiXon.sup","text":"sup(i::T) where T<:Real\n\nSuperscript notation for integers and rational numbers\n\nExamples:\n\nsup(3) * 'P'\n \"³P\"\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.sub-Tuple{T} where T<:Real","page":"Home","title":"CamiXon.sub","text":"sub(i::T) where T<:Real\n\nSubscript notation for integers, rational numbers and a subset of lowercase characters ('a','e','h','k','l','m','n','o','p','r','s','t','x')\n\nExamples:\n\n'D' * sub(5//2)\n \"D₅⸝₂\"\n\n\"m\" * sub(\"e\")\n \"mₑ\"\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.frac-Tuple{Rational{Int64}}","page":"Home","title":"CamiXon.frac","text":"frac(i)\n\nFraction notation for rational numbers\n\nExamples:\n\nfrac(-5//2)\n \"-⁵/₂\"\n\n\n\n\n\n","category":"method"},{"location":"#Dicts","page":"Home","title":"Dicts","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"dictElements\ndictIsotopes","category":"page"},{"location":"#CamiXon.dictElements","page":"Home","title":"CamiXon.dictElements","text":"dictElements\n\nSource:  Standard atomic weights of the elements 2021 (IUPAC Technical Report)\n\nExample:\n\ndictElements\n  Dict{Int64, Tuple{String, String, Any}} with 102 entries:\n    5  => (\"boron\", \"B\", 10.81)\n    56 => (\"barium\", \"Ba\", 137.33)\n    35 => (\"bromine\", \"Br\", 79.904)\n    55 => (\"caesium\", \"Cs\", 132.91)\n    60 => (\"neodymium\", \"Nd\", 144.24)\n    30 => (\"zinc\", \"Zn\", 65.38)\n    32 => (\"germanium\", \"Ge\", 72.63)\n    6  => (\"carbon\", \"C\", 12.011)\n    ⋮  => ⋮\n\n\n\n\n\n","category":"constant"},{"location":"#CamiXon.dictIsotopes","page":"Home","title":"CamiXon.dictIsotopes","text":"dictIsotopes\n\nSources: AME2020, LINDC(NDS)-0794 and INDC(NDS)-0794\n\nExample:\n\ndictIsotopes\n  Dict{Tuple{Int64, Int64}, Tuple{String, Real, Real, Real, Int64, Real, Real, Any, Any, Vararg{Nothing}}} with 340 entries:\n    (71, 175) => (\"Lu\", 5.37, 1.74941e8, 3.5, 1, 1.0e100, 2.2257, 3.49, 97.401)\n    (40, 92)  => (\"Zr\", 4.3057, 9.1905e7, 0, 1, 1.0e100, 0, 0, 17.15)\n    (48, 111) => (\"Cd\", 4.5845, 1.10904e8, 0.5, 1, 1.0e100, -0.594, 0, 12.795)\n    (72, 176) => (\"Hf\", 5.3286, 1.75941e8, 0, 1, 1.0e100, 0, 0, 5.26)\n    (30, 68)  => (\"Zn\", 3.9658, 6.79248e7, 0, 1, 1.0e100, 0, 0, 18.45)\n    (76, 184) => (\"Os\", 5.3823, 1.83952e8, 0, 1, 5.6e13, 0, 0, 0.02)\n    (54, 129) => (\"Xe\", 4.7775, 1.28905e8, 0.5, 1, 1.0e100, -0.777961, 0, 26.401)\n    ⋮         => ⋮\n\n\n\n\n\n","category":"constant"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
