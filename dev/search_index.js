var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CamiXon","category":"page"},{"location":"#CamiXon.jl","page":"Home","title":"CamiXon.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package for image analysis of backscattered light","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Table-of-contents","page":"Home","title":"Table of contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Finite-difference-methods","page":"Home","title":"Finite-difference methods","text":"","category":"section"},{"location":"#Finite-differences","page":"Home","title":"Finite differences","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Consider the analytic function f tabulated in forward order  (growing index) at n positions on a grid. The finite difference of two adjacent values on a uniform grid is given by the relation","category":"page"},{"location":"","page":"Home","title":"Home","text":"nabla fn = fn-fn-1","category":"page"},{"location":"","page":"Home","title":"Home","text":"This called the finite difference in backward difference notation. In this notation the  k^th-order backward difference, which involves k+1 points) is defined by a weighted sum over the function values in backward order, fn ldots fn-k,","category":"page"},{"location":"","page":"Home","title":"Home","text":"nabla^k fn = fn + c_1^kfn-1 + cdots + c_k^kfn-k = sum_j=0^k c_j^kfn-j","category":"page"},{"location":"","page":"Home","title":"Home","text":"The k+1 coefficients c_j^k=(-1)^jbinomkj are weight factors (short: weights) defining the summation. Note that c_0^kequiv1 and c_k^k=(-1)^k.","category":"page"},{"location":"","page":"Home","title":"Home","text":"As the function f is tabulated in forward order we change dummy index to write also the summation in forward order (coefficients in backward order)","category":"page"},{"location":"","page":"Home","title":"Home","text":"nabla^k fn = sum_j=0^k c_k-j^kfn-k+j","category":"page"},{"location":"","page":"Home","title":"Home","text":"Functions:  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_diff_weight(k,j) rightarrow c_j^k","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_diff_weights(k) rightarrow  c_k^k c_1^kldots c_0^k","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_diff_weights_array(kmax) rightarrow   c_0^0 c_1^1c_0^1 ldots c_k^k c_k-1^kldots c_0^k ","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_diff_weight(k::Int, i::Int)\nf_diff_weights(k::Int)\nf_diff_weights_array(kmax::Int)","category":"page"},{"location":"#CamiXon.f_diff_weight-Tuple{Int64, Int64}","page":"Home","title":"CamiXon.f_diff_weight","text":"f_diff_weight(k, j)\n\nWeight coefficient\n\nc_j^k=(-1)^jbinomkj\n\nof the k^th-order finite difference operator nabla^k and corresponding to the function value fn-j.\n\nExample:\n\nk = 5; j = 3\nf_diff_weight(k, j)\n -10\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.f_diff_weights-Tuple{Int64}","page":"Home","title":"CamiXon.f_diff_weights","text":"f_diff_weights(k)\n\nWeight vector c_k^k ldots c_0^k defining the k^th-order finite difference operator,\n\nnabla^kfn\t=c_k^kthinspace c_k-1^kthinspaceldotsc_0^kleftbeginarrayc\nfn-k\nvdots\nfn\nendarrayright=sum_j=0^kc_k-j^kfn-k+j\n\nfor use with the elements of an analytic function, f, tabulated in forward order, fn-k fn  (coefficients in backward order).\n\nExample:\n\nk = 3\nf_diff_weights(k)\n4-element Vector{Int64}:\n  1\n -3\n  3\n -1\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.f_diff_weights_array-Tuple{Int64}","page":"Home","title":"CamiXon.f_diff_weights_array","text":"f_diff_weights_array(kmax)\n\nCollection of weight vectors c_k^k ldots c_0^k  defining the finite difference operators nabla^0 ldots nabla^k.\n\nExample:\n\nkmax = 3\n∇ = f_diff_weights_array(kmax)\n4-element Vector{Vector{Int64}}:\n [1]\n [-1, 1]\n [1, -2, 1]\n [-1, 3, -3, 1]\n\n\n\n\n\n","category":"method"},{"location":"#Finite-difference-expansion","page":"Home","title":"Finite difference expansion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Finite-difference calculus builds on the finite-difference expansion, in practice truncated at order k,","category":"page"},{"location":"","page":"Home","title":"Home","text":"sum_p=0^inftya_pnabla^pfn=sum_p=0^ka_pnabla^pfn+cdots","category":"page"},{"location":"","page":"Home","title":"Home","text":"By choosing the order sufficiently high the expansion can be approximated to any desired level of accuracy. A finite-difference expansion of order k is defined by k+1 finite-difference expansion coefficients, above denoted by a_0 ldots a_k. Note that both the coefficients and the operators appear in forward order. It takes some bookkeeping to rewrite the expansion in the form of a weighted sum over the k+1 function values in backward order fnldotsfn-k. Substituting the backward-difference expression for nabla^k, we find","category":"page"},{"location":"","page":"Home","title":"Home","text":"sum_p=0^ka_pnabla^pfn=sum_p=0^ka_psum_j=0^pc_j^ifn-j=sum_j=0^ksum_p=j^ka_pc_j^pfn-j=sum_j=0^kb_j^kfn-j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the weighted summation is defined by the weights b_j^k=sum_p=j^ka_pc_j^p with j=0ldotsk. After changing dummy index to obtain forward order  (coefficients in backward order) by the weights are generated by the function f_diff_expansion_weights(coeffs,∇), where ∇ =f_diff_weights_array(kmax).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"coeffs = a_0 ldots a_k","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_diff_expansion_weights(coeffs,∇) rightarrow b_k^k ldots b_0^k","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_diff_expansion_weights(coeffs, ∇)","category":"page"},{"location":"#CamiXon.f_diff_expansion_weights-Tuple{Any, Any}","page":"Home","title":"CamiXon.f_diff_expansion_weights","text":"f_diff_expansion_weights(a, ∇)\n\nWeight vector b_k^k ldots b_0^k corresponding to the expansion coefficients a_0^k ldots a_k^k of the k^th-order finite-difference expansion,\n\nsum_p=0^ka_pnabla^pfn=sum_j=0^kb_j^kfn-j=sum_j=0^kb_k-j^kfn-k+j\n\nwhere fn-k fn are elements of the analytic function f tabulated in forward order. Note the difference in ordering between the finite-difference expansion coefficients, a_0 ldots a_k, and the finite-difference expansion weights, b_k^k ldots b_0^k. Furthermore, the coefficients, a_j, are independent of k, whereas the weights, b_j^k, are k-dependent.\n\nExample:\n\nk=5\n∇ = f_diff_weights_array(k)\na = UnitRange(0,k)\nb = f_diff_expansion_weights(a, ∇)\n6-element Vector{Int64}:\n  15\n -55\n  85\n -69\n  29\n  -5\n\n\n\n\n\n","category":"method"},{"location":"#Lagrangian-interpolation","page":"Home","title":"Lagrangian interpolation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The definition of the finite difference can be rewritten in the form","category":"page"},{"location":"","page":"Home","title":"Home","text":"(1-nabla)fn+1 = fn","category":"page"},{"location":"","page":"Home","title":"Home","text":"Inverting this expression we have","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+1 = (1 - nabla)^-1 fn = sum_p=0^infty^p fn","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+2 = (1 - nabla)^-2 fn = sum_p=0^inftyp^p fn","category":"page"},{"location":"","page":"Home","title":"Home","text":"         vdots","category":"page"},{"location":"","page":"Home","title":"Home","text":"which can be generalized into the form","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+x = (1 - nabla)^-x fn = sum_p=0^inftyl_p(x)^p fn","category":"page"},{"location":"","page":"Home","title":"Home","text":"where l_0equiv 1 and l_p(x) = x(x+1)(x+2)cdots(x+p-1)p for p0 are the finite-difference expansion coefficients for lagrangian interpolation. These are generated by the function f_diff_expansion_coeffs_interpolation(k,x). Evaluating the finite-difference expansion up to order k we obtain (after changing dummy index to reverse the summation from backward to forward order)","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+x =sum_p=0^kl_p(x)nabla^pfn= sum_j=0^kr_j^k(x)fn-j= sum_j=0^kr_k-j^k(x)fn-k+j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the k+1 weights r_j^k(x)= sum_p=j^k l_p(x) c_j^p are the  lagrangian interpolation weights. These are generated for use in backward order by the function f_diff_expansion_weights(coeffs,∇), with ∇ = f_diff_weights_array(k).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"coeffs = f_diff_expansion_coeffs_interpolation(k,x) rightarrow l_0(x) ldots l_k(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"lagrangian interpolation weights = f_diff_expansion_weights(coeffs,∇) rightarrow r_k^k(x) ldots r_0^k(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_diff_expansion_coeffs_interpolation(k::Int, x::T) where T<:Real\nf_diff_expansion_coeffs_array_interpolation(k::Int, m::Int)\nf_diff_expansion_weights_array(n::Int, k::Int, m::Int, l::Vector{Vector{T}}) where T<:Real\nsummation_ranges(n::Int, i::Int, k::Int, m::Int)\nf_diff_function_sequences(f, k::Int, m::Int)\nlagrangian_interpolation(f::Vector{Float64}, domain::ClosedInterval{Float64}; k=1, i=0)\n","category":"page"},{"location":"#CamiXon.f_diff_expansion_coeffs_interpolation-Union{Tuple{T}, Tuple{Int64, T}} where T<:Real","page":"Home","title":"CamiXon.f_diff_expansion_coeffs_interpolation","text":"f_diff_expansion_coeffs_interpolation(k::Int, x::T) where T<:Real\n\nFinite-difference expansion coefficient vector l_0(x) ldots l_p(x) defining k^th-order lagrangian interpolation of the tabulated analytic function f(n+x) at offset position x with respect to the position n, with -kle xle 0,\n\nfn+x =sum_p=0^kl_p(x)nabla^pfn\n\nwhere l_0equiv 1 and l_p(x) = x(x+1)(x+2)cdots(x+p-1)p.\n\nExamples:\n\nk=3\n∇ = f_diff_weights_array(k)\nx=-1\nl = f_diff_expansion_coeffs_interpolation(k,x)\nr = f_diff_expansion_weights(l, ∇)\nprintln(l,r)\n [1, -2, 1, 0][0, 0, 1, 0]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.f_diff_expansion_coeffs_array_interpolation-Tuple{Int64, Int64}","page":"Home","title":"CamiXon.f_diff_expansion_coeffs_array_interpolation","text":"f_diff_expansion_coeffs_array_interpolation(k::Int, m::Int)\n\nFinite-difference expansion coefficient vector l_0(x) ldots l_p(x) defining k^th-order lagrangian interpolation of the tabulated analytic function f(n+x) for k*m+1 values of x.\n\n\n\nk = 2; m = 2\no = f_diff_expansion_coeffs_array_interpolation(k,m); println(o)\n [[1.0, 0.0, 0.0], [1.0, -0.5, -0.125], [1.0, -1.0, -0.0], [1.0, -1.5, 0.375], [1.0, -2.0, 1.0]]\n\nm = 1\no = f_diff_expansion_coeffs_array_interpolation(k,m); println(o)\n [[1, 0, 0], [1, -1, 0], [1, -2, 1]]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.f_diff_expansion_weights_array-Union{Tuple{T}, Tuple{Int64, Int64, Int64, Array{Vector{T}, 1}}} where T<:Real","page":"Home","title":"CamiXon.f_diff_expansion_weights_array","text":"f_diff_expansion_weights_array(n::Int, k::Int, m::Int, l::Vector{Vector{T}}) where T<:Real\n\nWeight factors for k^th-order finite-difference expansion with finite-difference expansion coefficients l on uniform grid of (n-1)*m+1 points.\n\nExample:\n\nn = 7; k = 3; m = 1\nl = f_diff_expansion_coeffs_array_interpolation(k, m)\no = f_diff_expansion_weights_array(n, k, m, l); println(o)\n [[1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.summation_ranges-NTuple{4, Int64}","page":"Home","title":"CamiXon.summation_ranges","text":"summation_ranges(n, k, i, m)\n\nSummation ranges for interpolation positions i = 0 1 ldots (n-1)*m as used in k^th-order lagrangian interpolation of the anaytic function f tabulated in forward order on a uniform grid of n points, f[1], ...,f[n].\n\nExamples:\n\nn = 7; k = 2; m = 1\no = [summation_ranges(n,i,k,m) for i=0:(n-1)*m]; println(o)\n UnitRange{Int64}[1:3, 2:4, 3:5, 4:6, 5:7, 5:7, 5:7]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.f_diff_function_sequences-Tuple{Any, Int64, Int64}","page":"Home","title":"CamiXon.f_diff_function_sequences","text":"f_diff_function_sequences(f, n::Int, k::Int, m::Int)\n\nFinite-difference interpolation sequences (of k+1 function values in forward order) for k^th-order lagrangian intepolation of the anaytic function f tabulated in forward order at n points, f[1], ...,f[n].\n\nExample:\n\nf = [0,1,2,3,4,5,6]\nk = 2; m = 1\no = f_diff_function_sequences(f, k, m); println(o)\n [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [4, 5, 6], [4, 5, 6]]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.lagrangian_interpolation-Tuple{Vector{Float64}, IntervalSets.ClosedInterval{Float64}}","page":"Home","title":"CamiXon.lagrangian_interpolation","text":"lagrangian_interpolation(f::Vector{Float64}, domain::ClosedInterval{Float64}; k=1, i=0)\n\nk^th-order lagrangian-interpolation with i intermediate point of the analytic function f tabulated in forward order at n points, f1 ldots fn.\n\nExample:\n\nf = [0.0,1,2,3,4,5,6,7]\ndomain = 0.0..1.0\n(X,Y) = lagrangian_interpolation(f, domain; k=2, i=1); println((X,Y))\n (0.0:0.07142857142857142:1.0, [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0])\n\n\n\n\n\n","category":"method"},{"location":"#Lagrangian-differentiation","page":"Home","title":"Lagrangian differentiation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To derive the lagrangian differentiation formulas we differentiate","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+x = (1 - nabla)^-x fn","category":"page"},{"location":"","page":"Home","title":"Home","text":"analytically with respect to x.","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracdfdxn+x=-ln(1-nabla) (1-nabla)^-xfn=sum_q=1^ktfrac1q^qsum_p=0^kl_p(x)^pfn","category":"page"},{"location":"","page":"Home","title":"Home","text":"Expanding the r.h.s.\\ in powers of nabla for given values of n and x we obtain an expression of the form","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracdfdxn+x=sum_p=1^kl_p^prime(x)nabla^pfn","category":"page"},{"location":"","page":"Home","title":"Home","text":"where l_p^prime(x) represents the finite-difference expansion coefficients for lagrangian differentiation at position n+x. These coefficients are determined numerically by polynomial multiplication after adding the p=0 term l_0^prime(x)equiv 0. These are generated by the function f_diff_expansion_coeffs_differentiation(k,x). Evaluating the finite-difference expansion up to order k we obtain (after changing dummy index to reverse the summation from backward to forward order)","category":"page"},{"location":"","page":"Home","title":"Home","text":"fn+x=sum_p=0^kl_p^prime(x)nabla^pfn=sum_j=0^ks_j^k(x)fn-j= sum_j=0^ks_k-j^k(x)fn-k+j","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the s_j^k(x)=sum_p=j^kl_p^prime(x)c_j^p are the k-point lagrangian differentiation weights. These are generated for use in backward order by the function f_diff_expansion_weights(coeffs,∇), with ∇ = f_diff_weights_array(k).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"coeffs = f_diff_expansion_coeffs_differentiation(k,x) rightarrow l_0(x) ldots l_k(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"lagrangian differentiation weights = f_diff_expansion_weights(coeffs,∇) rightarrow s_k^k(x) ldots s_0^k(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_diff_expansion_coeffs_differentiation(k::Int, x::T) where T<:Real\nf_diff_expansion_coeffs_array_differentiation(k::Int, m::Int)\nlagrangian_differentiation(f::Vector{Float64}, domain::ClosedInterval{Float64}; k=3, i=0)","category":"page"},{"location":"#CamiXon.f_diff_expansion_coeffs_differentiation-Union{Tuple{T}, Tuple{Int64, T}} where T<:Real","page":"Home","title":"CamiXon.f_diff_expansion_coeffs_differentiation","text":"f_diff_expansion_coeffs_differentiation(k::Int, x::T) where T<:Real\n\nFinite-difference expansion coefficient vector l_0(x) ldots l_p(x) defining k^th-order lagrangian differentiation of the tabulated analytic function f(n+x) at position x.\n\nExample:\n\nk = 2; x = 0\no = f_diff_expansion_coeffs_differentiation(k,x); println(o)\n [0.0, 1.0, -1.5]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.f_diff_expansion_coeffs_array_differentiation-Tuple{Int64, Int64}","page":"Home","title":"CamiXon.f_diff_expansion_coeffs_array_differentiation","text":"f_diff_expansion_coeffs_array_differentiation(k::Int, m::Int)\n\nFinite-difference expansion coefficient vector l_0(x) ldots l_p(x) defining k^th-order lagrangian differentiation  of the tabulated analytic function f(n+x) for k*m+1 values of x in the interval -k cdots 0 and with m-1 intermediate points.\n\nExamples:\n\nk = 2; m = 2\no = f_diff_expansion_coeffs_array_differentiation(k,m); println(o)\n [[0.0, 1.0, 0.5], [0.0, 1.0, 0.0], [0.0, 1.0, -0.5], [0.0, 1.0, -1.0], [0.0, 1.0, -1.5]]\n\nm = 1\no = f_diff_expansion_coeffs_array_differentiation(k,m); println(o)\n [[0.0, 1.0, 0.5], [0.0, 1.0, -0.5], [0.0, 1.0, -1.5]]\n\n\n\n\n\n","category":"method"},{"location":"#CamiXon.lagrangian_differentiation-Tuple{Vector{Float64}, IntervalSets.ClosedInterval{Float64}}","page":"Home","title":"CamiXon.lagrangian_differentiation","text":"lagrangian_differentiation(f::Vector{Float64}, domain::ClosedInterval{Float64}; k=1, i=0)\n\nk^th-order lagrangian differentiation with i intermediate points of the function f tabulated in forward order at n points, f1 ldots fn.\n\nExample:\n\nf = [0.0,1,2,3,4,5]\ndomain = 0.0..5.0\nX,Y = lagrangian_differentiation(f, domain; k=2, i = 0); println(X,Y)\n (0.0:1.0:5.0, [1.0, 1.0, 1.0, 1.0, 1.0, 1.0])\n\n\n\n\n\n","category":"method"},{"location":"#Adams-Moulton-integration","page":"Home","title":"Adams-Moulton integration","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Adams-Moulton integration step is given by the expansion","category":"page"},{"location":"","page":"Home","title":"Home","text":"yn+1-yn = -frach nablaln(1-nabla)fn+1","category":"page"},{"location":"","page":"Home","title":"Home","text":"      = h ( 1 - frac12nabla - frac112nabla^2 - frac124nabla^3 +cdots)fn+1","category":"page"},{"location":"","page":"Home","title":"Home","text":"      = =h (sum_k=0^inftyb_knabla^k)fn+1\n\n\nA closed expression for the Adams-Moulton expansion coefficients b_k is not available so these are generated numerically by the function f_diff_expansion_coeffs_adams_moulton(k)(ref) For the evaluation of the integration step we limit the summation to k+1 terms (order k)\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"math y[n+1]-y[n]= h\\ (\\sum{p=0}^{k}cp\\nabla^p)f[n+1]+\\cdots,","category":"page"},{"location":"","page":"Home","title":"Home","text":"\nwhere ``b_0,\\ldots,b_k`` are rational numbers. Extracting the graetest common denominator, ``1/D``, the step becomes\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"math y[n+1]-y[n]= \\frac{h}{D}(\\sum{p=0}^{k}bp^{\\prime}\\nabla^p)f[n+1]+\\cdots,","category":"page"},{"location":"","page":"Home","title":"Home","text":"\nwhere ``b_0^{\\prime},\\ldots,b_k^{\\prime}`` are integers and ``b_p=b_p^{\\prime}/D``. In practice the expansion is restricted to ``k<18`` (as limited by integer overflow). Note that this limit is much higher than values used in calculations (typically up to ``k = 10``).\n\nFunction:\n\n`coeffs` = [`f_diff_expansion_coeffs_adams_moulton(k)`](@ref) ``\\rightarrow [b_k^k(x),\\ ,\\ldots,\\ b_0^k(x)]``\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs fdiffexpansioncoeffsadams_moulton(k::Int)","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n## FITS\n\nFITS stands for 'Flexible Image Transport System'. This is an open standard origionally developed for the astronomy community to store telescope images together with tables of spectral information. Over the years it has developed into a scientific standard - http://fits.gsfc.nasa.gov/iaufwg.\n\nWithin CamiXion only the basic FITS functionality is implemented for users not requiring celestal coordinates. The user can create, read and extend .fits files as well as create, edit and delete user-defined metainformation.\n\nA FITS file consists of a sequence of one or more header-data-units (HDUs), each containing a data block preceeded by header records of metainformation.\n\nBy the command `f = fits_read(filnam)` we asign a collection of `FITS_HDU` objects from the file `filnam` to the variable `f`.\n\n### FITS - Types\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs FITSHDU FITSheader FITSdata FITStable FITS_name","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n### FITS - HDU Methods\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs fitsinfo(hdu::FITSHDU) parseFITSTABLE(hdu::FITS_HDU)","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n### FITS - File Methods\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs castFITSname(filename::String) fitscombine(filnamFirst::String, filnamLast::String; protect=true) fitscopy(filenameA::String, filenameB::String=\" \"; protect=true) fitscreate(filename::String, data=[]; protect=true) fitsextend(filename::String, dataextend, hdutype=\"IMAGE\") fitsread(filename::String)","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n### FITS - Key Methods\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs fitsaddkey(filename::String, hduindex::Int, key::String, val::Real, com::String) fitsdeletekey(filename::String, hduindex::Int, key::String) fitseditkey(filename::String, hduindex::Int, key::String, val::Real, com::String) fitsrenamekey(filename::String, hduindex::Int, keyold::String, keynew::String)","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n## FORTRAN\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs FORTRANformat castFORTRANformat(str::String) castFORTRAN_datatype(str::String)","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n## Plotting\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs step125(x::Real) select125(x) steps(x::Vector{T} where T<:Real) stepcenters(x::Vector{T} where T<:Real) stepedges(x::Vector{T} where T<:Real) edges(px, Δx=1.0, x0=0.0)","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n## Search algorithms\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs findall(A::Union{String,AbstractArray{T,1}}, a::T...; count=false)  where T findfirst(A::Union{String,AbstractArray{T,1}}, a::T...; dict=false)  where T find_last(A::Union{String,AbstractArray{T,1}}, a::T...; dict=false)  where T","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n## Math\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs canonicalpartitions(n::Int, m=0; header=true, reverse=true) integerpartitions(n::Int, m=0; transpose=false, count=false) log10characteristicpower(x) log10mantissa(x) polynomderivcoeffs(c,deriv=0) polynom(c::Vector{T}, x::T) where T<:Real polynommultiplicationcoeffs(a::Vector{<:Number}, b::Vector{<:Number}) permutationsunique_count(p::Array{Array{Int64,1},1}, i::Int)","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n## Index\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@index ```","category":"page"}]
}
